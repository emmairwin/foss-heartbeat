{"body": "I am sad about this. Do we need to do this?\r\n\r\nSome general points - I don't have time to do an in-depth review right now, but from a quick look some points need addressing anyway, so...\r\n\r\n- AboutPocket.jsm should allow you to have a better example and get rid of the boilerplate. I don't know where the register/unregister/protocol factory code came from, but Cm and various other aliases/XPCOMUtils should make this a lot less work. Maybe it's just the this.instance checking - XPCOM should be taking care of this for you.\r\n- URI flags don't \"not do anything\", they control the security restrictions and abilities (e.g. can/must they load in the child process or no) of the page... they're quite important, generally speaking. I don't know if about's protocol handler here has sane defaults by now, and how they apply to things that don't use the builtin protocol redirector, but there we are.\r\n- please verify that the page has a null principal or similar non-privileged principal in the test\r\n- enforce this in newChannel (see aboutpocket.jsm)\r\n- use the loadInfo parameter to create the channel (again, see aboutpocket.jsm)\r\n- this is a new about: page and ideally it should be forced to load in the child process and not the parent (to take advantage of sandboxing). I don't know how easy it is to lazily load this module in the child process (to make the URI available there), but ideally we should try. It will need the relevant URI flags and I guess maybe we should make newChannel throw if called in the parent, I'm not sure.", "body_text": "I am sad about this. Do we need to do this?\nSome general points - I don't have time to do an in-depth review right now, but from a quick look some points need addressing anyway, so...\n\nAboutPocket.jsm should allow you to have a better example and get rid of the boilerplate. I don't know where the register/unregister/protocol factory code came from, but Cm and various other aliases/XPCOMUtils should make this a lot less work. Maybe it's just the this.instance checking - XPCOM should be taking care of this for you.\nURI flags don't \"not do anything\", they control the security restrictions and abilities (e.g. can/must they load in the child process or no) of the page... they're quite important, generally speaking. I don't know if about's protocol handler here has sane defaults by now, and how they apply to things that don't use the builtin protocol redirector, but there we are.\nplease verify that the page has a null principal or similar non-privileged principal in the test\nenforce this in newChannel (see aboutpocket.jsm)\nuse the loadInfo parameter to create the channel (again, see aboutpocket.jsm)\nthis is a new about: page and ideally it should be forced to load in the child process and not the parent (to take advantage of sandboxing). I don't know how easy it is to lazily load this module in the child process (to make the URI available there), but ideally we should try. It will need the relevant URI flags and I guess maybe we should make newChannel throw if called in the parent, I'm not sure.", "url": "https://api.github.com/repos/mozilla/normandy/issues/comments/308259399", "created_at": "2017-06-13T21:51:10Z", "author_association": "CONTRIBUTOR", "html_url": "https://github.com/mozilla/normandy/pull/801#issuecomment-308259399", "updated_at": "2017-06-13T21:51:10Z", "user": {"following_url": "https://api.github.com/users/gijsk/following{/other_user}", "events_url": "https://api.github.com/users/gijsk/events{/privacy}", "organizations_url": "https://api.github.com/users/gijsk/orgs", "url": "https://api.github.com/users/gijsk", "gists_url": "https://api.github.com/users/gijsk/gists{/gist_id}", "html_url": "https://github.com/gijsk", "subscriptions_url": "https://api.github.com/users/gijsk/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/375983?v=4", "repos_url": "https://api.github.com/users/gijsk/repos", "received_events_url": "https://api.github.com/users/gijsk/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/gijsk/starred{/owner}{/repo}", "site_admin": false, "login": "gijsk", "type": "User", "id": 375983, "followers_url": "https://api.github.com/users/gijsk/followers"}, "body_html": "<p>I am sad about this. Do we need to do this?</p>\n<p>Some general points - I don't have time to do an in-depth review right now, but from a quick look some points need addressing anyway, so...</p>\n<ul>\n<li>AboutPocket.jsm should allow you to have a better example and get rid of the boilerplate. I don't know where the register/unregister/protocol factory code came from, but Cm and various other aliases/XPCOMUtils should make this a lot less work. Maybe it's just the this.instance checking - XPCOM should be taking care of this for you.</li>\n<li>URI flags don't \"not do anything\", they control the security restrictions and abilities (e.g. can/must they load in the child process or no) of the page... they're quite important, generally speaking. I don't know if about's protocol handler here has sane defaults by now, and how they apply to things that don't use the builtin protocol redirector, but there we are.</li>\n<li>please verify that the page has a null principal or similar non-privileged principal in the test</li>\n<li>enforce this in newChannel (see aboutpocket.jsm)</li>\n<li>use the loadInfo parameter to create the channel (again, see aboutpocket.jsm)</li>\n<li>this is a new about: page and ideally it should be forced to load in the child process and not the parent (to take advantage of sandboxing). I don't know how easy it is to lazily load this module in the child process (to make the URI available there), but ideally we should try. It will need the relevant URI flags and I guess maybe we should make newChannel throw if called in the parent, I'm not sure.</li>\n</ul>", "id": 308259399, "issue_url": "https://api.github.com/repos/mozilla/normandy/issues/801"}