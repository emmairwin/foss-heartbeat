{"original_position": 124, "diff_hunk": "@@ -0,0 +1,173 @@\n+/* This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n+\n+\"use strict\";\n+\n+const {classes: Cc, interfaces: Ci, utils: Cu} = Components;\n+Cu.import(\"resource:///modules/ShellService.jsm\");\n+Cu.import(\"resource://gre/modules/AddonManager.jsm\");\n+Cu.import(\"resource://gre/modules/Preferences.jsm\");\n+Cu.import(\"resource://gre/modules/Services.jsm\");\n+Cu.import(\"resource://gre/modules/Task.jsm\");\n+Cu.import(\"resource://gre/modules/TelemetryArchive.jsm\");\n+Cu.import(\"resource://gre/modules/XPCOMUtils.jsm\");\n+Cu.import(\"resource://shield-recipe-client/lib/NormandyApi.jsm\");\n+\n+const {generateUUID} = Cc[\"@mozilla.org/uuid-generator;1\"].getService(Ci.nsIUUIDGenerator);\n+\n+this.EXPORTED_SYMBOLS = [\"ClientEnvironment\"];\n+\n+const prefs = Services.prefs.getBranch(\"extensions.shield-recipe-client.\");\n+\n+// Cached API request for client attributes that are determined by the Normandy\n+// service.\n+let _classifyRequest = null;\n+const getClientClassification = Task.async(function *() {\n+  if (!_classifyRequest) {\n+    _classifyRequest = NormandyApi.classifyClient();\n+  }\n+  return yield _classifyRequest;\n+});\n+\n+this.ClientEnvironment = {\n+  /**\n+   * Test wrapper that mocks the server request for classifying the client.\n+   * @param  {Object}   data          Fake server data to use\n+   * @param  {Function} testGenerator Test generator to execute while mock data is in effect.\n+   */\n+  withMockClassify(data, testGenerator) {\n+    return function* inner() {\n+      const oldRequest = _classifyRequest;\n+      _classifyRequest = Promise.resolve(data);\n+      yield testGenerator();\n+      _classifyRequest = oldRequest;\n+    };\n+  },\n+\n+  /**\n+   * Create an object that provides general information about the client application.\n+   *\n+   * RecipeRunner.jsm uses this as part of the context for filter expressions,\n+   * so avoid adding non-getter functions as attributes, as filter expressions\n+   * cannot execute functions.\n+   *\n+   * Also note that, because filter expressions implicitly resolve promises, you\n+   * can add getter functions that return promises for async data.\n+   * @return {Object}\n+   */\n+  getEnvironment() {\n+    const environment = {};\n+\n+    XPCOMUtils.defineLazyGetter(environment, \"userId\", () => {\n+      let id = prefs.getCharPref(\"user_id\");\n+      if (id === \"\") {\n+        // generateUUID adds leading and trailing \"{\" and \"}\". strip them off.\n+        id = generateUUID().toString().slice(1, -1);\n+        prefs.setCharPref(\"user_id\", id);\n+      }\n+      return id;\n+    });\n+\n+    XPCOMUtils.defineLazyGetter(environment, \"country\", () => {\n+      return getClientClassification().then(classification => classification.country);\n+    });\n+\n+    XPCOMUtils.defineLazyGetter(environment, \"request_time\", () => {\n+      return getClientClassification().then(classification => classification.request_time);\n+    });\n+\n+    XPCOMUtils.defineLazyGetter(environment, \"distribution\", () => {\n+      return Preferences.get(\"distribution.id\", \"default\");\n+    });\n+\n+    XPCOMUtils.defineLazyGetter(environment, \"telemetry\", () => {\n+      return Task.spawn(function *() {\n+        const pings = yield TelemetryArchive.promiseArchivedPingList();\n+\n+        // get most recent ping per type\n+        const mostRecentPings = {};\n+        for (const ping of pings) {\n+          if (ping.type in mostRecentPings) {\n+            if (mostRecentPings[ping.type].timeStampCreated < ping.timeStampCreated) {\n+              mostRecentPings[ping.type] = ping;\n+            }\n+          } else {\n+            mostRecentPings[ping.type] = ping;\n+          }\n+        }\n+\n+        const telemetry = {};\n+        for (const key in mostRecentPings) {\n+          const ping = mostRecentPings[key];\n+          telemetry[ping.type] = yield TelemetryArchive.promiseArchivedPingById(ping.id);\n+        }\n+        return telemetry;\n+      });\n+    });\n+\n+    XPCOMUtils.defineLazyGetter(environment, \"version\", () => {\n+      return Services.appinfo.version;\n+    });\n+\n+    XPCOMUtils.defineLazyGetter(environment, \"channel\", () => {\n+      return Services.appinfo.defaultUpdateChannel;\n+    });\n+\n+    XPCOMUtils.defineLazyGetter(environment, \"isDefaultBrowser\", () => {\n+      return ShellService.isDefaultBrowser();\n+    });\n+\n+    XPCOMUtils.defineLazyGetter(environment, \"searchEngine\", () => {\n+      return Task.spawn(function* () {\n+        const init = yield new Promise(resolve => Services.search.init(resolve));\n+        if (Components.isSuccessCode(init)) {", "body_text": "Also: I think you just want to use Task.async for the getter itself.", "in_reply_to_id": 103207633, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/557", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/103207759", "created_at": "2017-02-27T13:45:59Z", "author_association": "CONTRIBUTOR", "body": "Also: I think you just want to use Task.async for the getter itself.", "updated_at": "2017-03-01T04:22:15Z", "html_url": "https://github.com/mozilla/normandy/pull/557#discussion_r103207759", "pull_request_review_id": 23986123, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/103207759"}, "html": {"href": "https://github.com/mozilla/normandy/pull/557#discussion_r103207759"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/557"}}, "commit_id": "24ca379ceb8b510786c0d6ffaa3af4e707f5d2a0", "user": {"following_url": "https://api.github.com/users/gijsk/following{/other_user}", "events_url": "https://api.github.com/users/gijsk/events{/privacy}", "organizations_url": "https://api.github.com/users/gijsk/orgs", "url": "https://api.github.com/users/gijsk", "gists_url": "https://api.github.com/users/gijsk/gists{/gist_id}", "html_url": "https://github.com/gijsk", "subscriptions_url": "https://api.github.com/users/gijsk/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/375983?v=4", "repos_url": "https://api.github.com/users/gijsk/repos", "received_events_url": "https://api.github.com/users/gijsk/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/gijsk/starred{/owner}{/repo}", "site_admin": false, "login": "gijsk", "type": "User", "id": 375983, "followers_url": "https://api.github.com/users/gijsk/followers"}, "position": null, "path": "recipe-client-addon/lib/ClientEnvironment.jsm", "body_html": "<p>Also: I think you just want to use Task.async for the getter itself.</p>", "original_commit_id": "fee4f7448623e9a4f928eb61dd9838c546713c5a", "id": 103207759}