{"original_position": 84, "diff_hunk": "@@ -0,0 +1,173 @@\n+/* This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n+\n+\"use strict\";\n+\n+const {classes: Cc, interfaces: Ci, utils: Cu} = Components;\n+Cu.import(\"resource:///modules/ShellService.jsm\");\n+Cu.import(\"resource://gre/modules/AddonManager.jsm\");\n+Cu.import(\"resource://gre/modules/Preferences.jsm\");\n+Cu.import(\"resource://gre/modules/Services.jsm\");\n+Cu.import(\"resource://gre/modules/Task.jsm\");\n+Cu.import(\"resource://gre/modules/TelemetryArchive.jsm\");\n+Cu.import(\"resource://gre/modules/XPCOMUtils.jsm\");\n+Cu.import(\"resource://shield-recipe-client/lib/NormandyApi.jsm\");\n+\n+const {generateUUID} = Cc[\"@mozilla.org/uuid-generator;1\"].getService(Ci.nsIUUIDGenerator);\n+\n+this.EXPORTED_SYMBOLS = [\"ClientEnvironment\"];\n+\n+const prefs = Services.prefs.getBranch(\"extensions.shield-recipe-client.\");\n+\n+// Cached API request for client attributes that are determined by the Normandy\n+// service.\n+let _classifyRequest = null;\n+const getClientClassification = Task.async(function *() {\n+  if (!_classifyRequest) {\n+    _classifyRequest = NormandyApi.classifyClient();\n+  }\n+  return yield _classifyRequest;\n+});\n+\n+this.ClientEnvironment = {\n+  /**\n+   * Test wrapper that mocks the server request for classifying the client.\n+   * @param  {Object}   data          Fake server data to use\n+   * @param  {Function} testGenerator Test generator to execute while mock data is in effect.\n+   */\n+  withMockClassify(data, testGenerator) {\n+    return function* inner() {\n+      const oldRequest = _classifyRequest;\n+      _classifyRequest = Promise.resolve(data);\n+      yield testGenerator();\n+      _classifyRequest = oldRequest;\n+    };\n+  },\n+\n+  /**\n+   * Create an object that provides general information about the client application.\n+   *\n+   * RecipeRunner.jsm uses this as part of the context for filter expressions,\n+   * so avoid adding non-getter functions as attributes, as filter expressions\n+   * cannot execute functions.\n+   *\n+   * Also note that, because filter expressions implicitly resolve promises, you\n+   * can add getter functions that return promises for async data.\n+   * @return {Object}\n+   */\n+  getEnvironment() {\n+    const environment = {};\n+\n+    XPCOMUtils.defineLazyGetter(environment, \"userId\", () => {\n+      let id = prefs.getCharPref(\"user_id\");\n+      if (id === \"\") {\n+        // generateUUID adds leading and trailing \"{\" and \"}\". strip them off.\n+        id = generateUUID().toString().slice(1, -1);\n+        prefs.setCharPref(\"user_id\", id);\n+      }\n+      return id;\n+    });\n+\n+    XPCOMUtils.defineLazyGetter(environment, \"country\", () => {\n+      return getClientClassification().then(classification => classification.country);\n+    });\n+\n+    XPCOMUtils.defineLazyGetter(environment, \"request_time\", () => {\n+      return getClientClassification().then(classification => classification.request_time);\n+    });\n+\n+    XPCOMUtils.defineLazyGetter(environment, \"distribution\", () => {\n+      return Preferences.get(\"distribution.id\", \"default\");\n+    });\n+\n+    XPCOMUtils.defineLazyGetter(environment, \"telemetry\", () => {", "body_text": "Yeah, the idea of recipes being triggered by a condition instead of simply detecting it upon execution is one that's been floating around.", "in_reply_to_id": 103208171, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/557", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/103326386", "created_at": "2017-02-27T22:14:16Z", "author_association": "MEMBER", "body": "Yeah, the idea of recipes being triggered by a condition instead of simply detecting it upon execution is one that's been floating around.", "updated_at": "2017-03-01T04:22:15Z", "html_url": "https://github.com/mozilla/normandy/pull/557#discussion_r103326386", "pull_request_review_id": 24109627, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/103326386"}, "html": {"href": "https://github.com/mozilla/normandy/pull/557#discussion_r103326386"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/557"}}, "commit_id": "24ca379ceb8b510786c0d6ffaa3af4e707f5d2a0", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "position": null, "path": "recipe-client-addon/lib/ClientEnvironment.jsm", "body_html": "<p>Yeah, the idea of recipes being triggered by a condition instead of simply detecting it upon execution is one that's been floating around.</p>", "original_commit_id": "fee4f7448623e9a4f928eb61dd9838c546713c5a", "id": 103326386}