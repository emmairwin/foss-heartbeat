{"original_position": 34, "diff_hunk": "@@ -21,11 +30,25 @@ export default class ShowHeartbeatAction extends Action {\n     } = this.recipe.arguments;\n \n     const lastShown = await this.getLastShownDate();\n+\n+    // get the last shown for heartbeats in general\n+    const lastHeartbeatShown = await this.getLastHeartbeatDate();\n+\n+    // we can show the heartbeat if there has not been one shown recently,\n+    const canShowHeartbeat = lastHeartbeatShown === null\n+    // or if the last one shown was more than HEARTBEAT_THROTTLE ms ago\n+      || Date.now() - lastHeartbeatShown >= HEARTBEAT_THROTTLE;", "body_text": "I think it is a little thing, and it doesn't matter too much. I'd put the comments all together above the entire expression though. Plus, it seems a little odd to pull out canShowHeartbeat into its own expression, instead of just having it be a subexpression of shouldShowSurvey.\nI think that the complexity of this logic is a sign that it could be better abstracted.\nMaybe it makes sense to move some more logic into the helper functions. Here I'm using Infinity as a trick to represent never, though maybe it would make sense to even move the comparisons into the helpers?\nif (!testing && (\n  await this.timeSinceLastHeartbeat() < HEARTBEAT_THROTTLE ||\n  await this.timeSinceLastSurvey() < LAST_SHOWN_DELAY\n)) {\n  return;\n}\n\n...\n\n/* Calculates the number of milliseconds since the last heartbeat from any recipe\n * was shown. If no heartbeat has ever been shown, returns Infinity, or \"forever ago\".\n */\nasync timeSinceLastHeartbeat() {\n  const lastShown = await this.heartbeatStorage.getItem('lastShown');\n  // If no heartbeat has ever been shown, lastShown will be falsey.\n  if (lastShown) {\n    return new Date() - lastShown;\n  } else {\n    return Infinity;\n  }\n}\n\n/* Calculates the number of milliseconds since the last survey from this recipe\n * was shown. If no survey has ever been shown, returns Infinity, or \"forever ago\".\n */\nasync timeSinceLastSurvey() {\n  const lastShown = await this.storage.getItem('lastShown');\n  // If no survey has been shown, lastShown will be falsey.\n  if (lastShown) {\n    return new Date() - lastShown;\n  } else {\n    return Infinity;\n  }\n}", "in_reply_to_id": 90171322, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/368", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/90175584", "created_at": "2016-11-30T06:30:40Z", "author_association": "MEMBER", "body": "I think it is a little thing, and it doesn't matter too much. I'd put the comments all together above the entire expression though. Plus, it seems a little odd to pull out `canShowHeartbeat` into its own expression, instead of just having it be a subexpression of `shouldShowSurvey`.\r\n\r\nI think that the complexity of this logic is a sign that it could be better abstracted.\r\n\r\nMaybe it makes sense to move some more logic into the helper functions. Here I'm using `Infinity` as a trick to represent never, though maybe it would make sense to even move the comparisons into the helpers?\r\n\r\n```js\r\nif (!testing && (\r\n  await this.timeSinceLastHeartbeat() < HEARTBEAT_THROTTLE ||\r\n  await this.timeSinceLastSurvey() < LAST_SHOWN_DELAY\r\n)) {\r\n  return;\r\n}\r\n\r\n...\r\n\r\n/* Calculates the number of milliseconds since the last heartbeat from any recipe\r\n * was shown. If no heartbeat has ever been shown, returns Infinity, or \"forever ago\".\r\n */\r\nasync timeSinceLastHeartbeat() {\r\n  const lastShown = await this.heartbeatStorage.getItem('lastShown');\r\n  // If no heartbeat has ever been shown, lastShown will be falsey.\r\n  if (lastShown) {\r\n    return new Date() - lastShown;\r\n  } else {\r\n    return Infinity;\r\n  }\r\n}\r\n\r\n/* Calculates the number of milliseconds since the last survey from this recipe\r\n * was shown. If no survey has ever been shown, returns Infinity, or \"forever ago\".\r\n */\r\nasync timeSinceLastSurvey() {\r\n  const lastShown = await this.storage.getItem('lastShown');\r\n  // If no survey has been shown, lastShown will be falsey.\r\n  if (lastShown) {\r\n    return new Date() - lastShown;\r\n  } else {\r\n    return Infinity;\r\n  }\r\n}\r\n```", "updated_at": "2016-11-30T20:55:13Z", "html_url": "https://github.com/mozilla/normandy/pull/368#discussion_r90175584", "pull_request_review_id": 10697566, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/90175584"}, "html": {"href": "https://github.com/mozilla/normandy/pull/368#discussion_r90175584"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/368"}}, "commit_id": "4dbbeacbc26c74a254b4a2056ced599602060d7f", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "position": null, "path": "client/actions/show-heartbeat/index.js", "body_html": "<p>I think it is a little thing, and it doesn't matter too much. I'd put the comments all together above the entire expression though. Plus, it seems a little odd to pull out <code>canShowHeartbeat</code> into its own expression, instead of just having it be a subexpression of <code>shouldShowSurvey</code>.</p>\n<p>I think that the complexity of this logic is a sign that it could be better abstracted.</p>\n<p>Maybe it makes sense to move some more logic into the helper functions. Here I'm using <code>Infinity</code> as a trick to represent never, though maybe it would make sense to even move the comparisons into the helpers?</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>testing <span class=\"pl-k\">&amp;&amp;</span> (\n  <span class=\"pl-k\">await</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">timeSinceLastHeartbeat</span>() <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">HEARTBEAT_THROTTLE</span> <span class=\"pl-k\">||</span>\n  <span class=\"pl-k\">await</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">timeSinceLastSurvey</span>() <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">LAST_SHOWN_DELAY</span>\n)) {\n  <span class=\"pl-k\">return</span>;\n}\n\n<span class=\"pl-k\">...</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> Calculates the number of milliseconds since the last heartbeat from any recipe</span>\n<span class=\"pl-c\"> * was shown. If no heartbeat has ever been shown, returns Infinity, or \"forever ago\".</span>\n<span class=\"pl-c\"> <span class=\"pl-c\">*/</span></span>\n<span class=\"pl-k\">async</span> <span class=\"pl-en\">timeSinceLastHeartbeat</span>() {\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">lastShown</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">heartbeatStorage</span>.<span class=\"pl-c1\">getItem</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>lastShown<span class=\"pl-pds\">'</span></span>);\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> If no heartbeat has ever been shown, lastShown will be falsey.</span>\n  <span class=\"pl-k\">if</span> (lastShown) {\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Date</span>() <span class=\"pl-k\">-</span> lastShown;\n  } <span class=\"pl-k\">else</span> {\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">Infinity</span>;\n  }\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> Calculates the number of milliseconds since the last survey from this recipe</span>\n<span class=\"pl-c\"> * was shown. If no survey has ever been shown, returns Infinity, or \"forever ago\".</span>\n<span class=\"pl-c\"> <span class=\"pl-c\">*/</span></span>\n<span class=\"pl-k\">async</span> <span class=\"pl-en\">timeSinceLastSurvey</span>() {\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">lastShown</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">storage</span>.<span class=\"pl-c1\">getItem</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>lastShown<span class=\"pl-pds\">'</span></span>);\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> If no survey has been shown, lastShown will be falsey.</span>\n  <span class=\"pl-k\">if</span> (lastShown) {\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Date</span>() <span class=\"pl-k\">-</span> lastShown;\n  } <span class=\"pl-k\">else</span> {\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">Infinity</span>;\n  }\n}</pre></div>", "original_commit_id": "cb6150ca8f744bef2c964ed1da6ada8fe8ff509e", "id": 90175584}