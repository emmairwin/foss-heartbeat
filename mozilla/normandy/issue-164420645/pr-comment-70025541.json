{"original_position": 74, "diff_hunk": "@@ -46,3 +54,68 @@ def deterministic_sample(rate, inputs):\n     assert len(input_hash) == 64\n \n     return input_hash < sample_point\n+\n+\n+class Autographer:\n+    \"\"\"\n+    Interacts with an Autograph service.\n+\n+    If Autograph signing is not configured using `settings.AUTOGRAPH`,\n+    raises `ImproperlyConfigured`. If the Autograph server can't be reached\n+    or returns an HTTP error, an error will be thrown by `requests`.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.check_config()\n+        self._session = None\n+\n+    @property\n+    def session(self):\n+        if self._session is None:\n+            self._session = requests.Session()\n+            self._session.auth = HawkAuth(\n+                id=str(settings.AUTOGRAPH_HAWK_ID),\n+                key=str(settings.AUTOGRAPH_HAWK_SECRET_KEY))\n+        return self._session\n+\n+    def check_config(self):\n+        required_keys = ['URL', 'HAWK_ID', 'HAWK_SECRET_KEY']\n+        for key in required_keys:\n+            if getattr(settings, 'AUTOGRAPH_' + key) is None:\n+                msg = 'set settings.AUTOGRAPH_{} to use action signatures'.format(key)\n+                raise ImproperlyConfigured(msg)\n+\n+    def sign_data(self, content_list):\n+        \"\"\"\n+        Fetches Signatures objects from Autograph for each item in `content_list`.\n+\n+        The items in `content_list` must be bytes objects.\n+        \"\"\"\n+        ts = timezone.now()\n+        url = '{}sign/data'.format(settings.AUTOGRAPH_URL)\n+        signing_request = []\n+        for item in content_list:\n+            # base64 works in bytes. requests work in UTF-8.\n+            # Convert to bytes, and then back.\n+            encoded_implementation = base64.b64encode(item).decode('utf8')\n+            signing_request.append({\n+                'template': 'content-signature',\n+                'input': encoded_implementation,\n+            })\n+\n+        res = self.session.post(url, json=signing_request)\n+        res.raise_for_status()\n+        signing_responses = res.json()\n+\n+        from normandy.recipes.models import Signature  # avoid circular import\n+        signatures = []\n+        for res in signing_responses:\n+            sig = Signature(", "body_text": "I saw that you originally had this returning the signed data and created signatures elsewhere, and then changed it to return saved signature objects. Having it return dicts or something would lower the coupling with the models, avoid the circular import, etc.", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/190", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/70025541", "created_at": "2016-07-08T05:02:31Z", "author_association": "MEMBER", "body": "I saw that you originally had this returning the signed data and created signatures elsewhere, and then changed it to return saved signature objects. Having it return dicts or something would lower the coupling with the models, avoid the circular import, etc.\n", "updated_at": "2016-07-14T23:48:16Z", "html_url": "https://github.com/mozilla/normandy/pull/190#discussion_r70025541", "pull_request_review_id": null, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/70025541"}, "html": {"href": "https://github.com/mozilla/normandy/pull/190#discussion_r70025541"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/190"}}, "commit_id": "7b115db15fb506011fb8d4c4a92d2d312f08e2c4", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "position": null, "path": "normandy/recipes/utils.py", "body_html": "<p>I saw that you originally had this returning the signed data and created signatures elsewhere, and then changed it to return saved signature objects. Having it return dicts or something would lower the coupling with the models, avoid the circular import, etc.</p>", "original_commit_id": "a7fd81ca423d44a363b1f1384a70de63044491f2", "id": 70025541}