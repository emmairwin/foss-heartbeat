{"body": "I think this looks fine. Nice work!\n\nThe only thing missing is the admin integration. Eventually we'll write our own frontend to this data that views it how we want, but for now using the provided admin integration will be good for shipping this now. \n\n> There were a couple of options listed for creating revisions with django-reversion. I went with the middleware but it did come with this warning. Do we care about that? I don't totally understand what it means.\n\nI don't think we care about that. The only risk I can think of is that if we're saving revisions in a separate transaction than saving the models themselves, it's possible for saving the revisions to fail without rolling back saving the models. I think that might actually be fine behavior; an error would still presumably be raised, but an error in revisions wouldn't block us from putting out changes. We'd just have some glitches in our audit trail until we fix the issue, which is fine IMO.\n\n> We can also add extra metadata to our revisions if we want. As is, it gives us all the serialized data for each revision of a recipe/action so I think we've got what we need, but let me know if there's anything else we might want to keep track of. \n\nI can't think of anything else we want to track right now. Eventually we might be able to leverage this for the approval system, but that might not be a great idea. Who knows!\n\n> Each row has its own revision_id field which could maybeee get confusing with the revision_id field that was added to recipes in Rehan's recent pull request for salt hashes? Thoughts?\n\nNah that's fine, I think.\n", "body_text": "I think this looks fine. Nice work!\nThe only thing missing is the admin integration. Eventually we'll write our own frontend to this data that views it how we want, but for now using the provided admin integration will be good for shipping this now.\n\nThere were a couple of options listed for creating revisions with django-reversion. I went with the middleware but it did come with this warning. Do we care about that? I don't totally understand what it means.\n\nI don't think we care about that. The only risk I can think of is that if we're saving revisions in a separate transaction than saving the models themselves, it's possible for saving the revisions to fail without rolling back saving the models. I think that might actually be fine behavior; an error would still presumably be raised, but an error in revisions wouldn't block us from putting out changes. We'd just have some glitches in our audit trail until we fix the issue, which is fine IMO.\n\nWe can also add extra metadata to our revisions if we want. As is, it gives us all the serialized data for each revision of a recipe/action so I think we've got what we need, but let me know if there's anything else we might want to keep track of.\n\nI can't think of anything else we want to track right now. Eventually we might be able to leverage this for the approval system, but that might not be a great idea. Who knows!\n\nEach row has its own revision_id field which could maybeee get confusing with the revision_id field that was added to recipes in Rehan's recent pull request for salt hashes? Thoughts?\n\nNah that's fine, I think.", "url": "https://api.github.com/repos/mozilla/normandy/issues/comments/199517040", "created_at": "2016-03-21T22:28:43Z", "author_association": "MEMBER", "html_url": "https://github.com/mozilla/normandy/pull/79#issuecomment-199517040", "updated_at": "2016-03-21T22:28:43Z", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "body_html": "<p>I think this looks fine. Nice work!</p>\n<p>The only thing missing is the admin integration. Eventually we'll write our own frontend to this data that views it how we want, but for now using the provided admin integration will be good for shipping this now.</p>\n<blockquote>\n<p>There were a couple of options listed for creating revisions with django-reversion. I went with the middleware but it did come with this warning. Do we care about that? I don't totally understand what it means.</p>\n</blockquote>\n<p>I don't think we care about that. The only risk I can think of is that if we're saving revisions in a separate transaction than saving the models themselves, it's possible for saving the revisions to fail without rolling back saving the models. I think that might actually be fine behavior; an error would still presumably be raised, but an error in revisions wouldn't block us from putting out changes. We'd just have some glitches in our audit trail until we fix the issue, which is fine IMO.</p>\n<blockquote>\n<p>We can also add extra metadata to our revisions if we want. As is, it gives us all the serialized data for each revision of a recipe/action so I think we've got what we need, but let me know if there's anything else we might want to keep track of.</p>\n</blockquote>\n<p>I can't think of anything else we want to track right now. Eventually we might be able to leverage this for the approval system, but that might not be a great idea. Who knows!</p>\n<blockquote>\n<p>Each row has its own revision_id field which could maybeee get confusing with the revision_id field that was added to recipes in Rehan's recent pull request for salt hashes? Thoughts?</p>\n</blockquote>\n<p>Nah that's fine, I think.</p>", "id": 199517040, "issue_url": "https://api.github.com/repos/mozilla/normandy/issues/79"}