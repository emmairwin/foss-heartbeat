{"original_position": 105, "diff_hunk": "@@ -28,6 +29,117 @@ def test_it_works(self, rf):\n             'is_approved': recipe.is_approved\n         }\n \n+    # If the action specified cannot be found, raise validation\n+    # error indicating the arguments schema could not be loaded\n+    def test_validation_with_wrong_action(self):\n+        serializer = RecipeSerializer(data={\n+            'action': 'action-that-doesnt-exist', 'arguments': {}\n+        })\n+\n+        with pytest.raises(serializers.ValidationError):\n+            serializer.is_valid(raise_exception=True)\n+\n+        assert serializer.errors['arguments'] == ['Could not find arguments schema.']\n+\n+    # If the action can be found, raise validation error\n+    # with the arguments error formatted appropriately\n+    def test_validation_with_wrong_arguments(self):\n+        ActionFactory(\n+            name='show-heartbeat',\n+            arguments_schema={\n+                \"required\": [\"surveyId\", \"surveys\"],\n+                \"properties\": {\n+                    \"surveyId\": {\"type\": \"string\"},\n+                    \"surveys\": {\n+                        \"type\": \"array\",\n+                        \"minItems\": 1,\n+                        \"items\": {\n+                            \"properties\": {\n+                                \"title\": {\"type\": \"string\"},\n+                                \"weight\": {\"type\": \"integer\", \"minimum\": 1}\n+                            },\n+                            \"required\": [\"title\", \"weight\"]\n+                        },\n+                    }\n+                }\n+            }\n+        )\n+\n+        serializer = RecipeSerializer(data={\n+            'action': 'show-heartbeat',\n+            'arguments': {\n+                'surveyId': '',\n+                'surveys': [\n+                    {'title': '', 'weight': 1},\n+                    {'title': 'bar', 'weight': 1},\n+                    {'title': 'foo', 'weight': 0},\n+                    {'title': 'baz', 'weight': 'lorem ipsum'}\n+                ]\n+            }\n+        })\n+\n+        with pytest.raises(serializers.ValidationError):\n+            serializer.is_valid(raise_exception=True)\n+\n+        assert serializer.errors['arguments'] == {\n+            'surveyId': 'This field may not be blank.',\n+            'surveys': {\n+                0: {'title': 'This field may not be blank.'},\n+                2: {'weight': '0 is less than the minimum of 1'},\n+                3: {'weight': '\\'lorem ipsum\\' is not of type \\'integer\\''}\n+            }\n+        }\n+\n+    def test_validation_with_valid_data(self):\n+        mockAction = ActionFactory(\n+            name='show-heartbeat',\n+            arguments_schema={\n+                \"required\": [\"surveyId\", \"surveys\"],\n+                \"properties\": {\n+                    \"surveyId\": {\"type\": \"string\"},\n+                    \"surveys\": {\n+                        \"type\": \"array\",\n+                        \"minItems\": 1,\n+                        \"items\": {\n+                            \"properties\": {\n+                                \"title\": {\"type\": \"string\"},\n+                                \"weight\": {\"type\": \"integer\", \"minimum\": 1}\n+                            },\n+                            \"required\": [\"title\", \"weight\"]\n+                        },\n+                    }\n+                }\n+            }\n+        )\n+\n+        serializer = RecipeSerializer(data={\n+            'name': 'bar', 'enabled': True, 'filter_expression': '[]',\n+            'action': 'show-heartbeat',\n+            'arguments': {\n+                'surveyId': 'lorem-ipsum-dolor',\n+                'surveys': [\n+                    {'title': 'adipscing', 'weight': 1},\n+                    {'title': 'consequetar', 'weight': 1}\n+                ]\n+            }\n+        })\n+\n+        serializer.is_valid()", "body_text": "should probably be:\nassert serializer.is_valid()", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/196", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/71342995", "created_at": "2016-07-19T13:56:19Z", "author_association": "MEMBER", "body": "should probably be:\n\n``` python\nassert serializer.is_valid()\n```\n", "updated_at": "2016-07-19T14:15:13Z", "html_url": "https://github.com/mozilla/normandy/pull/196#discussion_r71342995", "pull_request_review_id": null, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/71342995"}, "html": {"href": "https://github.com/mozilla/normandy/pull/196#discussion_r71342995"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/196"}}, "commit_id": "307546e51d66ab4f9a66874cf756a949629c932a", "user": {"following_url": "https://api.github.com/users/rehandalal/following{/other_user}", "events_url": "https://api.github.com/users/rehandalal/events{/privacy}", "organizations_url": "https://api.github.com/users/rehandalal/orgs", "url": "https://api.github.com/users/rehandalal", "gists_url": "https://api.github.com/users/rehandalal/gists{/gist_id}", "html_url": "https://github.com/rehandalal", "subscriptions_url": "https://api.github.com/users/rehandalal/subscriptions", "avatar_url": "https://avatars2.githubusercontent.com/u/987136?v=4", "repos_url": "https://api.github.com/users/rehandalal/repos", "received_events_url": "https://api.github.com/users/rehandalal/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/rehandalal/starred{/owner}{/repo}", "site_admin": false, "login": "rehandalal", "type": "User", "id": 987136, "followers_url": "https://api.github.com/users/rehandalal/followers"}, "position": null, "path": "normandy/recipes/tests/test_serializers.py", "body_html": "<p>should probably be:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">assert</span> serializer.is_valid()</pre></div>", "original_commit_id": "048e81a629b1a0e6e5d960583ab6b7713b499712", "id": 71342995}