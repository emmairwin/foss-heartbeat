{"body": "The simplest way I know of checking what's happening manually is to open the page as the selected tab and, with the browser console, check `gBrowser.selectedBrowser.contentPrincipal`. If that has `isSystemPrincipal` set to true, something's not working right. I think in principle, in this case, it should be a null principal. It looks like for this to happen for your page, you'll want to pass `Ci.nsIAboutModule.URI_SAFE_FOR_UNTRUSTED_CONTENT` as well as the ALLOW_SCRIPT flag.\r\n\r\nThis will stop you from running chrome-privileged script directly in the page. If you need to communicate with the page from a listener, you would do that from the content process script (shield-content-process.js). See e.g. this code for an example:\r\n\r\nhttps://dxr.mozilla.org/mozilla-central/source/browser/base/content/content.js#324\r\n\r\nThe TL;DR is that your content page can dispatch a `new CustomEvent(\"AboutStudiesLoaded\")` event on its window/document, and you can listen for this in the content process script. From there you can send a message to the parent process to get the list of studies. It can then send a message back using the `target` property of the message it received, so you wouldn't need to broadcast.\r\n\r\nWhen you receive a message back from the parent, you check that the content page is still about:studies (see the code linked above) and then you can either pass the data via another custom event, or manipulate the page DOM directly from your process script. If you go the custom event route (which might be easier if you use react here) then I expect you'll want to use `Cu.cloneInto` to make the plain JS objects readable for the page, much like we do for the SHIELD sandbox.\r\n\r\nDoes that make sense? :-)", "body_text": "The simplest way I know of checking what's happening manually is to open the page as the selected tab and, with the browser console, check gBrowser.selectedBrowser.contentPrincipal. If that has isSystemPrincipal set to true, something's not working right. I think in principle, in this case, it should be a null principal. It looks like for this to happen for your page, you'll want to pass Ci.nsIAboutModule.URI_SAFE_FOR_UNTRUSTED_CONTENT as well as the ALLOW_SCRIPT flag.\nThis will stop you from running chrome-privileged script directly in the page. If you need to communicate with the page from a listener, you would do that from the content process script (shield-content-process.js). See e.g. this code for an example:\nhttps://dxr.mozilla.org/mozilla-central/source/browser/base/content/content.js#324\nThe TL;DR is that your content page can dispatch a new CustomEvent(\"AboutStudiesLoaded\") event on its window/document, and you can listen for this in the content process script. From there you can send a message to the parent process to get the list of studies. It can then send a message back using the target property of the message it received, so you wouldn't need to broadcast.\nWhen you receive a message back from the parent, you check that the content page is still about:studies (see the code linked above) and then you can either pass the data via another custom event, or manipulate the page DOM directly from your process script. If you go the custom event route (which might be easier if you use react here) then I expect you'll want to use Cu.cloneInto to make the plain JS objects readable for the page, much like we do for the SHIELD sandbox.\nDoes that make sense? :-)", "url": "https://api.github.com/repos/mozilla/normandy/issues/comments/315721845", "created_at": "2017-07-17T10:43:51Z", "author_association": "CONTRIBUTOR", "html_url": "https://github.com/mozilla/normandy/issues/750#issuecomment-315721845", "updated_at": "2017-07-17T10:43:51Z", "user": {"following_url": "https://api.github.com/users/gijsk/following{/other_user}", "events_url": "https://api.github.com/users/gijsk/events{/privacy}", "organizations_url": "https://api.github.com/users/gijsk/orgs", "url": "https://api.github.com/users/gijsk", "gists_url": "https://api.github.com/users/gijsk/gists{/gist_id}", "html_url": "https://github.com/gijsk", "subscriptions_url": "https://api.github.com/users/gijsk/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/375983?v=4", "repos_url": "https://api.github.com/users/gijsk/repos", "received_events_url": "https://api.github.com/users/gijsk/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/gijsk/starred{/owner}{/repo}", "site_admin": false, "login": "gijsk", "type": "User", "id": 375983, "followers_url": "https://api.github.com/users/gijsk/followers"}, "body_html": "<p>The simplest way I know of checking what's happening manually is to open the page as the selected tab and, with the browser console, check <code>gBrowser.selectedBrowser.contentPrincipal</code>. If that has <code>isSystemPrincipal</code> set to true, something's not working right. I think in principle, in this case, it should be a null principal. It looks like for this to happen for your page, you'll want to pass <code>Ci.nsIAboutModule.URI_SAFE_FOR_UNTRUSTED_CONTENT</code> as well as the ALLOW_SCRIPT flag.</p>\n<p>This will stop you from running chrome-privileged script directly in the page. If you need to communicate with the page from a listener, you would do that from the content process script (shield-content-process.js). See e.g. this code for an example:</p>\n<p><a href=\"https://dxr.mozilla.org/mozilla-central/source/browser/base/content/content.js#324\" rel=\"nofollow\">https://dxr.mozilla.org/mozilla-central/source/browser/base/content/content.js#324</a></p>\n<p>The TL;DR is that your content page can dispatch a <code>new CustomEvent(\"AboutStudiesLoaded\")</code> event on its window/document, and you can listen for this in the content process script. From there you can send a message to the parent process to get the list of studies. It can then send a message back using the <code>target</code> property of the message it received, so you wouldn't need to broadcast.</p>\n<p>When you receive a message back from the parent, you check that the content page is still about:studies (see the code linked above) and then you can either pass the data via another custom event, or manipulate the page DOM directly from your process script. If you go the custom event route (which might be easier if you use react here) then I expect you'll want to use <code>Cu.cloneInto</code> to make the plain JS objects readable for the page, much like we do for the SHIELD sandbox.</p>\n<p>Does that make sense? :-)</p>", "id": 315721845, "issue_url": "https://api.github.com/repos/mozilla/normandy/issues/750"}