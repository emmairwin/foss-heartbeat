{"body_text": "If I modify an extension that is being used by a recipe, our current behavior is:\n\nThe extension UI accepts the upload and updates the extension entry.\nThe recipes using the extension retain their existing extension URLs, which causes the ExtensionSelect widget to display the URL of the old add-on. The recipe can then only be edited to point to another currently-uploaded extension, or left alone to retain the existing value (i.e. if the select is used to select another extension, it cannot be restored to the old value unless you do not save and refresh the page).\n\nI dunno what we want the behavior in this case to actually be, but it feels like the current behavior was not intentional, even if it is the behavior we want. I imagine at a minimum, we should add a warning/special case to ExtensionSelect to inform the user why the value it is set to is not editable without data loss. Other fixes could include making extensions immutable to avoid the problem completely, or blocking changes to extension XPIs if they are in use by any recipes.", "labels": [{"url": "https://api.github.com/repos/mozilla/normandy/labels/P3", "color": "ffa32c", "default": false, "id": 821572185, "name": "P3"}, {"url": "https://api.github.com/repos/mozilla/normandy/labels/new-feature", "color": "0e8a16", "default": false, "id": 821572171, "name": "new-feature"}], "number": 1092, "assignee": null, "repository_url": "https://api.github.com/repos/mozilla/normandy", "closed_at": null, "body_html": "<p>If I modify an extension that is being used by a recipe, our current behavior is:</p>\n<ul>\n<li>The extension UI accepts the upload and updates the extension entry.</li>\n<li>The recipes using the extension retain their existing extension URLs, which causes the ExtensionSelect widget to display the URL of the old add-on. The recipe can then only be edited to point to another currently-uploaded extension, or left alone to retain the existing value (i.e. if the select is used to select another extension, it cannot be restored to the old value unless you do not save and refresh the page).</li>\n</ul>\n<p>I dunno what we want the behavior in this case to <em>actually</em> be, but it feels like the current behavior was not intentional, even if it is the behavior we want. I imagine at a minimum, we should add a warning/special case to ExtensionSelect to inform the user why the value it is set to is not editable without data loss. Other fixes could include making extensions immutable to avoid the problem completely, or blocking changes to extension XPIs if they are in use by any recipes.</p>", "id": 262641090, "title": "Modifying an uploaded and in-use extension", "comments": 0, "state": "open", "body": "If I modify an extension that is being used by a recipe, our current behavior is:\r\n\r\n- The extension UI accepts the upload and updates the extension entry.\r\n- The recipes using the extension retain their existing extension URLs, which causes the ExtensionSelect widget to display the URL of the old add-on. The recipe can then only be edited to point to another currently-uploaded extension, or left alone to retain the existing value (i.e. if the select is used to select another extension, it cannot be restored to the old value unless you do not save and refresh the page).\r\n\r\nI dunno what we want the behavior in this case to _actually_ be, but it feels like the current behavior was not intentional, even if it is the behavior we want. I imagine at a minimum, we should add a warning/special case to ExtensionSelect to inform the user why the value it is set to is not editable without data loss. Other fixes could include making extensions immutable to avoid the problem completely, or blocking changes to extension XPIs if they are in use by any recipes.", "events_url": "https://api.github.com/repos/mozilla/normandy/issues/1092/events", "labels_url": "https://api.github.com/repos/mozilla/normandy/issues/1092/labels{/name}", "author_association": "MEMBER", "comments_url": "https://api.github.com/repos/mozilla/normandy/issues/1092/comments", "html_url": "https://github.com/mozilla/normandy/issues/1092", "updated_at": "2018-01-30T18:42:56Z", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "milestone": null, "locked": false, "url": "https://api.github.com/repos/mozilla/normandy/issues/1092", "created_at": "2017-10-04T01:36:13Z", "assignees": []}