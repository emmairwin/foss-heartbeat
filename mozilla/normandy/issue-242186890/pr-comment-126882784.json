{"original_position": 161, "diff_hunk": "@@ -0,0 +1,170 @@\n+/* This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n+\n+/**\n+ * @typedef {Object} Study\n+ * @property {string} name\n+ *   Unique name of the study\n+ * @property {string} version\n+ *   Study add-on version number\n+ * @property {string} description\n+ *   Description of the study and its intent.\n+ * @property {string} studyStartDate\n+ *   ISO-formatted date string of when the study was started.\n+ * @property {string} studyEndDate\n+ *   ISO-formatted date string of when the study was ended.\n+ * @property {string} addonId\n+ *   Add-on ID for this particular study.\n+ * @property {boolean} active\n+ *   Is the study still running?\n+ */\n+\n+\"use strict\";\n+\n+const {utils: Cu} = Components;\n+Cu.import(\"resource://gre/modules/XPCOMUtils.jsm\");\n+\n+XPCOMUtils.defineLazyModuleGetter(this, \"IndexedDB\", \"resource://gre/modules/IndexedDB.jsm\");\n+XPCOMUtils.defineLazyModuleGetter(this, \"ajv\", \"resource://shield-recipe-client/vendor/ajv.js\");\n+\n+this.EXPORTED_SYMBOLS = [\"StudyStorage\"];\n+\n+const DB_NAME = \"shield-studies\";\n+const DB_OPTIONS = {\n+  version: 1,\n+  storage: \"persistent\",\n+};\n+const DB_SCHEMA = {\n+  type: \"object\",\n+  additionalProperties: false,\n+  properties: {\n+    name: {\n+      type: \"string\",\n+    },\n+    addonId: {\n+      type: \"string\",\n+    },\n+    addonVersion: {\n+      type: \"string\",\n+    },\n+    description: {\n+      type: \"string\",\n+    },\n+    studyStartDate: {\n+      type: \"string\",\n+      format: \"date-time\",\n+    },\n+    studyEndDate: {\n+      type: [\"string\", \"null\"],\n+      format: \"date-time\",\n+      default: null,\n+    },\n+    active: {\n+      type: \"boolean\",\n+      default: true,\n+    },\n+  },\n+};\n+const CREATE_SCHEMA = Object.assign({}, DB_SCHEMA, {\n+  required: [\n+    \"name\",\n+    \"addonId\",\n+    \"addonVersion\",\n+    \"description\",\n+    \"studyStartDate\",\n+  ],\n+});\n+const UPDATE_SCHEMA = DB_SCHEMA;\n+\n+const ajvInstance = new ajv({\n+  allErrors: true,\n+  useDefaults: true,\n+});\n+const validateCreate = ajvInstance.compile(CREATE_SCHEMA);\n+const validateUpdate = ajvInstance.compile(UPDATE_SCHEMA);\n+\n+/**\n+ * Cache the database connection so that it is shared among multiple operations.\n+ */\n+let databasePromise;\n+async function getDatabase() {\n+  if (!databasePromise) {\n+    databasePromise = IndexedDB.open(DB_NAME, DB_OPTIONS, db => {\n+      db.createObjectStore(DB_NAME, {\n+        keyPath: \"name\",\n+      });\n+    });\n+  }\n+  return databasePromise;\n+}\n+\n+/**\n+ * Get a transaction for interacting with the study store.\n+ *\n+ * NOTE: Methods on the store returned by this function MUST be called\n+ * synchronously, otherwise the transaction with the store will expire.\n+ * This is why the helper takes a database as an argument; if we fetched the\n+ * database in the helper directly, the helper would be async and the\n+ * transaction would expire before methods on the store were called.\n+ */\n+function getStore(db) {\n+  return db.objectStore(DB_NAME, \"readwrite\");\n+}\n+\n+this.StudyStorage = {\n+  async clear() {\n+    const db = await getDatabase();\n+    await getStore(db).clear();\n+  },\n+\n+  async close() {\n+    if (databasePromise) {\n+      const db = await databasePromise;\n+      await db.close();\n+      databasePromise = null;\n+    }\n+  },\n+\n+  async has(studyName) {\n+    const db = await getDatabase();\n+    const study = await getStore(db).get(studyName);\n+    return !!study;\n+  },\n+\n+  async get(studyName) {\n+    const db = await getDatabase();\n+    const study = await getStore(db).get(studyName);\n+    if (!study) {\n+      throw new Error(`Could not find a study named ${studyName}.`);\n+    }\n+\n+    return study;\n+  },\n+\n+  async create(study) {\n+    if (!validateCreate(study)) {\n+      throw new Error(\n+        `Cannot create study: validation failed: ${ajvInstance.errorsText(validateCreate.errors)}`,\n+      );\n+    }\n+\n+    const db = await getDatabase();\n+    return getStore(db).add(study);\n+  },\n+\n+  async update(studyName, data) {\n+    const db = await getDatabase();\n+    const savedStudy = await getStore(db).get(studyName);\n+    if (!savedStudy) {\n+      throw new Error(`Cannot update study ${studyName}: could not find study.`);\n+    } else if (!validateUpdate(data)) {", "body_text": "Nit: no else after return/throw.", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/878", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/126882784", "created_at": "2017-07-12T07:35:02Z", "author_association": "CONTRIBUTOR", "body": "Nit: no else after return/throw.", "updated_at": "2017-07-20T00:52:33Z", "html_url": "https://github.com/mozilla/normandy/pull/878#discussion_r126882784", "pull_request_review_id": 49408864, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/126882784"}, "html": {"href": "https://github.com/mozilla/normandy/pull/878#discussion_r126882784"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/878"}}, "commit_id": "28d4c74432090bdd25acae4c902bd2c20f92c99c", "user": {"following_url": "https://api.github.com/users/gijsk/following{/other_user}", "events_url": "https://api.github.com/users/gijsk/events{/privacy}", "organizations_url": "https://api.github.com/users/gijsk/orgs", "url": "https://api.github.com/users/gijsk", "gists_url": "https://api.github.com/users/gijsk/gists{/gist_id}", "html_url": "https://github.com/gijsk", "subscriptions_url": "https://api.github.com/users/gijsk/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/375983?v=4", "repos_url": "https://api.github.com/users/gijsk/repos", "received_events_url": "https://api.github.com/users/gijsk/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/gijsk/starred{/owner}{/repo}", "site_admin": false, "login": "gijsk", "type": "User", "id": 375983, "followers_url": "https://api.github.com/users/gijsk/followers"}, "position": null, "path": "recipe-client-addon/lib/StudyStorage.jsm", "body_html": "<p>Nit: no else after return/throw.</p>", "original_commit_id": "d8d34743cf0509870a9e72573635e7ca5e44433f", "id": 126882784}