{"body": "> Finally, making sampling percentage first class: I think I would rather go the opposite direction with this, and provide better tools for manipulating and processing filters. This is longer term though, and may be unreasonable.\r\n\r\n+1 to this if we can afford waiting for it. For example, we've spitballed eventually storing filter expressions as objects instead of strings, that look something like:\r\n\r\n```json\r\n{\r\n  \"bucketSample\": {\"start\": 0, \"count\": 20, \"total\": 1000},\r\n  \"country\": {\"code\": \"us\"},\r\n  \"locale\": {\"code\": \"en-US\"},\r\n  \"jexl\": {\"expression\": \"!normandy.isFirstRun\"}\r\n}\r\n```\r\n\r\n(Don't get caught up in this specific syntax, it's just an example. Imagine each of the fields having a dedicated UI instead of all being in one big JEXL string.)\r\n\r\nSomething like that allows us to build better editors for filter expressions and retain the flexibility of JEXL, while also being much more consumable by tooling.", "body_text": "Finally, making sampling percentage first class: I think I would rather go the opposite direction with this, and provide better tools for manipulating and processing filters. This is longer term though, and may be unreasonable.\n\n+1 to this if we can afford waiting for it. For example, we've spitballed eventually storing filter expressions as objects instead of strings, that look something like:\n{\n  \"bucketSample\": {\"start\": 0, \"count\": 20, \"total\": 1000},\n  \"country\": {\"code\": \"us\"},\n  \"locale\": {\"code\": \"en-US\"},\n  \"jexl\": {\"expression\": \"!normandy.isFirstRun\"}\n}\n(Don't get caught up in this specific syntax, it's just an example. Imagine each of the fields having a dedicated UI instead of all being in one big JEXL string.)\nSomething like that allows us to build better editors for filter expressions and retain the flexibility of JEXL, while also being much more consumable by tooling.", "url": "https://api.github.com/repos/mozilla/normandy/issues/comments/319826225", "created_at": "2017-08-02T23:28:03Z", "author_association": "MEMBER", "html_url": "https://github.com/mozilla/normandy/issues/950#issuecomment-319826225", "updated_at": "2017-08-02T23:28:31Z", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "body_html": "<blockquote>\n<p>Finally, making sampling percentage first class: I think I would rather go the opposite direction with this, and provide better tools for manipulating and processing filters. This is longer term though, and may be unreasonable.</p>\n</blockquote>\n<p>+1 to this if we can afford waiting for it. For example, we've spitballed eventually storing filter expressions as objects instead of strings, that look something like:</p>\n<div class=\"highlight highlight-source-json\"><pre>{\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bucketSample<span class=\"pl-pds\">\"</span></span>: {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>start<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">0</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>count<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">20</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>total<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">1000</span>},\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>country<span class=\"pl-pds\">\"</span></span>: {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>code<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>us<span class=\"pl-pds\">\"</span></span>},\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>locale<span class=\"pl-pds\">\"</span></span>: {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>code<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>en-US<span class=\"pl-pds\">\"</span></span>},\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>jexl<span class=\"pl-pds\">\"</span></span>: {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>expression<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>!normandy.isFirstRun<span class=\"pl-pds\">\"</span></span>}\n}</pre></div>\n<p>(Don't get caught up in this specific syntax, it's just an example. Imagine each of the fields having a dedicated UI instead of all being in one big JEXL string.)</p>\n<p>Something like that allows us to build better editors for filter expressions and retain the flexibility of JEXL, while also being much more consumable by tooling.</p>", "id": 319826225, "issue_url": "https://api.github.com/repos/mozilla/normandy/issues/950"}