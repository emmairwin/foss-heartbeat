{"original_position": 114, "diff_hunk": "@@ -0,0 +1,208 @@\n+/* This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n+\"use strict\";\n+\n+const { interfaces: Ci, results: Cr, manager: Cm, utils: Cu } = Components;\n+Cu.import(\"resource://gre/modules/Services.jsm\");\n+Cu.import(\"resource://gre/modules/XPCOMUtils.jsm\");\n+\n+XPCOMUtils.defineLazyModuleGetter(\n+  this, \"CleanupManager\", \"resource://shield-recipe-client/lib/CleanupManager.jsm\",\n+);\n+XPCOMUtils.defineLazyModuleGetter(\n+  this, \"StudyStorage\", \"resource://shield-recipe-client/lib/StudyStorage.jsm\",\n+);\n+\n+this.EXPORTED_SYMBOLS = [\"AboutPages\"];\n+\n+const SHIELD_LEARN_MORE_URL_PREF = \"extensions.shield-recipe-client.shieldLearnMoreUrl\";\n+\n+// Due to bug 1051238 frame scripts are cached forever, so we can't update them\n+// as a restartless add-on. The Math.random() is the work around for this.\n+const PROCESS_SCRIPT = (\n+  `resource://shield-recipe-client/content/shield-content-process.js?${Math.random()}`\n+);\n+const FRAME_SCRIPT = (\n+  `resource://shield-recipe-client/content/shield-content-frame.js?${Math.random()}`\n+);\n+\n+/**\n+ * Class for managing an about: page that Shield provides. Adapted from\n+ * browser/extensions/pocket/content/AboutPocket.jsm.\n+ *\n+ * @implements nsIFactory\n+ * @implements nsIAboutModule\n+ */\n+class AboutPage {\n+  constructor({chromeUrl, aboutHost, classId, description, uriFlags}) {\n+    this.chromeUrl = chromeUrl;\n+    this.aboutHost = aboutHost;\n+    this.classId = Components.ID(classId);\n+    this.description = description;\n+    this.uriFlags = uriFlags;\n+  }\n+\n+  getURIFlags() {\n+    return this.uriFlags;\n+  }\n+\n+  newChannel(uri, loadInfo) {\n+    const newURI = Services.io.newURI(this.chromeUrl);\n+    const channel = Services.io.newChannelFromURIWithLoadInfo(newURI, loadInfo);\n+    channel.originalURI = uri;\n+\n+    if (this.uriFlags & Ci.nsIAboutModule.URI_SAFE_FOR_UNTRUSTED_CONTENT) {\n+      const principal = Services.scriptSecurityManager.createCodebasePrincipal(uri, {});\n+      channel.owner = principal;\n+    }\n+    return channel;\n+  }\n+\n+  createInstance(outer, iid) {\n+    if (outer !== null) {\n+      throw Cr.NS_ERROR_NO_AGGREGATION;\n+    }\n+    return this.QueryInterface(iid);\n+  }\n+\n+  /**\n+   * Register this about: page with XPCOM. This must be called once in each\n+   * process (parent and content) to correctly initialize the page.\n+   */\n+  register() {\n+    Cm.QueryInterface(Ci.nsIComponentRegistrar).registerFactory(\n+      this.classId,\n+      this.description,\n+      `@mozilla.org/network/protocol/about;1?what=${this.aboutHost}`,\n+      this,\n+    );\n+  }\n+\n+  /**\n+   * Unregister this about: page with XPCOM. This must be called before the\n+   * add-on is cleaned up if the page has been registered.\n+   */\n+  unregister() {\n+    Cm.QueryInterface(Ci.nsIComponentRegistrar).unregisterFactory(this.classId, this);\n+  }\n+}\n+AboutPage.prototype.QueryInterface = XPCOMUtils.generateQI([Ci.nsIAboutModule]);\n+\n+/**\n+ * The module exported by this file.\n+ */\n+this.AboutPages = {\n+  async init() {\n+    // Load scripts in content processes and tabs\n+    Services.ppmm.loadProcessScript(PROCESS_SCRIPT, true);\n+    Services.mm.loadFrameScript(FRAME_SCRIPT, true);\n+\n+    // Register about: pages and their listeners\n+    this.aboutStudies.register();\n+    this.aboutStudies.registerParentListeners();\n+\n+    CleanupManager.addCleanupHandler(() => {\n+      // Stop loading processs scripts and notify existing scripts to clean up.\n+      Services.ppmm.removeDelayedProcessScript(PROCESS_SCRIPT);\n+      Services.ppmm.broadcastAsyncMessage(\"Shield:ShuttingDown\");\n+      Services.mm.removeDelayedFrameScript(FRAME_SCRIPT);\n+      Services.mm.broadcastAsyncMessage(\"Shield:ShuttingDown\");\n+\n+      // Clean up about pages\n+      this.aboutStudies.unregisterParentListeners();\n+      this.aboutStudies.unregister();", "body_text": "Well, we could just avoid the cleanupmanager calls on shutdown, unless that leaks the world? Could be follow-up fodder if it does.", "in_reply_to_id": 128838350, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/902", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/128859750", "created_at": "2017-07-21T20:56:56Z", "author_association": "CONTRIBUTOR", "body": "Well, we could just avoid the cleanupmanager calls on shutdown, unless that leaks the world? Could be follow-up fodder if it does.", "updated_at": "2017-07-27T19:03:51Z", "html_url": "https://github.com/mozilla/normandy/pull/902#discussion_r128859750", "pull_request_review_id": 51583969, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/128859750"}, "html": {"href": "https://github.com/mozilla/normandy/pull/902#discussion_r128859750"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/902"}}, "commit_id": "237c17d02485073a007bad37482bf9ce3a8123e7", "user": {"following_url": "https://api.github.com/users/gijsk/following{/other_user}", "events_url": "https://api.github.com/users/gijsk/events{/privacy}", "organizations_url": "https://api.github.com/users/gijsk/orgs", "url": "https://api.github.com/users/gijsk", "gists_url": "https://api.github.com/users/gijsk/gists{/gist_id}", "html_url": "https://github.com/gijsk", "subscriptions_url": "https://api.github.com/users/gijsk/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/375983?v=4", "repos_url": "https://api.github.com/users/gijsk/repos", "received_events_url": "https://api.github.com/users/gijsk/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/gijsk/starred{/owner}{/repo}", "site_admin": false, "login": "gijsk", "type": "User", "id": 375983, "followers_url": "https://api.github.com/users/gijsk/followers"}, "position": 114, "path": "recipe-client-addon/content/AboutPages.jsm", "body_html": "<p>Well, we could just avoid the cleanupmanager calls on shutdown, unless that leaks the world? Could be follow-up fodder if it does.</p>", "original_commit_id": "0443495dd2f06517a842d6707bfeca9b75e3026e", "id": 128859750}