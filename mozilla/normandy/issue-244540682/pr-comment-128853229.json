{"original_position": 114, "diff_hunk": "@@ -0,0 +1,208 @@\n+/* This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n+\"use strict\";\n+\n+const { interfaces: Ci, results: Cr, manager: Cm, utils: Cu } = Components;\n+Cu.import(\"resource://gre/modules/Services.jsm\");\n+Cu.import(\"resource://gre/modules/XPCOMUtils.jsm\");\n+\n+XPCOMUtils.defineLazyModuleGetter(\n+  this, \"CleanupManager\", \"resource://shield-recipe-client/lib/CleanupManager.jsm\",\n+);\n+XPCOMUtils.defineLazyModuleGetter(\n+  this, \"StudyStorage\", \"resource://shield-recipe-client/lib/StudyStorage.jsm\",\n+);\n+\n+this.EXPORTED_SYMBOLS = [\"AboutPages\"];\n+\n+const SHIELD_LEARN_MORE_URL_PREF = \"extensions.shield-recipe-client.shieldLearnMoreUrl\";\n+\n+// Due to bug 1051238 frame scripts are cached forever, so we can't update them\n+// as a restartless add-on. The Math.random() is the work around for this.\n+const PROCESS_SCRIPT = (\n+  `resource://shield-recipe-client/content/shield-content-process.js?${Math.random()}`\n+);\n+const FRAME_SCRIPT = (\n+  `resource://shield-recipe-client/content/shield-content-frame.js?${Math.random()}`\n+);\n+\n+/**\n+ * Class for managing an about: page that Shield provides. Adapted from\n+ * browser/extensions/pocket/content/AboutPocket.jsm.\n+ *\n+ * @implements nsIFactory\n+ * @implements nsIAboutModule\n+ */\n+class AboutPage {\n+  constructor({chromeUrl, aboutHost, classId, description, uriFlags}) {\n+    this.chromeUrl = chromeUrl;\n+    this.aboutHost = aboutHost;\n+    this.classId = Components.ID(classId);\n+    this.description = description;\n+    this.uriFlags = uriFlags;\n+  }\n+\n+  getURIFlags() {\n+    return this.uriFlags;\n+  }\n+\n+  newChannel(uri, loadInfo) {\n+    const newURI = Services.io.newURI(this.chromeUrl);\n+    const channel = Services.io.newChannelFromURIWithLoadInfo(newURI, loadInfo);\n+    channel.originalURI = uri;\n+\n+    if (this.uriFlags & Ci.nsIAboutModule.URI_SAFE_FOR_UNTRUSTED_CONTENT) {\n+      const principal = Services.scriptSecurityManager.createCodebasePrincipal(uri, {});\n+      channel.owner = principal;\n+    }\n+    return channel;\n+  }\n+\n+  createInstance(outer, iid) {\n+    if (outer !== null) {\n+      throw Cr.NS_ERROR_NO_AGGREGATION;\n+    }\n+    return this.QueryInterface(iid);\n+  }\n+\n+  /**\n+   * Register this about: page with XPCOM. This must be called once in each\n+   * process (parent and content) to correctly initialize the page.\n+   */\n+  register() {\n+    Cm.QueryInterface(Ci.nsIComponentRegistrar).registerFactory(\n+      this.classId,\n+      this.description,\n+      `@mozilla.org/network/protocol/about;1?what=${this.aboutHost}`,\n+      this,\n+    );\n+  }\n+\n+  /**\n+   * Unregister this about: page with XPCOM. This must be called before the\n+   * add-on is cleaned up if the page has been registered.\n+   */\n+  unregister() {\n+    Cm.QueryInterface(Ci.nsIComponentRegistrar).unregisterFactory(this.classId, this);\n+  }\n+}\n+AboutPage.prototype.QueryInterface = XPCOMUtils.generateQI([Ci.nsIAboutModule]);\n+\n+/**\n+ * The module exported by this file.\n+ */\n+this.AboutPages = {\n+  async init() {\n+    // Load scripts in content processes and tabs\n+    Services.ppmm.loadProcessScript(PROCESS_SCRIPT, true);\n+    Services.mm.loadFrameScript(FRAME_SCRIPT, true);\n+\n+    // Register about: pages and their listeners\n+    this.aboutStudies.register();\n+    this.aboutStudies.registerParentListeners();\n+\n+    CleanupManager.addCleanupHandler(() => {\n+      // Stop loading processs scripts and notify existing scripts to clean up.\n+      Services.ppmm.removeDelayedProcessScript(PROCESS_SCRIPT);\n+      Services.ppmm.broadcastAsyncMessage(\"Shield:ShuttingDown\");\n+      Services.mm.removeDelayedFrameScript(FRAME_SCRIPT);\n+      Services.mm.broadcastAsyncMessage(\"Shield:ShuttingDown\");\n+\n+      // Clean up about pages\n+      this.aboutStudies.unregisterParentListeners();\n+      this.aboutStudies.unregister();", "body_text": "This cleanup handler is only called in the parent process, so unregister only gets called once per-process (the process script handles unregistering in the content processes). I was having trouble tracking what was running where, so I made the process script only perform any work if it's run in the content process, and parent-only logic happens in this method.\nMaybe a comment here explaining that this is the split point for stuff that happens in the content process vs the parent?\n\nAh, hm, and we can probably avoid doing this on actual app shutdown, but I don't know if that's complicated. Might help with the errors you were seeing if they're at shutdown rather than earlier (or just wallpaper them... checking would be a good idea).\n\nIs this expensive enough to be worth avoiding during shutdown? I was trying to avoid adding more conditional logic given how confusing the parent/content split already is.", "in_reply_to_id": 128838350, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/902", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/128853229", "created_at": "2017-07-21T20:21:58Z", "author_association": "MEMBER", "body": "This cleanup handler is only called in the parent process, so `unregister` only gets called once per-process (the process script handles unregistering in the content processes). I was having trouble tracking what was running where, so I made the process script only perform any work if it's run in the content process, and parent-only logic happens in this method.\r\n\r\nMaybe a comment here explaining that this is the split point for stuff that happens in the content process vs the parent?\r\n\r\n> Ah, hm, and we can probably avoid doing this on actual app shutdown, but I don't know if that's complicated. Might help with the errors you were seeing if they're at shutdown rather than earlier (or just wallpaper them... checking would be a good idea).\r\n\r\nIs this expensive enough to be worth avoiding during shutdown? I was trying to avoid adding more conditional logic given how confusing the parent/content split already is.", "updated_at": "2017-07-27T19:03:51Z", "html_url": "https://github.com/mozilla/normandy/pull/902#discussion_r128853229", "pull_request_review_id": 51576543, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/128853229"}, "html": {"href": "https://github.com/mozilla/normandy/pull/902#discussion_r128853229"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/902"}}, "commit_id": "237c17d02485073a007bad37482bf9ce3a8123e7", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "position": 114, "path": "recipe-client-addon/content/AboutPages.jsm", "body_html": "<p>This cleanup handler is only called in the parent process, so <code>unregister</code> only gets called once per-process (the process script handles unregistering in the content processes). I was having trouble tracking what was running where, so I made the process script only perform any work if it's run in the content process, and parent-only logic happens in this method.</p>\n<p>Maybe a comment here explaining that this is the split point for stuff that happens in the content process vs the parent?</p>\n<blockquote>\n<p>Ah, hm, and we can probably avoid doing this on actual app shutdown, but I don't know if that's complicated. Might help with the errors you were seeing if they're at shutdown rather than earlier (or just wallpaper them... checking would be a good idea).</p>\n</blockquote>\n<p>Is this expensive enough to be worth avoiding during shutdown? I was trying to avoid adding more conditional logic given how confusing the parent/content split already is.</p>", "original_commit_id": "0443495dd2f06517a842d6707bfeca9b75e3026e", "id": 128853229}