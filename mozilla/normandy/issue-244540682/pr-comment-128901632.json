{"original_position": 117, "diff_hunk": "@@ -0,0 +1,130 @@\n+/* This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n+\"use strict\";\n+\n+/**\n+ * Listen for DOM events bubbling up from the about:studies page, and perform\n+ * privileged actions in response to them. If we need to do anything that the\n+ * content process can't handle (such as reading IndexedDB), we send a message\n+ * to the parent process and handle it there.\n+ *\n+ * This file is loaded as a frame script. It will be loaded once per tab that\n+ * is opened.\n+ */\n+\n+/* global content addMessageListener removeMessageListener sendAsyncMessage */\n+\n+const { utils: Cu } = Components;\n+Cu.import(\"resource://gre/modules/Services.jsm\");\n+Cu.import(\"resource://gre/modules/XPCOMUtils.jsm\");\n+\n+const frameGlobal = {};\n+XPCOMUtils.defineLazyModuleGetter(\n+  frameGlobal, \"AboutPages\", \"resource://shield-recipe-client-content/AboutPages.jsm\",\n+);\n+\n+const USE_OLD_PREF_ORGANIZATION_PREF = \"browser.preferences.useOldOrganization\";\n+\n+/**\n+ * Handles incoming events from the parent process and about:studies.\n+ * @implements nsIMessageListener\n+ * @implements EventListener\n+ */\n+class ShieldFrameListener {\n+  handleEvent(event) {\n+    // Abort if the current page isn't about:studies.\n+    if (!this.ensureTrustedOrigin()) {\n+      return;\n+    }\n+\n+    // We waited until after we received an event to register message listeners\n+    // in order to save resources for tabs that don't ever load about:studies.\n+    addMessageListener(\"Shield:ShuttingDown\", this);\n+    addMessageListener(\"Shield:ReceiveStudyList\", this);\n+\n+    switch (event.detail.action) {\n+      // Actions that require the parent process\n+      case \"GetRemoteValue:StudyList\":\n+        sendAsyncMessage(\"Shield:GetStudyList\");\n+        break;\n+      case \"RemoveStudy\":\n+        sendAsyncMessage(\"Shield:RemoveStudy\", event.detail.data);\n+        break;\n+      // Actions that can be performed in the content process\n+      case \"GetRemoteValue:ShieldLearnMoreHref\":\n+        this.triggerPageCallback(\n+          \"ReceiveRemoteValue:ShieldLearnMoreHref\",\n+          frameGlobal.AboutPages.aboutStudies.getShieldLearnMoreHref()\n+        );\n+        break;\n+      case \"NavigateToDataPreferences\":\n+        this.navigateToDataPreferences();\n+        break;\n+    }\n+  }\n+\n+  /**\n+   * Check that the current webpage's origin is about:studies.\n+   * @return {Boolean}\n+   */\n+  ensureTrustedOrigin() {\n+    return content.document.documentURI.startsWith(\"about:studies\");\n+  }\n+\n+  /**\n+   * Handle messages from the parent process.\n+   * @param {Object} message\n+   *   See the nsIMessageListener docs.\n+   */\n+  receiveMessage(message) {\n+    switch (message.name) {\n+      case \"Shield:ReceiveStudyList\":\n+        this.triggerPageCallback(\"ReceiveRemoteValue:StudyList\", message.data.studies);\n+        break;\n+      case \"Shield:ShuttingDown\":\n+        this.onShutdown();\n+        break;\n+    }\n+  }\n+\n+  /**\n+   * Trigger an event to communicate with the unprivileged about: page.\n+   * @param {String} type\n+   * @param {Object} detail\n+   */\n+  triggerPageCallback(type, detail) {\n+    // Do not communicate with untrusted pages.\n+    if (!this.ensureTrustedOrigin()) {\n+      return;\n+    }\n+\n+    // Clone details and use the event class from the unprivileged context.\n+    const event = new content.document.defaultView.CustomEvent(type, {\n+      bubbles: true,\n+      detail: Cu.cloneInto(detail, content.document.defaultView),\n+    });\n+    content.document.dispatchEvent(event);\n+  }\n+\n+  onShutdown() {\n+    removeMessageListener(\"Shield:SendStudyList\", this);\n+    removeMessageListener(\"Shield:ShuttingDown\", this);\n+    removeEventListener(\"Shield\", this);\n+  }\n+\n+  navigateToDataPreferences() {\n+    if (Services.prefs.getBoolPref(USE_OLD_PREF_ORGANIZATION_PREF)) {", "body_text": "I don't think we will.", "in_reply_to_id": 128895800, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/902", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/128901632", "created_at": "2017-07-22T17:51:51Z", "author_association": "MEMBER", "body": "I don't think we will.", "updated_at": "2017-07-27T19:03:51Z", "html_url": "https://github.com/mozilla/normandy/pull/902#discussion_r128901632", "pull_request_review_id": 51627440, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/128901632"}, "html": {"href": "https://github.com/mozilla/normandy/pull/902#discussion_r128901632"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/902"}}, "commit_id": "237c17d02485073a007bad37482bf9ce3a8123e7", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "position": 117, "path": "recipe-client-addon/content/shield-content-frame.js", "body_html": "<p>I don't think we will.</p>", "original_commit_id": "f422101eb239a32ecc59c4505bf69f92d634711a", "id": 128901632}