{"body": "> For example,. consider if a recipe is created, then the first revision is approved and enabled, and then the revision is disabled. The only revision in history will have enabled=false, even though it was enabled for a while. That won't give analysts the datas try need, since they need to know for what time range was the recipe/each revision enabled.\r\n\r\nThe way this is set up you would never have more than one enabled entry and more than one disabled entry per revision. Once it's been disabled it clears the `approved_revision` field meaning to re-enable you would need to create a new revision and then go through the enable dance again. I imagined in the serializer for revisions I would return the entire enable state history with the revision. So someone looking at this data should have the entire history.\r\n\r\nThat being said since it's only ever a maximum of two entries I'm now starting to think maybe I should have two one-to-one fields on the revision for `enabled_state` and `disabled_state` and that might be better for performance too.", "body_text": "For example,. consider if a recipe is created, then the first revision is approved and enabled, and then the revision is disabled. The only revision in history will have enabled=false, even though it was enabled for a while. That won't give analysts the datas try need, since they need to know for what time range was the recipe/each revision enabled.\n\nThe way this is set up you would never have more than one enabled entry and more than one disabled entry per revision. Once it's been disabled it clears the approved_revision field meaning to re-enable you would need to create a new revision and then go through the enable dance again. I imagined in the serializer for revisions I would return the entire enable state history with the revision. So someone looking at this data should have the entire history.\nThat being said since it's only ever a maximum of two entries I'm now starting to think maybe I should have two one-to-one fields on the revision for enabled_state and disabled_state and that might be better for performance too.", "url": "https://api.github.com/repos/mozilla/normandy/issues/comments/370634484", "created_at": "2018-03-06T02:00:20Z", "author_association": "MEMBER", "html_url": "https://github.com/mozilla/normandy/pull/1203#issuecomment-370634484", "updated_at": "2018-03-06T02:00:20Z", "user": {"following_url": "https://api.github.com/users/rehandalal/following{/other_user}", "events_url": "https://api.github.com/users/rehandalal/events{/privacy}", "organizations_url": "https://api.github.com/users/rehandalal/orgs", "url": "https://api.github.com/users/rehandalal", "gists_url": "https://api.github.com/users/rehandalal/gists{/gist_id}", "html_url": "https://github.com/rehandalal", "subscriptions_url": "https://api.github.com/users/rehandalal/subscriptions", "avatar_url": "https://avatars2.githubusercontent.com/u/987136?v=4", "repos_url": "https://api.github.com/users/rehandalal/repos", "received_events_url": "https://api.github.com/users/rehandalal/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/rehandalal/starred{/owner}{/repo}", "site_admin": false, "login": "rehandalal", "type": "User", "id": 987136, "followers_url": "https://api.github.com/users/rehandalal/followers"}, "body_html": "<blockquote>\n<p>For example,. consider if a recipe is created, then the first revision is approved and enabled, and then the revision is disabled. The only revision in history will have enabled=false, even though it was enabled for a while. That won't give analysts the datas try need, since they need to know for what time range was the recipe/each revision enabled.</p>\n</blockquote>\n<p>The way this is set up you would never have more than one enabled entry and more than one disabled entry per revision. Once it's been disabled it clears the <code>approved_revision</code> field meaning to re-enable you would need to create a new revision and then go through the enable dance again. I imagined in the serializer for revisions I would return the entire enable state history with the revision. So someone looking at this data should have the entire history.</p>\n<p>That being said since it's only ever a maximum of two entries I'm now starting to think maybe I should have two one-to-one fields on the revision for <code>enabled_state</code> and <code>disabled_state</code> and that might be better for performance too.</p>", "id": 370634484, "issue_url": "https://api.github.com/repos/mozilla/normandy/issues/1203"}