{"body": "This isn't really what I had expected. This creates an interesting parallel history for a recipe, sort of? I don't think there is anything wrong with it, and it has the nice property of not creating extra revisions when you enabled/disable something, which has its advantages. It also nicely side-steps the problem of the interaction between enabled and approved.\r\n\r\n(Though maybe we **should** change so that approval (and thus another user) is required for enable/disable. That's a bigger change though)\r\n\r\nI worry a bit about the performance of this. Since `EnabledState` is a 1-to-many, it means making a lot of DB calls when getting the history of a revision, right? This doesn't trip any of our \"reasonable number of DB calls\" tests currently, but that's because none of our hot-path views use history revisions. It might be worth writing a test like that for the revision listing page too. Or at least test it with something like django-debug-toolbar.\r\n\r\nI think you'll also need to trigger a re-signing when you enable a recipe, since `enabled` is [a part of the signed blob](https://normandy.cdn.mozilla.net/api/v1/recipe/signed/). Or maybe that happens automatically somewhere else.", "body_text": "This isn't really what I had expected. This creates an interesting parallel history for a recipe, sort of? I don't think there is anything wrong with it, and it has the nice property of not creating extra revisions when you enabled/disable something, which has its advantages. It also nicely side-steps the problem of the interaction between enabled and approved.\n(Though maybe we should change so that approval (and thus another user) is required for enable/disable. That's a bigger change though)\nI worry a bit about the performance of this. Since EnabledState is a 1-to-many, it means making a lot of DB calls when getting the history of a revision, right? This doesn't trip any of our \"reasonable number of DB calls\" tests currently, but that's because none of our hot-path views use history revisions. It might be worth writing a test like that for the revision listing page too. Or at least test it with something like django-debug-toolbar.\nI think you'll also need to trigger a re-signing when you enable a recipe, since enabled is a part of the signed blob. Or maybe that happens automatically somewhere else.", "url": "https://api.github.com/repos/mozilla/normandy/issues/comments/370622775", "created_at": "2018-03-06T00:58:44Z", "author_association": "MEMBER", "html_url": "https://github.com/mozilla/normandy/pull/1203#issuecomment-370622775", "updated_at": "2018-03-06T00:58:44Z", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "body_html": "<p>This isn't really what I had expected. This creates an interesting parallel history for a recipe, sort of? I don't think there is anything wrong with it, and it has the nice property of not creating extra revisions when you enabled/disable something, which has its advantages. It also nicely side-steps the problem of the interaction between enabled and approved.</p>\n<p>(Though maybe we <strong>should</strong> change so that approval (and thus another user) is required for enable/disable. That's a bigger change though)</p>\n<p>I worry a bit about the performance of this. Since <code>EnabledState</code> is a 1-to-many, it means making a lot of DB calls when getting the history of a revision, right? This doesn't trip any of our \"reasonable number of DB calls\" tests currently, but that's because none of our hot-path views use history revisions. It might be worth writing a test like that for the revision listing page too. Or at least test it with something like django-debug-toolbar.</p>\n<p>I think you'll also need to trigger a re-signing when you enable a recipe, since <code>enabled</code> is <a href=\"https://normandy.cdn.mozilla.net/api/v1/recipe/signed/\" rel=\"nofollow\">a part of the signed blob</a>. Or maybe that happens automatically somewhere else.</p>", "id": 370622775, "issue_url": "https://api.github.com/repos/mozilla/normandy/issues/1203"}