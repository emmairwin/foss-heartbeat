{"body_text": "Currently all users interact with Normandy filtering via JEXL expression strings. We call these \"filter expressions\". Filter expressions are error prone, hard to work with, and not machine editable. This means that improving the UI in delivery console would require too much effort to be reasonable. For example, we may want to make a UI that allows you to select a Firefox version range from dropdowns. This isn't really possible as long as all filtering is done in a single expression string.\nTo fix this problem, I propose a new idea, filter objects. Consider this filter expression:\nnormandy.version >= '58' && normandy.version < '59'\n&& normandy.channel == \"beta\"\n&& [normandy.userId]|stableSample(0.1)\n\ni.e. 10% of Firefox 58 beta.\nThis could be translated into a corresponding filter object:\n[\n  {\"type\": \"version\", \"version\": 58},\n  {\"type\": \"channel\", \"channel\": \"beta\"},\n  {\"type\": \"stable-sample\", \"rate\": 0.1},\n]\nThis could be manipulated by a UI in Delivery Console much more easier, since it is just JSON, and can be rendered to the original filter expression on the normandy server.\n\nThe recipe API has a few fields for filter expressions: filter_expression, which is read-only, generated by the server, and evaluated by the client, extra_filter_expression which is edited by clients, and a few fields like country that are unused remnants of a previous attempt at this sort of feature.\nI propose adding another new field, filter_object, a read-write field that can be manipulated and queried by UIs and data analysis. It would also be included in the generation of filter_expression, along with extra_filter_expression.\nI think  that this plan is backwards compatible, has minimal on existing code, and will solve all the problems laid out about query-ability and making better UIs for editing things. Thoughts?", "labels": [{"url": "https://api.github.com/repos/mozilla/normandy/labels/P1", "color": "ffa32c", "default": false, "id": 821572173, "name": "P1"}, {"url": "https://api.github.com/repos/mozilla/normandy/labels/new-feature", "color": "0e8a16", "default": false, "id": 821572171, "name": "new-feature"}, {"url": "https://api.github.com/repos/mozilla/normandy/labels/proposal", "color": "1d76db", "default": false, "id": 821572211, "name": "proposal"}], "number": 1184, "assignee": null, "repository_url": "https://api.github.com/repos/mozilla/normandy", "closed_at": null, "body_html": "<p>Currently all users interact with Normandy filtering via JEXL expression strings. We call these \"filter expressions\". Filter expressions are error prone, hard to work with, and not machine editable. This means that improving the UI in delivery console would require too much effort to be reasonable. For example, we may want to make a UI that allows you to select a Firefox version range from dropdowns. This isn't really possible as long as all filtering is done in a single expression string.</p>\n<p>To fix this problem, I propose a new idea, filter objects. Consider this filter expression:</p>\n<pre lang=\"jexl\"><code>normandy.version &gt;= '58' &amp;&amp; normandy.version &lt; '59'\n&amp;&amp; normandy.channel == \"beta\"\n&amp;&amp; [normandy.userId]|stableSample(0.1)\n</code></pre>\n<p>i.e. 10% of Firefox 58 beta.</p>\n<p>This could be translated into a corresponding filter object:</p>\n<div class=\"highlight highlight-source-json\"><pre>[\n  {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>type<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>version<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>version<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">58</span>},\n  {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>type<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>channel<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>channel<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>beta<span class=\"pl-pds\">\"</span></span>},\n  {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>type<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>stable-sample<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>rate<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">0.1</span>},\n]</pre></div>\n<p>This could be manipulated by a UI in Delivery Console much more easier, since it is just JSON, and can be rendered to the original filter expression on the normandy server.</p>\n<hr>\n<p>The recipe API has a few fields for filter expressions: <code>filter_expression</code>, which is read-only, generated by the server, and evaluated by the client, <code>extra_filter_expression</code> which is edited by clients, and a few fields like <code>country</code> that are unused remnants of a previous attempt at this sort of feature.</p>\n<p>I propose adding another new field, <code>filter_object</code>, a read-write field that can be manipulated and queried by UIs and data analysis. It would also be included in the generation of <code>filter_expression</code>, along with <code>extra_filter_expression</code>.</p>\n<p>I think  that this plan is backwards compatible, has minimal on existing code, and will solve all the problems laid out about query-ability and making better UIs for editing things. Thoughts?</p>", "id": 296925937, "title": "Filter Object API support", "comments": 5, "state": "open", "body": "Currently all users interact with Normandy filtering via JEXL expression strings. We call these \"filter expressions\". Filter expressions are error prone, hard to work with, and not machine editable. This means that improving the UI in delivery console would require too much effort to be reasonable. For example, we may want to make a UI that allows you to select a Firefox version range from dropdowns. This isn't really possible as long as all filtering is done in a single expression string.\r\n\r\nTo fix this problem, I propose a new idea, filter objects. Consider this filter expression:\r\n\r\n```jexl\r\nnormandy.version >= '58' && normandy.version < '59'\r\n&& normandy.channel == \"beta\"\r\n&& [normandy.userId]|stableSample(0.1)\r\n```\r\n\r\ni.e. 10% of Firefox 58 beta.\r\n\r\nThis could be translated into a corresponding filter object:\r\n\r\n```json\r\n[\r\n  {\"type\": \"version\", \"version\": 58},\r\n  {\"type\": \"channel\", \"channel\": \"beta\"},\r\n  {\"type\": \"stable-sample\", \"rate\": 0.1},\r\n]\r\n```\r\n\r\nThis could be manipulated by a UI in Delivery Console much more easier, since it is just JSON, and can be rendered to the original filter expression on the normandy server.\r\n\r\n---\r\n\r\nThe recipe API has a few fields for filter expressions: `filter_expression`, which is read-only, generated by the server, and evaluated by the client, `extra_filter_expression` which is edited by clients, and a few fields like `country` that are unused remnants of a previous attempt at this sort of feature.\r\n\r\nI propose adding another new field, `filter_object`, a read-write field that can be manipulated and queried by UIs and data analysis. It would also be included in the generation of `filter_expression`, along with `extra_filter_expression`.\r\n\r\nI think  that this plan is backwards compatible, has minimal on existing code, and will solve all the problems laid out about query-ability and making better UIs for editing things. Thoughts?", "events_url": "https://api.github.com/repos/mozilla/normandy/issues/1184/events", "labels_url": "https://api.github.com/repos/mozilla/normandy/issues/1184/labels{/name}", "author_association": "MEMBER", "comments_url": "https://api.github.com/repos/mozilla/normandy/issues/1184/comments", "html_url": "https://github.com/mozilla/normandy/issues/1184", "updated_at": "2018-03-09T21:07:36Z", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "milestone": null, "locked": false, "url": "https://api.github.com/repos/mozilla/normandy/issues/1184", "created_at": "2018-02-13T23:40:18Z", "assignees": []}