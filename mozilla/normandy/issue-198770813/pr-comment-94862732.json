{"original_position": 110, "diff_hunk": "@@ -16,4 +19,106 @@ describe('controlApp Utils', () => {\n       expect(path).toBe('http://mozilla.com/');\n     });\n   });\n+\n+\n+  describe('utils/clone-array', () => {\n+    describe('cloneArrayValues', () => {\n+      it('should throw an error if not given an array', () => {\n+        expect(() => {\n+          cloneArrayValues({});\n+        }).toThrow();\n+      });\n+\n+      it('should return a new array of new values', () => {\n+        const testArray = [{ hi: 'there' }];\n+        const clone = cloneArrayValues(testArray);\n+\n+        // shouldn't equate since it should be a new object\n+        expect(clone[0] === testArray[0]).toBe(false);\n+\n+        // confirm our output is the same as the input\n+        expect(clone[0]).toEqual({ hi: 'there' });\n+      });\n+\n+      it('should return an empty array if not given any params', () => {\n+        const returned = cloneArrayValues();\n+\n+        expect(returned instanceof Array).toBe(true);\n+        expect(returned.length).toBe(0);\n+      });\n+    });\n+\n+    describe('cloneArrayRefs', () => {\n+      it('should throw an error if not given an array', () => {\n+        expect(() => {\n+          cloneArrayRefs({});\n+        }).toThrow();\n+      });\n+\n+      it('should return a new array of existing objects', () => {\n+        const testArray = [{ hi: 'there' }];\n+        const clone = cloneArrayRefs(testArray);\n+\n+        // should equate since it is the same object,\n+        // just in a new array\n+        expect(clone[0] === testArray[0]).toBe(true);\n+\n+        // confirm our output is the same as the input\n+        expect(clone[0]).toEqual({ hi: 'there' });\n+      });\n+\n+      it('should return an empty array if not given any params', () => {\n+        const returned = cloneArrayRefs();\n+\n+        expect(returned instanceof Array).toBe(true);\n+        expect(returned.length).toBe(0);\n+      });\n+    });\n+\n+    describe('utils/deep-compare', () => {\n+      it('should compare two objects appropriately', () => {\n+        // test objects\n+        const objA = {\n+          hi: 'there',\n+        };\n+        const objB = {\n+          hey: 'there',\n+        };\n+        const objC = {\n+          hello: 'there',\n+          nested: {\n+            property: 'to test',\n+          },\n+        };\n+\n+        // compare two different objects\n+        expect(deepCompare(objA, objB)).toBe(false);\n+\n+        // compare matching objects\n+        expect(deepCompare(objA, { ...objA })).toBe(true);\n+\n+        // compare deep properties\n+        expect(deepCompare(objC, { ...objC })).toBe(true);\n+        expect(deepCompare(objC, { ...objC, nested: false })).toBe(false);\n+      });\n+    });\n+\n+    describe('utils/closest', () => {\n+      it('should attempt to find a parent element based on selector', () => {\n+        const testContainer = document.createElement('div');\n+        testContainer.innerHTML = [\n+          '<span class=\"test\">',\n+          '<div class=\"nest\">',\n+          '<button class=\"target\" />',\n+          '</div>',\n+          '</span>',\n+        ].join('');", "body_text": "You can use backtick strings for multiline strings. It doesn't fix indentation, but for this, I think that would be fine.\ntestContainer.innerHTML = `\n  <span class=\"test\">\n    <div class=\"nest\">\n      <button class=\"target\" />\n    </div>\n</span>\n`;\nI've also had success creating elements for test like this using React/JSX directly.", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/405", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/94862732", "created_at": "2017-01-05T22:11:12Z", "author_association": "MEMBER", "body": "You can use backtick strings for multiline strings. It doesn't fix indentation, but for this, I think that would be fine.\r\n\r\n```js\r\ntestContainer.innerHTML = `\r\n  <span class=\"test\">\r\n    <div class=\"nest\">\r\n      <button class=\"target\" />\r\n    </div>\r\n</span>\r\n`;\r\n```\r\n\r\nI've also had success creating elements for test like this using React/JSX directly.", "updated_at": "2017-02-06T18:21:31Z", "html_url": "https://github.com/mozilla/normandy/pull/405#discussion_r94862732", "pull_request_review_id": 15403449, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/94862732"}, "html": {"href": "https://github.com/mozilla/normandy/pull/405#discussion_r94862732"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/405"}}, "commit_id": "3817ad087be7dc4e56a202977ff6d14e66b9d676", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "position": null, "path": "client/control/tests/utils/test_controlUtils.js", "body_html": "<p>You can use backtick strings for multiline strings. It doesn't fix indentation, but for this, I think that would be fine.</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-smi\">testContainer</span>.<span class=\"pl-smi\">innerHTML</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span></span>\n<span class=\"pl-s\">  &lt;<span class=\"pl-ent\">span</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span>&gt;</span>\n<span class=\"pl-s\">    &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nest<span class=\"pl-pds\">\"</span></span>&gt;</span>\n<span class=\"pl-s\">      &lt;<span class=\"pl-ent\">button</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>target<span class=\"pl-pds\">\"</span></span> /&gt;</span>\n<span class=\"pl-s\">    &lt;/<span class=\"pl-ent\">div</span>&gt;</span>\n<span class=\"pl-s\">&lt;/<span class=\"pl-ent\">span</span>&gt;</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">`</span></span>;</pre></div>\n<p>I've also had success creating elements for test like this using React/JSX directly.</p>", "original_commit_id": "532fdf2ced0ce059bd30fa25be624037e8a805b3", "id": 94862732}