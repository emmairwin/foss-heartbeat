{"original_position": 110, "diff_hunk": "@@ -16,4 +19,106 @@ describe('controlApp Utils', () => {\n       expect(path).toBe('http://mozilla.com/');\n     });\n   });\n+\n+\n+  describe('utils/clone-array', () => {\n+    describe('cloneArrayValues', () => {\n+      it('should throw an error if not given an array', () => {\n+        expect(() => {\n+          cloneArrayValues({});\n+        }).toThrow();\n+      });\n+\n+      it('should return a new array of new values', () => {\n+        const testArray = [{ hi: 'there' }];\n+        const clone = cloneArrayValues(testArray);\n+\n+        // shouldn't equate since it should be a new object\n+        expect(clone[0] === testArray[0]).toBe(false);\n+\n+        // confirm our output is the same as the input\n+        expect(clone[0]).toEqual({ hi: 'there' });\n+      });\n+\n+      it('should return an empty array if not given any params', () => {\n+        const returned = cloneArrayValues();\n+\n+        expect(returned instanceof Array).toBe(true);\n+        expect(returned.length).toBe(0);\n+      });\n+    });\n+\n+    describe('cloneArrayRefs', () => {\n+      it('should throw an error if not given an array', () => {\n+        expect(() => {\n+          cloneArrayRefs({});\n+        }).toThrow();\n+      });\n+\n+      it('should return a new array of existing objects', () => {\n+        const testArray = [{ hi: 'there' }];\n+        const clone = cloneArrayRefs(testArray);\n+\n+        // should equate since it is the same object,\n+        // just in a new array\n+        expect(clone[0] === testArray[0]).toBe(true);\n+\n+        // confirm our output is the same as the input\n+        expect(clone[0]).toEqual({ hi: 'there' });\n+      });\n+\n+      it('should return an empty array if not given any params', () => {\n+        const returned = cloneArrayRefs();\n+\n+        expect(returned instanceof Array).toBe(true);\n+        expect(returned.length).toBe(0);\n+      });\n+    });\n+\n+    describe('utils/deep-compare', () => {\n+      it('should compare two objects appropriately', () => {\n+        // test objects\n+        const objA = {\n+          hi: 'there',\n+        };\n+        const objB = {\n+          hey: 'there',\n+        };\n+        const objC = {\n+          hello: 'there',\n+          nested: {\n+            property: 'to test',\n+          },\n+        };\n+\n+        // compare two different objects\n+        expect(deepCompare(objA, objB)).toBe(false);\n+\n+        // compare matching objects\n+        expect(deepCompare(objA, { ...objA })).toBe(true);\n+\n+        // compare deep properties\n+        expect(deepCompare(objC, { ...objC })).toBe(true);\n+        expect(deepCompare(objC, { ...objC, nested: false })).toBe(false);\n+      });\n+    });\n+\n+    describe('utils/closest', () => {\n+      it('should attempt to find a parent element based on selector', () => {\n+        const testContainer = document.createElement('div');\n+        testContainer.innerHTML = [\n+          '<span class=\"test\">',\n+          '<div class=\"nest\">',\n+          '<button class=\"target\" />',\n+          '</div>',\n+          '</span>',\n+        ].join('');", "body_text": "Huh, weird. I wonder why I didn't just use backticks in the first place. I didn't consider using JSX - I'll give that a try.", "in_reply_to_id": 94862732, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/405", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/95220471", "created_at": "2017-01-09T18:52:27Z", "author_association": "CONTRIBUTOR", "body": "Huh, weird. I wonder why I didn't just use backticks in the first place. I didn't consider using JSX - I'll give that a try.", "updated_at": "2017-02-06T18:21:31Z", "html_url": "https://github.com/mozilla/normandy/pull/405#discussion_r95220471", "pull_request_review_id": 15768544, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/95220471"}, "html": {"href": "https://github.com/mozilla/normandy/pull/405#discussion_r95220471"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/405"}}, "commit_id": "3817ad087be7dc4e56a202977ff6d14e66b9d676", "user": {"following_url": "https://api.github.com/users/andymikulski/following{/other_user}", "events_url": "https://api.github.com/users/andymikulski/events{/privacy}", "organizations_url": "https://api.github.com/users/andymikulski/orgs", "url": "https://api.github.com/users/andymikulski", "gists_url": "https://api.github.com/users/andymikulski/gists{/gist_id}", "html_url": "https://github.com/andymikulski", "subscriptions_url": "https://api.github.com/users/andymikulski/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/2767162?v=4", "repos_url": "https://api.github.com/users/andymikulski/repos", "received_events_url": "https://api.github.com/users/andymikulski/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/andymikulski/starred{/owner}{/repo}", "site_admin": false, "login": "andymikulski", "type": "User", "id": 2767162, "followers_url": "https://api.github.com/users/andymikulski/followers"}, "position": null, "path": "client/control/tests/utils/test_controlUtils.js", "body_html": "<p>Huh, weird. I wonder why I didn't just use backticks in the first place. I didn't consider using JSX - I'll give that a try.</p>", "original_commit_id": "532fdf2ced0ce059bd30fa25be624037e8a805b3", "id": 95220471}