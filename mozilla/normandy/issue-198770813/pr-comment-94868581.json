{"original_position": 74, "diff_hunk": "@@ -0,0 +1,113 @@\n+import {\n+  makeApiRequest,\n+  recipesNeedFetch,\n+  recipesReceived,\n+  filtersReceived,\n+} from 'control/actions/ControlActions';\n+\n+import {\n+  getFilterParamString,\n+} from 'control/selectors/FiltersSelector';\n+\n+const LOAD_FILTERS = 'LOAD_FILTERS';\n+const SET_FILTER = 'SET_FILTER';\n+const SET_TEXT_FILTER = 'SET_TEXT_FILTER';\n+const SET_ALL_FILTERS = 'SET_ALL_FILTERS';\n+\n+\n+/**\n+ * Load list of possible filters from remote API.\n+ * This is stored in the `filters` reducer, and\n+ * later used to populate relevant RecipeFilters components.\n+ */\n+function loadFilters() {\n+  return dispatch =>\n+    dispatch(makeApiRequest('fetchFilters'))\n+      .then(recipes => dispatch(filtersReceived(recipes)));\n+}\n+\n+/**\n+ * Given an option and its parent group, update the\n+ * filter state based on the `isEnabled` prop\n+ *\n+ * @param  {Object}  group     Group the filter belongs to\n+ * @param  {Object}  option    Option that was affected\n+ * @param  {Boolean} isEnabled Is the option selected?\n+ */\n+function selectFilter({ group, option, isEnabled }) {\n+  return dispatch => {\n+    dispatch({\n+      type: group.value === 'text' ? SET_TEXT_FILTER : SET_FILTER,\n+      group,\n+      option,\n+      isEnabled,\n+    });\n+  };\n+}\n+\n+\n+/**\n+ * Detects activated filters, creates the URL param string,\n+ * and queries API for a filtered list based on params.\n+ */\n+function loadFilteredRecipes() {\n+  return (dispatch, getState) => {\n+    dispatch(recipesNeedFetch());\n+\n+    const filterParams = getFilterParamString(getState().filters);\n+\n+    return dispatch(makeApiRequest('fetchFilteredRecipes', filterParams))\n+      .then(recipes => dispatch(recipesReceived(recipes, filterParams)));\n+  };\n+}\n+\n+/**\n+ * Dispatches a SET_ALL_FILTERS event.\n+ * If called without a state param,\n+ * the filters reducer will reset the state\n+ * to its initialState.\n+ *\n+ * The difference between SET_ALL_FILTERS and LOAD_FILTERS\n+ * is that LOAD_ parses data from the backend before\n+ * inserting into the store. SET_ALL assumes that\n+ * the filters are already parsed, and the _app_ is\n+ * manipulating the existing store.", "body_text": "I think this is going to be confusing in the long run. I think a better approach would be to only have SET_ALL_FILTERS, and make whatever dispatches LOAD_FILTERS do the parsing and expansion there, instead of doing it in the reducer. If I'm understanding the flow correctly, this would make dealing with server formatting and actually making the request close together, instead of being spread across the reducers and action creators.", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/405", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/94868581", "created_at": "2017-01-05T22:47:08Z", "author_association": "MEMBER", "body": "I think this is going to be confusing in the long run. I think a better approach would be to only have `SET_ALL_FILTERS`, and make whatever dispatches `LOAD_FILTERS` do the parsing and expansion there, instead of doing it in the reducer. If I'm understanding the flow correctly, this would make dealing with server formatting and actually making the request close together, instead of being spread across the reducers and action creators.", "updated_at": "2017-02-06T18:21:31Z", "html_url": "https://github.com/mozilla/normandy/pull/405#discussion_r94868581", "pull_request_review_id": 15403449, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/94868581"}, "html": {"href": "https://github.com/mozilla/normandy/pull/405#discussion_r94868581"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/405"}}, "commit_id": "3817ad087be7dc4e56a202977ff6d14e66b9d676", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "position": null, "path": "client/control/actions/FilterActions.js", "body_html": "<p>I think this is going to be confusing in the long run. I think a better approach would be to only have <code>SET_ALL_FILTERS</code>, and make whatever dispatches <code>LOAD_FILTERS</code> do the parsing and expansion there, instead of doing it in the reducer. If I'm understanding the flow correctly, this would make dealing with server formatting and actually making the request close together, instead of being spread across the reducers and action creators.</p>", "original_commit_id": "532fdf2ced0ce059bd30fa25be624037e8a805b3", "id": 94868581}