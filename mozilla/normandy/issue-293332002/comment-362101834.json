{"body": "I don't think \"commandments\" 2 and 3 actually follow from the work week. We discussed that they are metrics we need to watch, but it is possible that it is ok to slow down Firefox or reduce retention for particular studies. I don't think this is something we should try and enforce automatically, and in fact I don't think we can do this within Normandy.\r\n\r\nCommand 1 is definitely true though. We have to make sure we can always roll back if something goes wrong. However, again I don't think there is a bright line we can draw that will keep us safe without totally crippling our behavior.\r\n\r\nFor example, bootstrap add-ons can do almost anything, including break the updater. Normandy will install bootstrap add-ons as a part of a study. We can't reasonably detect updater-breakage ahead of time. The only way to definitely be safe would be to make no changes to Firefox. The only way to actually get anything done is to accept the risk that add-ons might not be perfect.\r\n\r\nI think [the things that Normandy will never do](https://www.youtube.com/watch?v=dQw4w9WgXcQ) are mostly around operational security. It won't send things out that haven't been authorized by (at least) two valid users. It won't execute things that aren't signed correctly. Beyond that, I think that we have to leave Safety to the process, not code.\r\n\r\nIf you have more specific ideas I'm happy to explore them. Specific features will always need to be designed with safety in mind, but blanket \"automate that nothing can ever go wrong\" rules aren't something I think we should spend time on right now.", "body_text": "I don't think \"commandments\" 2 and 3 actually follow from the work week. We discussed that they are metrics we need to watch, but it is possible that it is ok to slow down Firefox or reduce retention for particular studies. I don't think this is something we should try and enforce automatically, and in fact I don't think we can do this within Normandy.\nCommand 1 is definitely true though. We have to make sure we can always roll back if something goes wrong. However, again I don't think there is a bright line we can draw that will keep us safe without totally crippling our behavior.\nFor example, bootstrap add-ons can do almost anything, including break the updater. Normandy will install bootstrap add-ons as a part of a study. We can't reasonably detect updater-breakage ahead of time. The only way to definitely be safe would be to make no changes to Firefox. The only way to actually get anything done is to accept the risk that add-ons might not be perfect.\nI think the things that Normandy will never do are mostly around operational security. It won't send things out that haven't been authorized by (at least) two valid users. It won't execute things that aren't signed correctly. Beyond that, I think that we have to leave Safety to the process, not code.\nIf you have more specific ideas I'm happy to explore them. Specific features will always need to be designed with safety in mind, but blanket \"automate that nothing can ever go wrong\" rules aren't something I think we should spend time on right now.", "url": "https://api.github.com/repos/mozilla/normandy/issues/comments/362101834", "created_at": "2018-01-31T23:08:31Z", "author_association": "MEMBER", "html_url": "https://github.com/mozilla/normandy/issues/1174#issuecomment-362101834", "updated_at": "2018-01-31T23:08:31Z", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "body_html": "<p>I don't think \"commandments\" 2 and 3 actually follow from the work week. We discussed that they are metrics we need to watch, but it is possible that it is ok to slow down Firefox or reduce retention for particular studies. I don't think this is something we should try and enforce automatically, and in fact I don't think we can do this within Normandy.</p>\n<p>Command 1 is definitely true though. We have to make sure we can always roll back if something goes wrong. However, again I don't think there is a bright line we can draw that will keep us safe without totally crippling our behavior.</p>\n<p>For example, bootstrap add-ons can do almost anything, including break the updater. Normandy will install bootstrap add-ons as a part of a study. We can't reasonably detect updater-breakage ahead of time. The only way to definitely be safe would be to make no changes to Firefox. The only way to actually get anything done is to accept the risk that add-ons might not be perfect.</p>\n<p>I think <a href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\" rel=\"nofollow\">the things that Normandy will never do</a> are mostly around operational security. It won't send things out that haven't been authorized by (at least) two valid users. It won't execute things that aren't signed correctly. Beyond that, I think that we have to leave Safety to the process, not code.</p>\n<p>If you have more specific ideas I'm happy to explore them. Specific features will always need to be designed with safety in mind, but blanket \"automate that nothing can ever go wrong\" rules aren't something I think we should spend time on right now.</p>", "id": 362101834, "issue_url": "https://api.github.com/repos/mozilla/normandy/issues/1174"}