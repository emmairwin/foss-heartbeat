{"original_position": 79, "diff_hunk": "@@ -39,88 +39,147 @@ Cu.importGlobalProperties([\"fetch\"]);\n this.EXPORTED_SYMBOLS = [\"RecipeRunner\"];\n \n const log = LogManager.getLogger(\"recipe-runner\");\n-const prefs = Services.prefs.getBranch(\"extensions.shield-recipe-client.\");\n const TIMER_NAME = \"recipe-client-addon-run\";\n-const RUN_INTERVAL_PREF = \"run_interval_seconds\";\n-const FIRST_RUN_PREF = \"first_run\";\n const PREF_CHANGED_TOPIC = \"nsPref:changed\";\n \n+const TELEMETRY_ENABLED_PREF = \"datareporting.healthreport.uploadEnabled\";\n+\n+const SHIELD_PREF_PREFIX = \"extensions.shield-recipe-client\";\n+const RUN_INTERVAL_PREF = `${SHIELD_PREF_PREFIX}.run_interval_seconds`;\n+const FIRST_RUN_PREF = `${SHIELD_PREF_PREFIX}.first_run`;\n+const SHIELD_ENABLED_PREF = `${SHIELD_PREF_PREFIX}.enabled`;\n+const DEV_MODE_PREF = `${SHIELD_PREF_PREFIX}.dev_mode`;\n+const API_URL_PREF = `${SHIELD_PREF_PREFIX}.api_url`;\n+const LAZY_CLASSIFY_PREF = `${SHIELD_PREF_PREFIX}.experiments.lazy_classify`;\n+\n+const PREFS_TO_WATCH = [\n+  RUN_INTERVAL_PREF,\n+  TELEMETRY_ENABLED_PREF,\n+  SHIELD_ENABLED_PREF,\n+  API_URL_PREF,\n+];\n+\n this.RecipeRunner = {\n   async init() {\n-    if (!this.checkPrefs()) {\n-      return;\n-    }\n+    this.enabled = null;\n+    this.checkPrefs();  // sets this.enabled\n+    this.watchPrefs();\n+\n+    // Run if enabled immediately on first run, or if dev mode is enabled.\n+    const firstRun = Services.prefs.getBoolPref(FIRST_RUN_PREF);\n+    const devMode = Services.prefs.getBoolPref(DEV_MODE_PREF);\n \n-    // Run immediately on first run, or if dev mode is enabled.\n-    if (prefs.getBoolPref(FIRST_RUN_PREF) || prefs.getBoolPref(\"dev_mode\")) {\n+    if (this.enabled && (devMode || firstRun)) {\n       await this.run();\n-      prefs.setBoolPref(FIRST_RUN_PREF, false);\n     }\n+    if (firstRun) {\n+      Services.prefs.setBoolPref(FIRST_RUN_PREF, false);\n+    }\n+  },\n \n+  enable() {\n+    if (this.enabled) {\n+      return;\n+    }\n     this.registerTimer();\n+    this.enabled = true;\n   },\n \n-  registerTimer() {\n-    this.updateRunInterval();\n-    CleanupManager.addCleanupHandler(() => timerManager.unregisterTimer(TIMER_NAME));\n+  disable() {\n+    if (!this.enabled) {\n+      return;\n+    }\n+    this.unregisterTimer();\n+    this.enabled = false;\n+  },\n+\n+  /** Watch for prefs to change, and call this.observer when they do */\n+  watchPrefs() {\n+    for (const pref of PREFS_TO_WATCH) {\n+      Services.prefs.addObserver(pref, this);\n+    }\n \n-    // Watch for the run interval to change, and re-register the timer with the new value\n-    prefs.addObserver(RUN_INTERVAL_PREF, this);\n-    CleanupManager.addCleanupHandler(() => prefs.removeObserver(RUN_INTERVAL_PREF, this));\n+    CleanupManager.addCleanupHandler(this.unwatchPrefs.bind(this));", "body_text": "You're right that if we needed to remove a listener later, this would be a problem. But we never remove cleanup handlers, so we won't need this reference again. CleanupHandler is an Shield-ism. this will be the same in the callback (unwatchPrefs), soServices.prefs.removeObserver(pref, this)` (line 107) will work fine.", "in_reply_to_id": 144149676, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/1080", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/144153003", "created_at": "2017-10-11T22:29:56Z", "author_association": "MEMBER", "body": "You're right that if we needed to remove a listener later, this would be a problem. But we never remove cleanup handlers, so we won't need this reference again. CleanupHandler is an Shield-ism. this will be the same in the callback (unwatchPrefs), soServices.prefs.removeObserver(pref, this)` (line 107) will work fine.", "updated_at": "2017-10-17T23:40:17Z", "html_url": "https://github.com/mozilla/normandy/pull/1080#discussion_r144153003", "pull_request_review_id": 68771372, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/144153003"}, "html": {"href": "https://github.com/mozilla/normandy/pull/1080#discussion_r144153003"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/1080"}}, "commit_id": "256f439bd54cc922e7ccf6f536b1c271191953a7", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "position": 79, "path": "recipe-client-addon/lib/RecipeRunner.jsm", "body_html": "<p>You're right that if we needed to remove a listener later, this would be a problem. But we never remove cleanup handlers, so we won't need this reference again. CleanupHandler is an Shield-ism. this will be the same in the callback (unwatchPrefs), soServices.prefs.removeObserver(pref, this)` (line 107) will work fine.</p>", "original_commit_id": "f143f1bf889a4c771a84035efc8c411759f5292b", "id": 144153003}