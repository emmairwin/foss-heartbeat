{"original_position": 163, "diff_hunk": "@@ -39,88 +39,144 @@ Cu.importGlobalProperties([\"fetch\"]);\n this.EXPORTED_SYMBOLS = [\"RecipeRunner\"];\n \n const log = LogManager.getLogger(\"recipe-runner\");\n-const prefs = Services.prefs.getBranch(\"extensions.shield-recipe-client.\");\n const TIMER_NAME = \"recipe-client-addon-run\";\n-const RUN_INTERVAL_PREF = \"run_interval_seconds\";\n-const FIRST_RUN_PREF = \"first_run\";\n const PREF_CHANGED_TOPIC = \"nsPref:changed\";\n \n+const TELEMETRY_ENABLED_PREF = \"toolkit.telemetry.unified\";\n+\n+const SHIELD_PREF_PREFIX = \"extensions.shield-recipe-client\";\n+const RUN_INTERVAL_PREF = `${SHIELD_PREF_PREFIX}.run_interval_seconds`;\n+const FIRST_RUN_PREF = `${SHIELD_PREF_PREFIX}.first_run`;\n+const SHIELD_ENABLED_PREF = `${SHIELD_PREF_PREFIX}.enabled`;\n+const DEV_MODE_PREF = `${SHIELD_PREF_PREFIX}.dev_mode`;\n+const API_URL_PREF = `${SHIELD_PREF_PREFIX}.api_url`;\n+const LAZY_CLASSIFY_PREF = `${SHIELD_PREF_PREFIX}.experiments.lazy_classify`;\n+\n+const PREFS_TO_WATCH = [\n+  RUN_INTERVAL_PREF,\n+  TELEMETRY_ENABLED_PREF,\n+  SHIELD_ENABLED_PREF,\n+  API_URL_PREF,\n+];\n+\n this.RecipeRunner = {\n   async init() {\n-    if (!this.checkPrefs()) {\n-      return;\n-    }\n+    this.enabled = null;\n+    this.checkPrefs();  // sets this.enabled\n+    this.watchPrefs();\n+\n+    // Run if enabled immediately on first run, or if dev mode is enabled.\n+    const firstRun = Services.prefs.getBoolPref(FIRST_RUN_PREF);\n+    const devMode = Services.prefs.getBoolPref(DEV_MODE_PREF);\n \n-    // Run immediately on first run, or if dev mode is enabled.\n-    if (prefs.getBoolPref(FIRST_RUN_PREF) || prefs.getBoolPref(\"dev_mode\")) {\n+    if (this.enabled && (devMode || firstRun)) {\n       await this.run();\n-      prefs.setBoolPref(FIRST_RUN_PREF, false);\n     }\n+    if (firstRun) {\n+      Services.prefs.setBoolPref(FIRST_RUN_PREF, false);\n+    }\n+  },\n \n+  enable() {\n+    this.enabled = true;\n     this.registerTimer();\n   },\n \n-  registerTimer() {\n-    this.updateRunInterval();\n-    CleanupManager.addCleanupHandler(() => timerManager.unregisterTimer(TIMER_NAME));\n-\n-    // Watch for the run interval to change, and re-register the timer with the new value\n-    prefs.addObserver(RUN_INTERVAL_PREF, this);\n-    CleanupManager.addCleanupHandler(() => prefs.removeObserver(RUN_INTERVAL_PREF, this));\n+  disable() {\n+    this.enabled = false;\n+    this.unregisterTimer();\n   },\n \n-  checkPrefs() {\n-    // Only run if Unified Telemetry is enabled.\n-    if (!Services.prefs.getBoolPref(\"toolkit.telemetry.unified\")) {\n-      log.info(\"Disabling RecipeRunner because Unified Telemetry is disabled.\");\n-      return false;\n+  /** Watch for prefs to change, and call this.observer when they do */\n+  watchPrefs() {\n+    for (const pref of PREFS_TO_WATCH) {\n+      Services.prefs.addObserver(pref, this);\n     }\n \n-    if (!prefs.getBoolPref(\"enabled\")) {\n-      log.info(\"Recipe Client is disabled.\");\n-      return false;\n-    }\n+    CleanupManager.addCleanupHandler(this.unwatchPrefs.bind(this));\n+  },\n \n-    const apiUrl = prefs.getCharPref(\"api_url\");\n-    if (!apiUrl || !apiUrl.startsWith(\"https://\")) {\n-      log.error(`Non HTTPS URL provided for extensions.shield-recipe-client.api_url: ${apiUrl}`);\n-      return false;\n+  unwatchPrefs() {\n+    for (const pref of PREFS_TO_WATCH) {\n+      Services.prefs.removeObserver(pref, this);\n     }\n-\n-    return true;\n   },\n \n+  /** When prefs change, this is fired */\n   observe(subject, topic, data) {\n     switch (topic) {\n-      case PREF_CHANGED_TOPIC:\n-        this.observePrefChange(data);\n+      case PREF_CHANGED_TOPIC: {\n+        const prefName = data;\n+\n+        switch (prefName) {\n+          case RUN_INTERVAL_PREF:\n+            this.updateRunInterval();\n+            break;\n+\n+          // explicit fall-through\n+          case TELEMETRY_ENABLED_PREF:\n+          case SHIELD_ENABLED_PREF:\n+          case API_URL_PREF:\n+            this.checkPrefs();\n+            break;\n+\n+          default:\n+            log.debug(`Observer fired with unexpected pref change: ${prefName}`);\n+        }\n+\n         break;\n+      }\n     }\n   },\n \n-  /**\n-   * Watch for preference changes from Services.pref.addObserver.\n-   */\n-  observePrefChange(prefName) {\n-    if (prefName === RUN_INTERVAL_PREF) {\n-      this.updateRunInterval();\n+  checkPrefs() {\n+    let enable = true;\n+\n+    // Only run if Unified Telemetry is enabled.\n+    if (!Services.prefs.getBoolPref(TELEMETRY_ENABLED_PREF)) {\n+      log.debug(\"Disabling RecipeRunner because Unified Telemetry is disabled.\");\n+      enable = false;\n+    }\n+\n+    if (!Services.prefs.getBoolPref(SHIELD_ENABLED_PREF)) {\n+      log.debug(\"Recipe Client is disabled.\");\n+      enable = false;\n+    }\n+\n+    const apiUrl = Services.prefs.getCharPref(API_URL_PREF);\n+    if (!apiUrl || !apiUrl.startsWith(\"https://\")) {\n+      log.warn(`Non HTTPS URL provided for extensions.shield-recipe-client.api_url: ${apiUrl}`);\n+      enable = false;\n+    }\n+\n+    if (enable) {\n+      this.enable();\n     } else {\n-      log.debug(`Observer fired with unexpected pref change: ${prefName}`);\n+      this.disable();\n     }\n   },\n \n+  registerTimer() {\n+    this.updateRunInterval();\n+    CleanupManager.addCleanupHandler(() => timerManager.unregisterTimer(TIMER_NAME));", "body_text": "Does this throw if the timer isn't registered? Could that cause problems on shutdown if it was disabled halfway through the session?", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/1080", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/142548010", "created_at": "2017-10-03T23:12:43Z", "author_association": "MEMBER", "body": "Does this throw if the timer isn't registered? Could that cause problems on shutdown if it was disabled halfway through the session?", "updated_at": "2017-10-17T23:40:17Z", "html_url": "https://github.com/mozilla/normandy/pull/1080#discussion_r142548010", "pull_request_review_id": 66925249, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/142548010"}, "html": {"href": "https://github.com/mozilla/normandy/pull/1080#discussion_r142548010"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/1080"}}, "commit_id": "256f439bd54cc922e7ccf6f536b1c271191953a7", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "position": null, "path": "recipe-client-addon/lib/RecipeRunner.jsm", "body_html": "<p>Does this throw if the timer isn't registered? Could that cause problems on shutdown if it was disabled halfway through the session?</p>", "original_commit_id": "cb52c6f500dbe6a01a5bee8dc1af3e7b753ab7d7", "id": 142548010}