{"body_text": "Per previous discussions, allowing 'comments' would help a lot.\nI evaluated several paths:\n1 upgrading jexl to support comments of this form '//' and '/* */'\n2 pre-stripping WHOLE LINE comments ONLY // this is a comment or # comment\nI think the dirtiest quickest way is to do 2 above, maybe using # as the character.\nClaims and support:\n\nDoing whole line strip is pretty safe.\nWhole line comments are better for readability and style.\n\nRejecting the 'fix jexl' option.  In jexl, the lexer / parser are all hand-written and idiosyncratic.  A fully complete and robust 'inline' comments lexer / parser has a lots of edge cases  \"This is my /* string */\", and such.  It might all just work though :)\nExample Lexing:\n> L2.tokenize(\"a == '/* comment \\n blah */' /* a comment (b == 2) /* */\")\n[ { type: 'identifier', value: 'a', raw: 'a ' },\n  { type: 'binaryOp', value: '==', raw: '== ' },\n  { type: 'literal',\n    value: '/* comment \\n blah */',\n    raw: '\\'/* comment \\n blah */\\' ' },\n  { type: 'openComment', value: '/*', raw: '/* ' },\n  { type: 'identifier', value: 'a', raw: 'a ' },\n  { type: 'identifier', value: 'comment', raw: 'comment ' },\n  { type: 'openParen', value: '(', raw: '(' },\n  { type: 'identifier', value: 'b', raw: 'b ' },\n  { type: 'binaryOp', value: '==', raw: '== ' },\n  { type: 'literal', value: 2, raw: '2' },\n  { type: 'closeParen', value: ')', raw: ') ' },\n  { type: 'openComment', value: '/*', raw: '/* ' },\n  { type: 'closeComment', value: '*/', raw: '*/' } ]\n\n(This supports 'example filters', and a bunch of other pieces for recipe creation smoothing)", "labels": [], "number": 861, "assignee": null, "repository_url": "https://api.github.com/repos/mozilla/normandy", "closed_at": "2017-07-13T16:43:58Z", "body_html": "<p>Per previous discussions, allowing 'comments' would help a lot.</p>\n<p>I evaluated several paths:<br>\n1 upgrading <code>jexl</code> to support comments of this form '//' and '/* */'<br>\n2 pre-stripping WHOLE LINE comments ONLY <code>// this is a comment</code> or <code># comment</code></p>\n<p>I think the <em>dirtiest quickest way</em> is to do 2 above, maybe using <code>#</code> as the character.</p>\n<p>Claims and support:</p>\n<ul>\n<li>Doing whole line strip is pretty safe.</li>\n<li>Whole line comments are better for readability and style.</li>\n</ul>\n<p>Rejecting the 'fix jexl' option.  In jexl, the lexer / parser are all hand-written and idiosyncratic.  A fully complete and robust 'inline' comments lexer / parser has a lots of edge cases  \"This is my /* string */\", and such.  It might all just work though :)</p>\n<p>Example Lexing:</p>\n<pre><code>&gt; L2.tokenize(\"a == '/* comment \\n blah */' /* a comment (b == 2) /* */\")\n[ { type: 'identifier', value: 'a', raw: 'a ' },\n  { type: 'binaryOp', value: '==', raw: '== ' },\n  { type: 'literal',\n    value: '/* comment \\n blah */',\n    raw: '\\'/* comment \\n blah */\\' ' },\n  { type: 'openComment', value: '/*', raw: '/* ' },\n  { type: 'identifier', value: 'a', raw: 'a ' },\n  { type: 'identifier', value: 'comment', raw: 'comment ' },\n  { type: 'openParen', value: '(', raw: '(' },\n  { type: 'identifier', value: 'b', raw: 'b ' },\n  { type: 'binaryOp', value: '==', raw: '== ' },\n  { type: 'literal', value: 2, raw: '2' },\n  { type: 'closeParen', value: ')', raw: ') ' },\n  { type: 'openComment', value: '/*', raw: '/* ' },\n  { type: 'closeComment', value: '*/', raw: '*/' } ]\n</code></pre>\n<p>(This supports 'example filters', and a bunch of other pieces for recipe creation smoothing)</p>", "id": 240982287, "title": "allow comments of some sort in jexl", "comments": 2, "state": "closed", "body": "Per previous discussions, allowing 'comments' would help a lot.\r\n\r\nI evaluated several paths:\r\n1 upgrading `jexl` to support comments of this form '//' and '/* */'\r\n2 pre-stripping WHOLE LINE comments ONLY `// this is a comment` or `# comment`\r\n\r\nI think the *dirtiest quickest way* is to do 2 above, maybe using `#` as the character.  \r\n\r\nClaims and support: \r\n- Doing whole line strip is pretty safe.  \r\n- Whole line comments are better for readability and style.  \r\n\r\nRejecting the 'fix jexl' option.  In jexl, the lexer / parser are all hand-written and idiosyncratic.  A fully complete and robust 'inline' comments lexer / parser has a lots of edge cases  \"This is my /* string */\", and such.  It might all just work though :) \r\n\r\n\r\nExample Lexing:\r\n```\r\n> L2.tokenize(\"a == '/* comment \\n blah */' /* a comment (b == 2) /* */\")\r\n[ { type: 'identifier', value: 'a', raw: 'a ' },\r\n  { type: 'binaryOp', value: '==', raw: '== ' },\r\n  { type: 'literal',\r\n    value: '/* comment \\n blah */',\r\n    raw: '\\'/* comment \\n blah */\\' ' },\r\n  { type: 'openComment', value: '/*', raw: '/* ' },\r\n  { type: 'identifier', value: 'a', raw: 'a ' },\r\n  { type: 'identifier', value: 'comment', raw: 'comment ' },\r\n  { type: 'openParen', value: '(', raw: '(' },\r\n  { type: 'identifier', value: 'b', raw: 'b ' },\r\n  { type: 'binaryOp', value: '==', raw: '== ' },\r\n  { type: 'literal', value: 2, raw: '2' },\r\n  { type: 'closeParen', value: ')', raw: ') ' },\r\n  { type: 'openComment', value: '/*', raw: '/* ' },\r\n  { type: 'closeComment', value: '*/', raw: '*/' } ]\r\n```\r\n\r\n\r\n\r\n(This supports 'example filters', and a bunch of other pieces for recipe creation smoothing)", "events_url": "https://api.github.com/repos/mozilla/normandy/issues/861/events", "labels_url": "https://api.github.com/repos/mozilla/normandy/issues/861/labels{/name}", "author_association": "MEMBER", "comments_url": "https://api.github.com/repos/mozilla/normandy/issues/861/comments", "html_url": "https://github.com/mozilla/normandy/issues/861", "updated_at": "2017-07-13T16:43:58Z", "user": {"following_url": "https://api.github.com/users/gregglind/following{/other_user}", "events_url": "https://api.github.com/users/gregglind/events{/privacy}", "organizations_url": "https://api.github.com/users/gregglind/orgs", "url": "https://api.github.com/users/gregglind", "gists_url": "https://api.github.com/users/gregglind/gists{/gist_id}", "html_url": "https://github.com/gregglind", "subscriptions_url": "https://api.github.com/users/gregglind/subscriptions", "avatar_url": "https://avatars2.githubusercontent.com/u/163983?v=4", "repos_url": "https://api.github.com/users/gregglind/repos", "received_events_url": "https://api.github.com/users/gregglind/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/gregglind/starred{/owner}{/repo}", "site_admin": false, "login": "gregglind", "type": "User", "id": 163983, "followers_url": "https://api.github.com/users/gregglind/followers"}, "milestone": null, "locked": false, "url": "https://api.github.com/repos/mozilla/normandy/issues/861", "created_at": "2017-07-06T14:48:20Z", "assignees": []}