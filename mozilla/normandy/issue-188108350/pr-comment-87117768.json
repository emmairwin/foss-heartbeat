{"original_position": 59, "diff_hunk": "@@ -64,14 +64,62 @@ SwitchFilter.propTypes = {\n };\n \n class DisconnectedRecipeList extends React.Component {\n-  propTypes = {\n-    dispatch: pt.func.isRequired,\n-    isFetching: pt.bool.isRequired,\n-    recipeListNeedsFetch: pt.bool.isRequired,\n-    recipe: pt.object.isRequired,\n-    recipes: pt.array.isRequired,\n+  /**\n+   * Recipe metadata properties and associated labels to display\n+   * @type {Object}\n+   */\n+  static ActionMetaData = {\n+    'show-heartbeat': recipe => [\n+      { label: 'Survey ID', value: recipe.arguments.surveyId },\n+    ],\n+  };\n+\n+  /**\n+   * Given a recipe object, determines what type of recipe it is (based on its `action`),\n+   * and then compiles an array of 'displayed metadata props' and their values. This array\n+   * is saved on the recipe as `metaData`, and displayed in the 'Metadata'\n+   *\n+   * Beyond that, a string of metaData values is created, and attached to the\n+   * recipe as the `searchData` property. This is used by the `Table` component\n+   * to search/filter/sort the metaData.\n+   *\n+   * @param  {Object} Original recipe object\n+   * @return {Object} Original recipe but with `metaData` and `searchData` properties added\n+   */\n+  static applyRecipeMetaData(recipe) {\n+    const { action: recipeAction } = recipe;\n+    const newRecipe = {\n+      ...recipe,\n+      // recipes should have empty metaData/searchData props,\n+      // regardless if we set the values or not\n+      metaData: [],\n+      searchData: '',\n+    };\n+\n+    // check if there are specific properties/labels we want to display\n+    const requestedMetaProps = DisconnectedRecipeList.ActionMetaData[recipeAction];\n+\n+    // if we have a metadata definition to fill..\n+    if (requestedMetaProps) {\n+      const foundData = requestedMetaProps(newRecipe);\n+\n+      // add the data to the metaData collection\n+      newRecipe.metaData = newRecipe.metaData.concat(foundData);\n+    }\n+\n+    // update the searchdata string with whatever the values are\n+    // (this is used for sorting/filtering/searching)\n+    newRecipe.metaData.map(data => {\n+      newRecipe.searchData += data.value;\n+\n+      // lint complains if we dont return\n+      return data;", "body_text": "The lint error could be avoided by using .forEach instead of .map. Alternatively, for (const data of newRecipe.metaData) { should work fine.\nSeparately does this need spaces between values? Maybe it doesn't matter, the search code probably doesn't care.", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/314", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/87117768", "created_at": "2016-11-09T00:59:44Z", "author_association": "MEMBER", "body": "The lint error could be avoided by using `.forEach` instead of `.map`. Alternatively, `for (const data of newRecipe.metaData) {` should work fine.\n\nSeparately does this need spaces between values? Maybe it doesn't matter, the search code probably doesn't care.\n", "updated_at": "2016-11-09T18:27:20Z", "html_url": "https://github.com/mozilla/normandy/pull/314#discussion_r87117768", "pull_request_review_id": 7742177, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/87117768"}, "html": {"href": "https://github.com/mozilla/normandy/pull/314#discussion_r87117768"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/314"}}, "commit_id": "3678878a81ff53057eb941296ab3fa213ef88ba5", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "position": null, "path": "client/control/components/RecipeList.js", "body_html": "<p>The lint error could be avoided by using <code>.forEach</code> instead of <code>.map</code>. Alternatively, <code>for (const data of newRecipe.metaData) {</code> should work fine.</p>\n<p>Separately does this need spaces between values? Maybe it doesn't matter, the search code probably doesn't care.</p>", "original_commit_id": "7e02515e6a0893a650babb743e4ae9882cd5e1d6", "id": 87117768}