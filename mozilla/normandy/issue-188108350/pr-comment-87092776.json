{"original_position": 57, "diff_hunk": "@@ -64,14 +64,61 @@ SwitchFilter.propTypes = {\n };\n \n class DisconnectedRecipeList extends React.Component {\n-  propTypes = {\n-    dispatch: pt.func.isRequired,\n-    isFetching: pt.bool.isRequired,\n-    recipeListNeedsFetch: pt.bool.isRequired,\n-    recipe: pt.object.isRequired,\n-    recipes: pt.array.isRequired,\n+  /**\n+   * Recipe metadata properties and associated labels to display\n+   * @type {Object}\n+   */\n+  static ActionMetaData = {\n+    'show-heartbeat': {\n+      // prop name : displayed label\n+      surveyId: 'Survey ID',\n+    },\n+  };\n+\n+  /**\n+   * Given a recipe object, determines what type of recipe it is (based on its `action`),\n+   * and then compiles a hash of 'displayed metadata props' and their values. This hash\n+   * is saved on the recipe as `metaData`, and displayed in the 'Metadata'\n+   *\n+   * Beyond that, a string of metaData values is created, and attached to the\n+   * recipe as the `searchData` property. This is used by the `Table` component\n+   * to search/filter/sort the metaData.\n+   *\n+   * @param  {Object} Original recipe object\n+   * @return {Object} Original recipe but with `metaData` and `searchData` properties added\n+   */\n+  static applyRecipeMetadata(recipe) {\n+    const { action: recipeAction } = recipe;\n+    const newRecipe = { ...recipe };\n+\n+    // recipes should have empty metaData/searchData props,\n+    // regardless if we set the values or not\n+    newRecipe.metaData = {};\n+    newRecipe.searchData = '';\n+\n+    // check if there are specific properties/labels we want to grub\n+    const requestedMetaProps = DisconnectedRecipeList.ActionMetaData[recipeAction];\n+\n+    // if there are metadata props we want to pull out,\n+    // loop through them and extract the data from the recipe\n+    for (const propName in requestedMetaProps) {\n+      if (requestedMetaProps.hasOwnProperty(propName)) {\n+        // get the displayed label value\n+        const label = requestedMetaProps[propName];\n+        // get the actual property value\n+        const value = newRecipe.arguments[propName];\n+        // save the label:property into the metadata\n+        newRecipe.metaData[label] = value;\n+\n+        // add the value to the existing search data\n+        newRecipe.searchData = `${newRecipe.searchData} ${value}`;", "body_text": "newRecipe.searchData += ${value}`; seems more natural here.", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/314", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/87092776", "created_at": "2016-11-08T21:55:40Z", "author_association": "MEMBER", "body": "`newRecipe.searchData +=` ${value}`; seems more natural here.\n", "updated_at": "2016-11-09T18:27:20Z", "html_url": "https://github.com/mozilla/normandy/pull/314#discussion_r87092776", "pull_request_review_id": 7717709, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/87092776"}, "html": {"href": "https://github.com/mozilla/normandy/pull/314#discussion_r87092776"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/314"}}, "commit_id": "3678878a81ff53057eb941296ab3fa213ef88ba5", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "position": null, "path": "client/control/components/RecipeList.js", "body_html": "<p><code>newRecipe.searchData +=</code> ${value}`; seems more natural here.</p>", "original_commit_id": "633a505849ca20cace31731ee670614d18637f90", "id": 87092776}