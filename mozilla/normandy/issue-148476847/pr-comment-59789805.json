{"original_position": 36, "diff_hunk": "@@ -58,3 +58,26 @@ def retrieve(self, request, name, impl_hash):\n             raise NotFound('Hash does not match current stored action.')\n \n         return Response(action.implementation)\n+\n+\n+class RecipeViewSet(viewsets.ModelViewSet):\n+    \"\"\"Viewset for viewing and uploading recipes.\"\"\"\n+    queryset = Recipe.objects.all()\n+    serializer_class = RecipeSerializer\n+    permission_classes = [\n+        permissions.DjangoModelPermissions,\n+        AdminEnabled,\n+    ]\n+\n+    def update(self, request, *args, **kwargs):\n+        \"\"\"\n+        Intercept PUT requests and have them create instead of update\n+        if the object does not exist.\n+        \"\"\"\n+        if request.method == 'PUT':\n+            try:\n+                self.get_object()\n+            except Http404:\n+                return self.create(request, *args, **kwargs)", "body_text": "@Osmose I wonder if we should have a normandy.base.api.ModelViewSet that we can use as the base for our APIs that have this version of update, since I think we are going to want to do this on everything. (It also helps with the concerns I have on #109).\n@rehandalal I don't think we need to make any changes to this PR about this.", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/111", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/59789805", "created_at": "2016-04-14T20:53:01Z", "author_association": "MEMBER", "body": "@Osmose I wonder if we should have a `normandy.base.api.ModelViewSet` that we can use as the base for our APIs that have this version of `update`, since I think we are going to want to do this on everything. (It also helps with the concerns I have on #109).\n\n@rehandalal I don't think we need to make any changes to this PR about this.\n", "updated_at": "2016-04-14T21:16:49Z", "html_url": "https://github.com/mozilla/normandy/pull/111#discussion_r59789805", "pull_request_review_id": null, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/59789805"}, "html": {"href": "https://github.com/mozilla/normandy/pull/111#discussion_r59789805"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/111"}}, "commit_id": "e0e2610c99334de703b04ddeaae170e009cb705b", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "position": 36, "path": "normandy/recipes/api/views.py", "body_html": "<p><a class=\"user-mention\" href=\"https://github.com/osmose\">@Osmose</a> I wonder if we should have a <code>normandy.base.api.ModelViewSet</code> that we can use as the base for our APIs that have this version of <code>update</code>, since I think we are going to want to do this on everything. (It also helps with the concerns I have on <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"148268923\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/mozilla/normandy/issues/109\" href=\"https://github.com/mozilla/normandy/pull/109\">#109</a>).</p>\n<p><a class=\"user-mention\" href=\"https://github.com/rehandalal\">@rehandalal</a> I don't think we need to make any changes to this PR about this.</p>", "original_commit_id": "3521ac5bb130f70effcdd3fb62e6aea691661100", "id": 59789805}