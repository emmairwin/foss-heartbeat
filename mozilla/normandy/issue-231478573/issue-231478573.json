{"body_text": "When Jexl gets a dotted path like foo.bar.baz, it safely cascades undefineds. (if foo.bar is undefined, foo.bar.baz will also return undefined, instead of erroring)\nJexl also supports bracketed access, like foo.bar[\"baz\"]. In this case[\"baz\"] is special case of a \"filter expression\" (no not that kind) that can return a subset of an object. For example normandy.addons[.version > \"1.0\"] would return a list of add-ons that have a version greater than 1.0. Additionally, if the resulting list has exactly one element, it returns a single object instead of a list.\nBecause of these filter expressions if foo.bar is undefined, foo.bar[\"baz\"] throws an error, since there is nothing to filter. This is a problem because we have recipes that access things like normandy.telemetry.main.addons[\"some addon id\"].version. If any of these keys are undefined, it errors out.\nThis issue covers fixing bracketed access to that it cascades undefined safely, like dotted access.\nAn open question: Should we try and preserve filter expressions while doing so?", "labels": [], "number": 782, "assignee": null, "repository_url": "https://api.github.com/repos/mozilla/normandy", "closed_at": "2017-05-25T22:42:53Z", "body_html": "<p>When Jexl gets a dotted path like <code>foo.bar.baz</code>, it safely cascades undefineds. (if <code>foo.bar</code> is undefined, <code>foo.bar.baz</code> will also return undefined, instead of erroring)</p>\n<p>Jexl also supports bracketed access, like <code>foo.bar[\"baz\"]</code>. In this case<code>[\"baz\"]</code> is special case of a \"filter expression\" (no not that kind) that can return a subset of an object. For example <code>normandy.addons[.version &gt; \"1.0\"]</code> would return a list of add-ons that have a version greater than 1.0. Additionally, if the resulting list has exactly one element, it returns a single object instead of a list.</p>\n<p>Because of these filter expressions if <code>foo.bar</code> is undefined, <code>foo.bar[\"baz\"]</code> throws an error, since there is nothing to filter. This is a problem because we have recipes that access things like <code>normandy.telemetry.main.addons[\"some addon id\"].version</code>. If any of these keys are undefined, it errors out.</p>\n<p>This issue covers fixing bracketed access to that it cascades undefined safely, like dotted access.</p>\n<p>An open question: Should we try and preserve filter expressions while doing so?</p>", "id": 231478573, "title": "Fix Jexl [] undefined issues", "comments": 2, "state": "closed", "body": "When Jexl gets a dotted path like `foo.bar.baz`, it safely cascades undefineds. (if `foo.bar` is undefined, `foo.bar.baz` will also return undefined, instead of erroring)\r\n\r\nJexl also supports bracketed access, like `foo.bar[\"baz\"]`. In this case`[\"baz\"]` is special case of a \"filter expression\" (no not that kind) that can return a subset of an object. For example `normandy.addons[.version > \"1.0\"]` would return a list of add-ons that have a version greater than 1.0. Additionally, if the resulting list has exactly one element, it returns a single object instead of a list.\r\n\r\nBecause of these filter expressions if `foo.bar` is undefined, `foo.bar[\"baz\"]` throws an error, since there is nothing to filter. This is a problem because we have recipes that access things like `normandy.telemetry.main.addons[\"some addon id\"].version`. If any of these keys are undefined, it errors out.\r\n\r\nThis issue covers fixing bracketed access to that it cascades undefined safely, like dotted access.\r\n\r\nAn open question: Should we try and preserve filter expressions while doing so?", "events_url": "https://api.github.com/repos/mozilla/normandy/issues/782/events", "labels_url": "https://api.github.com/repos/mozilla/normandy/issues/782/labels{/name}", "author_association": "MEMBER", "comments_url": "https://api.github.com/repos/mozilla/normandy/issues/782/comments", "html_url": "https://github.com/mozilla/normandy/issues/782", "updated_at": "2017-05-25T22:42:53Z", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "milestone": null, "locked": false, "url": "https://api.github.com/repos/mozilla/normandy/issues/782", "created_at": "2017-05-25T22:35:04Z", "assignees": []}