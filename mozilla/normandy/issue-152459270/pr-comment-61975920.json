{"original_position": 88, "diff_hunk": "@@ -0,0 +1,177 @@\n+import apiFetch from '../utils/apiFetch.js';\n+\n+export const FETCH_RECIPES = 'FETCH_RECIPES';\n+export const RECIPES_RECEIVED = 'RECIPES_RECEIVED';\n+export const FETCH_SELECTED_RECIPE = 'FETCH_SELECTED_RECIPE';\n+export const SELECTED_RECIPE_RECEIVED = 'SELECTED_RECIPE_RECEIVED';\n+export const REMOVE_RECIPE_FROM_COLLECTION = 'REMOVE_RECIPE_FROM_COLLECTION';\n+export const RECIPE_DELETED = 'RECIPE_DELETED';\n+export const ADD_RECIPE_TO_COLLECTION = 'ADD_RECIPE_TO_COLLECTION';\n+export const RECIPE_ADDED = 'RECIPE_ADDED';\n+export const UPDATE_RECIPE_IN_COLLECTION = 'UPDATE_RECIPE_IN_COLLECTION';\n+export const RECIPE_UPDATED = 'RECIPE_UPDATED';\n+\n+\n+function fetchRecipes() {\n+  return {\n+    type: FETCH_RECIPES,\n+  };\n+}\n+\n+function recipesReceived(recipes) {\n+  return {\n+    type: RECIPES_RECEIVED,\n+    recipes: recipes,\n+  };\n+}\n+\n+function fetchSelectedRecipe() {\n+  return {\n+    type: FETCH_SELECTED_RECIPE,\n+  };\n+}\n+\n+function selectedRecipeReceived(recipe) {\n+  return {\n+    type: SELECTED_RECIPE_RECEIVED,\n+    recipe: recipe\n+  };\n+}\n+\n+function removeRecipeFromCollection(recipeId) {\n+  return {\n+    type: REMOVE_RECIPE_FROM_COLLECTION,\n+    recipeId: recipeId\n+  };\n+}\n+\n+function recipeDeleted() {\n+  return {\n+    type: RECIPE_DELETED\n+  };\n+}\n+\n+function addRecipeToCollection(recipe) {\n+  return {\n+    type: ADD_RECIPE_TO_COLLECTION,\n+    recipe: recipe\n+  };\n+}\n+\n+function recipeAdded(recipe) {\n+  return {\n+    type: RECIPE_ADDED,\n+    recipe: recipe\n+  };\n+}\n+\n+function updateRecipeInCollection(recipe, recipeId) {\n+  return {\n+    type: UPDATE_RECIPE_IN_COLLECTION,\n+    recipe,\n+    recipeId,\n+  };\n+}\n+\n+function recipeUpdated(recipe) {\n+  return {\n+    type: RECIPE_UPDATED,\n+    recipe: recipe\n+  };\n+}\n+\n+export function shouldFetchRecipes(state) {\n+  if (state.recipeCollection.recipes.length === 0) {\n+    return true;\n+  } else if (state.recipeCollection.recipes.isFetching) {\n+    return false;\n+  }", "body_text": "Shouldn't this always return either true or false instead of sometimes returning undefined? What if recipes.length is not 0, but it also isn't fetching?", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/130", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/61975920", "created_at": "2016-05-03T23:58:48Z", "author_association": "MEMBER", "body": "Shouldn't this always return either true or false instead of sometimes returning undefined? What if `recipes.length` is not 0, but it also isn't fetching?\n", "updated_at": "2016-05-09T21:42:05Z", "html_url": "https://github.com/mozilla/normandy/pull/130#discussion_r61975920", "pull_request_review_id": null, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/61975920"}, "html": {"href": "https://github.com/mozilla/normandy/pull/130#discussion_r61975920"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/130"}}, "commit_id": "fe2803e4d8c6aacbe1e624d979c6c7ec17a91ae5", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "position": null, "path": "normandy/control/static/control/js/actions/ControlAppActions.js", "body_html": "<p>Shouldn't this always return either true or false instead of sometimes returning undefined? What if <code>recipes.length</code> is not 0, but it also isn't fetching?</p>", "original_commit_id": "55df1f8b1d491ab4424ffeab0910a2bf2e8723a6", "id": 61975920}