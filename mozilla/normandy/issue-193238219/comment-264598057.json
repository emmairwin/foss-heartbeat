{"body": "That is a lot of commits. I don't think this level of granularity is useful when reviewing code, and it is actively harmful when we are doing deploys and reading the git log. Can you squash these down to fewer commits? I'd imagine one would be ideal, but if there are a few big chunks of work two or three commits might be OK (I haven't looked at the changes yet).\r\n\r\nAdditionally, before publishing a PR you should prefer rebasing onto master, instead of merging master into your branch. It is useful to use merges to update a branch *after* review has started, since it avoids rewriting published history. Before the changes are published though, there isn't any benefit to avoiding rewriting history.", "body_text": "That is a lot of commits. I don't think this level of granularity is useful when reviewing code, and it is actively harmful when we are doing deploys and reading the git log. Can you squash these down to fewer commits? I'd imagine one would be ideal, but if there are a few big chunks of work two or three commits might be OK (I haven't looked at the changes yet).\nAdditionally, before publishing a PR you should prefer rebasing onto master, instead of merging master into your branch. It is useful to use merges to update a branch after review has started, since it avoids rewriting published history. Before the changes are published though, there isn't any benefit to avoiding rewriting history.", "url": "https://api.github.com/repos/mozilla/normandy/issues/comments/264598057", "created_at": "2016-12-03T00:24:11Z", "author_association": "MEMBER", "html_url": "https://github.com/mozilla/normandy/pull/380#issuecomment-264598057", "updated_at": "2016-12-03T00:24:11Z", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "body_html": "<p>That is a lot of commits. I don't think this level of granularity is useful when reviewing code, and it is actively harmful when we are doing deploys and reading the git log. Can you squash these down to fewer commits? I'd imagine one would be ideal, but if there are a few big chunks of work two or three commits might be OK (I haven't looked at the changes yet).</p>\n<p>Additionally, before publishing a PR you should prefer rebasing onto master, instead of merging master into your branch. It is useful to use merges to update a branch <em>after</em> review has started, since it avoids rewriting published history. Before the changes are published though, there isn't any benefit to avoiding rewriting history.</p>", "id": 264598057, "issue_url": "https://api.github.com/repos/mozilla/normandy/issues/380"}