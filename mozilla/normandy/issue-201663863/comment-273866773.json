{"body": "Test failure is unrelated, and fixed by #430.\r\n\r\nLooking through the tests, I see that we test that a recipe with an id updates instead of creating a new one, but we don't actually test the flow of (1) creating a recipe, and then (2) updating it using the same form. We only test what we assume the data would like like in step 2 of that.\r\n\r\nHow I'd test this would depend on where the bug lies. If the bug is in the component, I'd mount the `RecipeForm` component and simulating submitting the form and then updating the form and saving again. If the bug lies in the reducer, the test I'd do is to fire off a set of actions that reveal the bug (that is, probably, create, and then an update action based on what is in the store). I'd expect the bug is probably closer to the components, but I haven't looked very hard.\r\n\r\nFinally, I think this solves the problem well in that it should prevent duplicate ids in the list, which is the underlying issue. However, I wonder if this problem could be addressed better with some design changes instead. In the version of the code in this PR, every time we update the list of recipes we linearly search through all of them and update the one with the correct id, or insert a new value. To me that sounds an awful lot like an object, where the keys are IDs and the values are the recipes.\r\n\r\nDo you think it makes sense to change the object stored in the state from a list of recipes to an object that related ids to recipe objects? (or a `Map`? or an `Immutable.Map`?) I used this pattern [in a side project](https://github.com/mythmon/tenbyten/blob/master/src/reducers/players.js), and I think it worked out pretty well.\r\n\r\nLike I said, I think what you have here solves the problem well. If you think the array based method is better, then we should stick with it. At this point, you've probably worked with this code more than I have. I think it's your decision.", "body_text": "Test failure is unrelated, and fixed by #430.\nLooking through the tests, I see that we test that a recipe with an id updates instead of creating a new one, but we don't actually test the flow of (1) creating a recipe, and then (2) updating it using the same form. We only test what we assume the data would like like in step 2 of that.\nHow I'd test this would depend on where the bug lies. If the bug is in the component, I'd mount the RecipeForm component and simulating submitting the form and then updating the form and saving again. If the bug lies in the reducer, the test I'd do is to fire off a set of actions that reveal the bug (that is, probably, create, and then an update action based on what is in the store). I'd expect the bug is probably closer to the components, but I haven't looked very hard.\nFinally, I think this solves the problem well in that it should prevent duplicate ids in the list, which is the underlying issue. However, I wonder if this problem could be addressed better with some design changes instead. In the version of the code in this PR, every time we update the list of recipes we linearly search through all of them and update the one with the correct id, or insert a new value. To me that sounds an awful lot like an object, where the keys are IDs and the values are the recipes.\nDo you think it makes sense to change the object stored in the state from a list of recipes to an object that related ids to recipe objects? (or a Map? or an Immutable.Map?) I used this pattern in a side project, and I think it worked out pretty well.\nLike I said, I think what you have here solves the problem well. If you think the array based method is better, then we should stick with it. At this point, you've probably worked with this code more than I have. I think it's your decision.", "url": "https://api.github.com/repos/mozilla/normandy/issues/comments/273866773", "created_at": "2017-01-19T19:02:54Z", "author_association": "MEMBER", "html_url": "https://github.com/mozilla/normandy/pull/432#issuecomment-273866773", "updated_at": "2017-01-19T19:02:54Z", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "body_html": "<p>Test failure is unrelated, and fixed by <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"201456247\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/mozilla/normandy/issues/430\" href=\"https://github.com/mozilla/normandy/pull/430\">#430</a>.</p>\n<p>Looking through the tests, I see that we test that a recipe with an id updates instead of creating a new one, but we don't actually test the flow of (1) creating a recipe, and then (2) updating it using the same form. We only test what we assume the data would like like in step 2 of that.</p>\n<p>How I'd test this would depend on where the bug lies. If the bug is in the component, I'd mount the <code>RecipeForm</code> component and simulating submitting the form and then updating the form and saving again. If the bug lies in the reducer, the test I'd do is to fire off a set of actions that reveal the bug (that is, probably, create, and then an update action based on what is in the store). I'd expect the bug is probably closer to the components, but I haven't looked very hard.</p>\n<p>Finally, I think this solves the problem well in that it should prevent duplicate ids in the list, which is the underlying issue. However, I wonder if this problem could be addressed better with some design changes instead. In the version of the code in this PR, every time we update the list of recipes we linearly search through all of them and update the one with the correct id, or insert a new value. To me that sounds an awful lot like an object, where the keys are IDs and the values are the recipes.</p>\n<p>Do you think it makes sense to change the object stored in the state from a list of recipes to an object that related ids to recipe objects? (or a <code>Map</code>? or an <code>Immutable.Map</code>?) I used this pattern <a href=\"https://github.com/mythmon/tenbyten/blob/master/src/reducers/players.js\">in a side project</a>, and I think it worked out pretty well.</p>\n<p>Like I said, I think what you have here solves the problem well. If you think the array based method is better, then we should stick with it. At this point, you've probably worked with this code more than I have. I think it's your decision.</p>", "id": 273866773, "issue_url": "https://api.github.com/repos/mozilla/normandy/issues/432"}