{"original_position": 281, "diff_hunk": "@@ -1,197 +1,206 @@\n+/* eslint-disable import/no-named-as-default */\n import React, { PropTypes as pt } from 'react';\n-import { Link } from 'react-router';\n+import { connect } from 'react-redux';\n+import { Link, locationShape } from 'react-router';\n import { push } from 'react-router-redux';\n-import { destroy, stopSubmit, reduxForm, getValues } from 'redux-form';\n-import { _ } from 'underscore';\n+import {\n+  reduxForm,\n+  formValueSelector,\n+  propTypes as reduxFormPropTypes,\n+  SubmissionError,\n+} from 'redux-form';\n+import _ from 'underscore';\n \n import { makeApiRequest, recipeUpdated, recipeAdded, showNotification }\n   from '../actions/ControlActions.js';\n import composeRecipeContainer from './RecipeContainer.js';\n-import ActionForm from './ActionForm.js';\n-import CheckboxField from './form_fields/CheckboxField.js';\n-import FormField from './form_fields/FormFieldWrapper.js';\n+import { ControlField } from './Fields.js';\n+import HeartbeatFields from './action_fields/HeartbeatFields.js';\n+import ConsoleLogFields from './action_fields/ConsoleLogFields.js';\n import JexlEnvironment from '../../selfrepair/JexlEnvironment.js';\n \n-export class DisconnectedRecipeForm extends React.Component {\n-  static propTypes = {\n-    dispatch: pt.func.isRequired,\n-    fields: pt.object.isRequired,\n-    formState: pt.object.isRequired,\n-    recipeId: pt.number.isRequired,\n-    submitting: pt.bool.isRequired,\n-    recipe: pt.object.isRequired,\n-    handleSubmit: pt.func.isRequired,\n-    viewingRevision: pt.bool.isRequired,\n-  }\n-\n-  constructor(props) {\n-    super(props);\n-\n-    this.state = {\n-      availableActions: ['console-log', 'show-heartbeat'],\n-      selectedAction: null,\n-    };\n-\n-    this.submitForm = ::this.submitForm;\n-    this.changeAction = ::this.changeAction;\n-  }\n-\n-  componentWillReceiveProps(nextProps) {\n-    if (!this.state.selectedAction && nextProps.recipe) {\n-      const selectedActionName = nextProps.recipe.action;\n-      this.setState({\n-        selectedAction: { name: selectedActionName },\n-      });\n-    }\n-  }\n-\n-  changeAction(event) {\n-    const { dispatch, fields } = this.props;\n-    const selectedActionName = event.target.value;\n+export const selector = formValueSelector('recipe');\n \n-    dispatch(destroy('action'));\n-    fields.action.onChange(event);\n-    this.setState({\n-      selectedAction: { name: selectedActionName },\n-    });\n-  }\n-\n-  validateForm(formValues) {\n-    const jexlExpression = formValues.filter_expression;\n-    const jexlEnv = new JexlEnvironment({});\n-    return jexlEnv.eval(jexlExpression, {});\n-  }\n-\n-  submitForm() {\n-    const { dispatch, formState, recipeId } = this.props;\n-\n-    const recipeFormValues = getValues(formState.recipe);\n-    const actionFormValues = getValues(formState.action);\n-    const combinedFormValues = { ...recipeFormValues, arguments: actionFormValues };\n-    const requestBody = { recipe: combinedFormValues, recipeId };\n-\n-    return this.validateForm(combinedFormValues)\n-    .catch(() => {\n-      dispatch(showNotification({\n-        messageType: 'error',\n-        message: 'Recipe cannot be saved. Please correct any errors listed in the form below.',\n-      }));\n-      throw {\n-        filter_expression: 'Invalid Expression',\n-      };\n-    })\n-    .then(() => {\n-      if (recipeId) {\n-        return dispatch(makeApiRequest('updateRecipe', requestBody))\n-        .then(response => dispatch(recipeUpdated(response)));\n-      }\n-      return dispatch(makeApiRequest('addRecipe', requestBody))\n-      .then(response => {\n-        dispatch(recipeAdded(response));\n-        dispatch(push(`/control/recipe/${response.id}/`));\n-      });\n-    });\n+/**\n+ * Form for creating new recipes or editing existing recipes.\n+ */\n+export class RecipeForm extends React.Component {\n+  static propTypes = {\n+    handleSubmit: reduxFormPropTypes.handleSubmit,\n+    submitting: reduxFormPropTypes.submitting,\n+    selectedAction: pt.string,\n+    recipeId: pt.number,\n+    recipe: pt.shape({\n+      name: pt.string.isRequired,\n+      enabled: pt.bool.isRequired,\n+      filter_expression: pt.string.isRequired,\n+      action: pt.string.isRequired,\n+      arguments: pt.object.isRequired,\n+    }),\n   }\n+  static argumentsFields = {\n+    'console-log': ConsoleLogFields,\n+    'show-heartbeat': HeartbeatFields,\n+  };\n \n   render() {\n-    const {\n-      fields: { name, filter_expression: filterExpression, enabled, action },\n-      submitting, recipe, recipeId, handleSubmit, viewingRevision,\n-    } = this.props;\n-    const { availableActions, selectedAction } = this.state;\n+    const { handleSubmit, selectedAction, submitting, recipe, recipeId } = this.props;\n+    const ArgumentsFields = RecipeForm.argumentsFields[selectedAction] || null;\n+\n+    // Show a loading indicator if we haven't yet loaded the recipe.\n+    if (recipeId && !recipe) {\n+      return (\n+        <div className=\"recipe-form loading\">\n+          <i className=\"fa fa-spinner fa-spin fa-3x fa-fw\" />\n+          <p>Loading recipe...</p>\n+        </div>\n+      );\n+    }\n \n     return (\n-      <form onSubmit={handleSubmit(this.submitForm)} className=\"crud-form fluid-8\">\n-\n-        {viewingRevision &&\n-          <p id=\"viewing-revision\" className=\"notification info\">\n-            You are viewing a past version of this recipe. Saving this form\n-            will rollback the recipe to this revision.\n-          </p>\n-        }\n-\n-        <FormField type=\"text\" label=\"Name\" field={name} containerClass=\"fluid-3\" />\n-        <CheckboxField label=\"Enabled\" field={enabled} containerClass=\"fluid-3\" />\n-        <FormField\n-          type=\"textarea\"\n-          label=\"Filter Expression\"\n-          field={filterExpression}\n-          containerClass=\"fluid-3\"\n+      <form className=\"recipe-form\" onSubmit={handleSubmit}>\n+        <ControlField label=\"Name\" name=\"name\" component=\"input\" type=\"text\" />\n+        <ControlField\n+          label=\"Enabled\"\n+          name=\"enabled\"\n+          className=\"checkbox-field\"\n+          component=\"input\"\n+          type=\"checkbox\"\n         />\n-        <FormField\n-          type=\"select\"\n-          label=\"Action\"\n-          field={action}\n-          containerClass=\"fluid-3\"\n-          options={availableActions}\n-          onChange={this.changeAction}\n+        <ControlField\n+          label=\"Filter Expression\"\n+          name=\"filter_expression\"\n+          component=\"textarea\"\n         />\n-\n-        {selectedAction && <ActionForm recipe={recipe} {...selectedAction} />}\n-\n-        <div className=\"row form-action-buttons\">\n-          <div className=\"fluid-2\">\n-            {recipeId &&\n-              <Link className=\"button delete\" to={`/control/recipe/${recipeId}/delete/`}>\n-                Delete\n-              </Link>\n-            }\n-          </div>\n-          <div className=\"fluid-2 float-right\">\n-            <button className=\"button\" type=\"submit\" disabled={submitting} >Submit</button>\n-          </div>\n+        <ControlField label=\"Action\" name=\"action\" component=\"select\">\n+          <option value=\"\">Choose an action...</option>\n+          <option value=\"console-log\">Log to Console</option>\n+          <option value=\"show-heartbeat\">Heartbeat Prompt</option>\n+        </ControlField>\n+        {ArgumentsFields && <ArgumentsFields />}\n+        <div className=\"form-actions\">\n+          {recipeId &&\n+            <Link className=\"button delete\" to={`/control/recipe/${recipeId}/delete/`}>\n+              Delete\n+            </Link>\n+          }\n+          <button className=\"button submit\" type=\"submit\" disabled={submitting}>Submit</button>\n         </div>\n-\n       </form>\n     );\n   }\n }\n \n-export default composeRecipeContainer(reduxForm({\n+/**\n+ * Redux-Form config for the RecipeForm.\n+ */\n+export const formConfig = {\n   form: 'recipe',\n-}, (state, props) => {\n-  const fields = ['name', 'filter_expression', 'enabled', 'action'];\n-  const selectedRecipeRevision = (props.location.state)\n-    ? props.location.state.selectedRevision\n-    : null;\n-\n-  const formatErrors = payload => {\n-    let errors = payload;\n-\n-    /* If our payload is an object, process each error in the object\n-       Otherwise, it is a string and will be returned immediately */\n-    if (_.isObject(payload)) {\n-      const invalidFields = Object.keys(payload);\n-      if (invalidFields.length > 0) {\n-        /* If our error keys are integers, it means they correspond\n-           to an array field and we want to present errors as an array\n-           e.g. { surveys: {0: {title: 'err'}}, {2: {weight: 'err'}} }\n-           =>   { surveys: [{title: 'err'}, null, {weight: 'err'}] } */\n-        errors = isNaN(invalidFields[0]) ? {} : [];\n-\n-        invalidFields.forEach(fieldName => {\n-          errors[fieldName] = formatErrors(payload[fieldName]);\n-        });\n+  asyncBlurFields: ['filter_expression'],\n+\n+  async asyncValidate(values) {\n+    const errors = {};\n+\n+    // Validate that filter expression is valid JEXL\n+    if (!values.filter_expression) {\n+      errors.filter_expression = 'Filter expression cannot be empty.';\n+    } else {\n+      const jexlEnvironment = new JexlEnvironment({});\n+      try {\n+        await jexlEnvironment.eval(values.filter_expression);\n+      } catch (err) {\n+        errors.filter_expression = err.toString();\n       }\n     }\n \n-    return errors;\n-  };\n-\n-  const onSubmitFail = errors => {\n-    const { dispatch } = props;\n-    const actionFormErrors = errors.arguments;\n+    // Throw if we found any errors.\n+    if (Object.keys(errors).length > 0) {\n+      throw errors;\n+    }\n+  },\n+\n+  onSubmit(values, dispatch, { recipeId, updateRecipe, addRecipe }) {\n+    // Filter out unwanted keys for submission.\n+    const recipe = _.pick(values, [", "body_text": "How do you feel about changing import _ from 'underscore' to import { pick } from 'underscore', and just going with ... = pick(values, ...?\nIf we ever switch to Webpack 2, this would drop the bundle size after tree shaking", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/310", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/87489991", "created_at": "2016-11-10T21:32:27Z", "author_association": "CONTRIBUTOR", "body": "How do you feel about changing `import _ from 'underscore'` to `import { pick } from 'underscore'`, and just going with `... = pick(values, ...`?\n\nIf we ever switch to Webpack 2, this would drop the bundle size after tree shaking\n", "updated_at": "2016-11-11T19:28:10Z", "html_url": "https://github.com/mozilla/normandy/pull/310#discussion_r87489991", "pull_request_review_id": 8101104, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/87489991"}, "html": {"href": "https://github.com/mozilla/normandy/pull/310#discussion_r87489991"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/310"}}, "commit_id": "e8ed5f77d050d91fd1edf0e7161b5b917be250e8", "user": {"following_url": "https://api.github.com/users/andymikulski/following{/other_user}", "events_url": "https://api.github.com/users/andymikulski/events{/privacy}", "organizations_url": "https://api.github.com/users/andymikulski/orgs", "url": "https://api.github.com/users/andymikulski", "gists_url": "https://api.github.com/users/andymikulski/gists{/gist_id}", "html_url": "https://github.com/andymikulski", "subscriptions_url": "https://api.github.com/users/andymikulski/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/2767162?v=4", "repos_url": "https://api.github.com/users/andymikulski/repos", "received_events_url": "https://api.github.com/users/andymikulski/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/andymikulski/starred{/owner}{/repo}", "site_admin": false, "login": "andymikulski", "type": "User", "id": 2767162, "followers_url": "https://api.github.com/users/andymikulski/followers"}, "position": null, "path": "client/control/components/RecipeForm.js", "body_html": "<p>How do you feel about changing <code>import _ from 'underscore'</code> to <code>import { pick } from 'underscore'</code>, and just going with <code>... = pick(values, ...</code>?</p>\n<p>If we ever switch to Webpack 2, this would drop the bundle size after tree shaking</p>", "original_commit_id": "8811b30261fd62086f3c50b96bd628f77ab41c60", "id": 87489991}