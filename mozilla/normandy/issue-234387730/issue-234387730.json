{"body_text": "STR:\n\nOpen about:config and create a new preference with any value. This means the default branch has no value for the pref, and the user branch has your custom value.\nCreate a preference experiment for that preference. Choose the default branch for the experiment.\nExecute the recipe.\n\nExpected: The behavior described in #797; either the user is enrolled and the default value changes, or, if that issue is fixed, then the user should not be enrolled.\nActual: An error is logged to the console:\n1496851566572\textensions.shield-recipe-client.recipe-runner\tERROR\tCould not execute recipe asdfa:: Error: Component returned failure code: 0x8000ffff (NS_ERROR_UNEXPECTED) [nsIPrefBranch.getIntPref] (resource://shield-recipe-client/lib/ActionSandboxManager.jsm:81:13) JS Stack trace: runAsyncCallback@ActionSandboxManager.jsm:81:13\n\nPretty sure this is due to how Preferences.jsm fetches preferences; it checks their type using the nsPrefBranch instance it wraps, and then calls one of the getters. I think the type check is returning the type of the user-set preference, which makes Preferences.jsm skip the logic for returning a default value if a value doesn't exist, and the getters all throw errors if the preference doesn't exist.", "labels": [{"url": "https://api.github.com/repos/mozilla/normandy/labels/bug", "color": "b60205", "default": true, "id": 482996638, "name": "bug"}], "number": 798, "assignee": null, "repository_url": "https://api.github.com/repos/mozilla/normandy", "closed_at": "2018-01-30T20:13:00Z", "body_html": "<p>STR:</p>\n<ol>\n<li>Open about:config and create a new preference with any value. This means the default branch has no value for the pref, and the user branch has your custom value.</li>\n<li>Create a preference experiment for that preference. Choose the default branch for the experiment.</li>\n<li>Execute the recipe.</li>\n</ol>\n<p>Expected: The behavior described in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"234386034\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/mozilla/normandy/issues/797\" href=\"https://github.com/mozilla/normandy/issues/797\">#797</a>; either the user is enrolled and the default value changes, or, if that issue is fixed, then the user should not be enrolled.</p>\n<p>Actual: An error is logged to the console:</p>\n<pre><code>1496851566572\textensions.shield-recipe-client.recipe-runner\tERROR\tCould not execute recipe asdfa:: Error: Component returned failure code: 0x8000ffff (NS_ERROR_UNEXPECTED) [nsIPrefBranch.getIntPref] (resource://shield-recipe-client/lib/ActionSandboxManager.jsm:81:13) JS Stack trace: runAsyncCallback@ActionSandboxManager.jsm:81:13\n</code></pre>\n<p>Pretty sure this is due to how Preferences.jsm fetches preferences; it checks their type using the nsPrefBranch instance it wraps, and then calls one of the getters. I think the type check is returning the type of the user-set preference, which makes Preferences.jsm skip the logic for returning a default value if a value doesn't exist, and the getters all throw errors if the preference doesn't exist.</p>", "id": 234387730, "title": "Error when running default-branch preference experiments with no default value", "comments": 1, "state": "closed", "body": "STR:\r\n\r\n1. Open about:config and create a new preference with any value. This means the default branch has no value for the pref, and the user branch has your custom value.\r\n2. Create a preference experiment for that preference. Choose the default branch for the experiment.\r\n3. Execute the recipe.\r\n\r\nExpected: The behavior described in #797; either the user is enrolled and the default value changes, or, if that issue is fixed, then the user should not be enrolled.\r\n\r\nActual: An error is logged to the console:\r\n\r\n```\r\n1496851566572\textensions.shield-recipe-client.recipe-runner\tERROR\tCould not execute recipe asdfa:: Error: Component returned failure code: 0x8000ffff (NS_ERROR_UNEXPECTED) [nsIPrefBranch.getIntPref] (resource://shield-recipe-client/lib/ActionSandboxManager.jsm:81:13) JS Stack trace: runAsyncCallback@ActionSandboxManager.jsm:81:13\r\n```\r\n\r\nPretty sure this is due to how Preferences.jsm fetches preferences; it checks their type using the nsPrefBranch instance it wraps, and then calls one of the getters. I think the type check is returning the type of the user-set preference, which makes Preferences.jsm skip the logic for returning a default value if a value doesn't exist, and the getters all throw errors if the preference doesn't exist.", "events_url": "https://api.github.com/repos/mozilla/normandy/issues/798/events", "labels_url": "https://api.github.com/repos/mozilla/normandy/issues/798/labels{/name}", "author_association": "MEMBER", "comments_url": "https://api.github.com/repos/mozilla/normandy/issues/798/comments", "html_url": "https://github.com/mozilla/normandy/issues/798", "updated_at": "2018-01-30T20:13:01Z", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "milestone": null, "locked": false, "url": "https://api.github.com/repos/mozilla/normandy/issues/798", "created_at": "2017-06-08T01:37:14Z", "assignees": []}