{"original_position": 205, "diff_hunk": "@@ -119,42 +99,97 @@ def history(self, request, pk=None):\n         serializer = RecipeVersionSerializer(versions, many=True, context={'request': request})\n         return Response(serializer.data)\n \n-    @transaction.atomic()\n-    @reversion.create_revision()\n+    @reversion_transaction\n     @detail_route(methods=['POST'])\n-    def approve(self, request, pk=None):\n+    def enable(self, request, pk=None):\n         recipe = self.get_object()\n-\n-        if recipe.is_approved:\n-            return Response({'approver': 'This recipe is already approved.'},\n-                            status=status.HTTP_400_BAD_REQUEST)\n-        recipe.approver = request.user\n+        recipe.enable()\n         recipe.save()\n-\n         return Response(status=status.HTTP_204_NO_CONTENT)\n \n-    @transaction.atomic()\n-    @reversion.create_revision()\n+    @reversion_transaction\n     @detail_route(methods=['POST'])\n-    def enable(self, request, pk=None):\n+    def disable(self, request, pk=None):\n         recipe = self.get_object()\n+        recipe.disable()\n+        recipe.save()\n+        return Response(status=status.HTTP_204_NO_CONTENT)\n \n-        try:\n-            recipe.enable()\n-        except recipe.IsNotApproved:\n-            return Response({'is_approved': 'This recipe cannot be enabled until it is approved.'},\n+    @detail_route(methods=['GET'])\n+    def approval_requests(self, request, pk=None):\n+        recipe = self.get_object()\n+        serializer = ApprovalRequestSerializer(recipe.approval_requests, many=True)\n+        return Response(serializer.data)\n+\n+\n+class ApprovalRequestViewSet(UpdateOrCreateModelViewSet):\n+    queryset = ApprovalRequest.objects.all()\n+    serializer_class = ApprovalRequestSerializer\n+    filter_fields = ('active',)\n+    permission_classes = [\n+        permissions.DjangoModelPermissionsOrAnonReadOnly,\n+        AdminEnabledOrReadOnly,\n+    ]\n+\n+    def handle_exception(self, exc):\n+        if isinstance(exc, ApprovalRequest.ActiveRequestAlreadyExists):\n+            return Response(\n+                {'active': 'You can only have one open approval request for a recipe.'},\n+                status=status.HTTP_400_BAD_REQUEST)\n+        elif isinstance(exc, ApprovalRequest.IsNotActive):\n+            return Response({'active': 'This approval request has already been closed.'},\n                             status=status.HTTP_400_BAD_REQUEST)\n-        else:\n-            return Response(status=status.HTTP_204_NO_CONTENT)\n \n-    @transaction.atomic()\n-    @reversion.create_revision()\n+        return super().handle_exception(exc)\n+\n+    @reversion_transaction\n+    def create(self, request, *args, **kwargs):\n+        return super().create(request, *args, **kwargs)\n+\n+    @reversion_transaction\n+    def update(self, request, *args, **kwargs):\n+        return super().update(request, *args, **kwargs)\n+\n+    @reversion_transaction\n     @detail_route(methods=['POST'])\n-    def disable(self, request, pk=None):\n-        recipe = self.get_object()\n-        recipe.disable()\n+    def approve(self, request, pk=None):\n+        approval_request = self.get_object()\n+        approval_request.approve(request.user)\n+        return Response(status=status.HTTP_204_NO_CONTENT)\n+\n+    @detail_route(methods=['POST'])\n+    def reject(self, request, pk=None):\n+        approval_request = self.get_object()\n+        approval_request.reject()\n         return Response(status=status.HTTP_204_NO_CONTENT)\n \n+    @detail_route(methods=['POST'])\n+    def comment(self, request, pk=None):\n+        if 'text' not in request.data:", "body_text": "Oh, no I forgot to try that. I'll do that right now.", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/141", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/63798476", "created_at": "2016-05-18T23:04:27Z", "author_association": "MEMBER", "body": "Oh, no I forgot to try that. I'll do that right now.\n", "updated_at": "2016-05-18T23:24:11Z", "html_url": "https://github.com/mozilla/normandy/pull/141#discussion_r63798476", "pull_request_review_id": null, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/63798476"}, "html": {"href": "https://github.com/mozilla/normandy/pull/141#discussion_r63798476"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/141"}}, "commit_id": "9976e74f22df740700d6c9a9d3a6ec3dff91e30e", "user": {"following_url": "https://api.github.com/users/rehandalal/following{/other_user}", "events_url": "https://api.github.com/users/rehandalal/events{/privacy}", "organizations_url": "https://api.github.com/users/rehandalal/orgs", "url": "https://api.github.com/users/rehandalal", "gists_url": "https://api.github.com/users/rehandalal/gists{/gist_id}", "html_url": "https://github.com/rehandalal", "subscriptions_url": "https://api.github.com/users/rehandalal/subscriptions", "avatar_url": "https://avatars2.githubusercontent.com/u/987136?v=4", "repos_url": "https://api.github.com/users/rehandalal/repos", "received_events_url": "https://api.github.com/users/rehandalal/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/rehandalal/starred{/owner}{/repo}", "site_admin": false, "login": "rehandalal", "type": "User", "id": 987136, "followers_url": "https://api.github.com/users/rehandalal/followers"}, "position": null, "path": "normandy/recipes/api/views.py", "body_html": "<p>Oh, no I forgot to try that. I'll do that right now.</p>", "original_commit_id": "16fb57ea9b0c0b3ce15b85da7641967ebb0168b8", "id": 63798476}