{"original_position": 117, "diff_hunk": "@@ -0,0 +1,133 @@\n+/* This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n+\"use strict\";\n+\n+const {utils: Cu} = Components;\n+Cu.import(\"resource://gre/modules/Services.jsm\");\n+Cu.import(\"resource://gre/modules/XPCOMUtils.jsm\");\n+\n+XPCOMUtils.defineLazyModuleGetter(\n+  this, \"AppConstants\", \"resource://gre/modules/AppConstants.jsm\"\n+);\n+XPCOMUtils.defineLazyModuleGetter(\n+  this, \"CleanupManager\", \"resource://shield-recipe-client/lib/CleanupManager.jsm\"\n+);\n+\n+this.EXPORTED_SYMBOLS = [\"ShieldPreferences\"];\n+\n+const XUL_NS = \"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\";\n+const NS_PREFBRANCH_PREFCHANGE_TOPIC_ID = \"nsPref:changed\"; // from modules/libpref/nsIPrefBranch.idl\n+const FHR_UPLOAD_ENABLED_PREF = \"datareporting.healthreport.uploadEnabled\";\n+const OPT_OUT_STUDIES_ENABLED_PREF = \"app.shield.optoutstudies.enabled\";\n+\n+/**\n+ * Handles Shield-specific preferences, including their UI.\n+ */\n+this.ShieldPreferences = {\n+  async init() {\n+    // Disabled outside of en-* locales temporarily (bug 1377192).\n+    // Disabled when MOZ_DATA_REPORTING is false since the FHR UI is also hidden\n+    // when data reporting is false.\n+    if (AppConstants.MOZ_DATA_REPORTING && Services.locale.getAppLocaleAsLangTag().startsWith(\"en\")) {\n+      Services.obs.addObserver(this, \"advanced-pane-loaded\");\n+      Services.prefs.addObserver(FHR_UPLOAD_ENABLED_PREF, this);\n+\n+      CleanupManager.addCleanupHandler(() => {\n+        Services.obs.removeObserver(this, \"advanced-pane-loaded\");\n+        Services.prefs.removeObserver(FHR_UPLOAD_ENABLED_PREF, this);\n+      });\n+    }\n+  },\n+\n+  observe(subject, topic, data) {\n+    switch (topic) {\n+      // Add the opt-out-study checkbox to the Privacy preferences when it is shown.\n+      case \"advanced-pane-loaded\":\n+        if (!Services.prefs.getBoolPref(\"browser.preferences.useOldOrganization\", false)) {\n+          const checkbox = new this.OptOutStudyCheckbox(subject.document);\n+          checkbox.inject();\n+        }\n+        break;\n+      // If the FHR pref changes, set the opt-out-study pref to the value it is changing to.\n+      case NS_PREFBRANCH_PREFCHANGE_TOPIC_ID:\n+        if (data === FHR_UPLOAD_ENABLED_PREF) {\n+          const fhrUploadEnabled = Services.prefs.getBoolPref(FHR_UPLOAD_ENABLED_PREF);\n+          Services.prefs.setBoolPref(OPT_OUT_STUDIES_ENABLED_PREF, fhrUploadEnabled);\n+        }\n+        break;\n+    }\n+  },\n+\n+  /**\n+   * Injects the opt-out-study preference checkbox into about:preferences and\n+   * handles events coming from the UI for it.\n+   */\n+  OptOutStudyCheckbox: class {\n+    constructor(document) {\n+      this.document = document;\n+      this.refs = {};\n+\n+      const container = this.refs.container = document.createElementNS(XUL_NS, \"vbox\");\n+      container.classList.add(\"indent\");\n+\n+      const hContainer = this.refs.hContainer = document.createElementNS(XUL_NS, \"hbox\");\n+      hContainer.setAttribute(\"align\", \"center\");\n+      container.appendChild(hContainer);\n+\n+      const checkbox = this.refs.checkbox = document.createElementNS(XUL_NS, \"checkbox\");\n+      checkbox.setAttribute(\"id\", \"optOutStudiesEnabled\");\n+      checkbox.setAttribute(\"label\", \"Allow Firefox to install and run studies\");\n+      checkbox.setAttribute(\"preference\", OPT_OUT_STUDIES_ENABLED_PREF);\n+      checkbox.setAttribute(\"checked\", Services.prefs.getBoolPref(OPT_OUT_STUDIES_ENABLED_PREF));\n+      checkbox.setAttribute(\"disabled\", !Services.prefs.getBoolPref(FHR_UPLOAD_ENABLED_PREF));\n+      hContainer.appendChild(checkbox);\n+\n+      const viewStudies = this.refs.viewStudies = document.createElementNS(XUL_NS, \"label\");\n+      viewStudies.setAttribute(\"id\", \"viewShieldStudies\");\n+      viewStudies.textContent = \"View Firefox Studies\";\n+      viewStudies.classList.add(\"learnMore\", \"text-link\");\n+      viewStudies.addEventListener(\"click\", this);\n+      hContainer.appendChild(viewStudies);\n+\n+      // <prefrence> elements for prefs that we need to monitor while the page is open.\n+      const optOutPref = this.refs.optOutPref = document.createElementNS(XUL_NS, \"preference\");\n+      optOutPref.setAttribute(\"id\", OPT_OUT_STUDIES_ENABLED_PREF);\n+      optOutPref.setAttribute(\"name\", OPT_OUT_STUDIES_ENABLED_PREF);\n+      optOutPref.setAttribute(\"type\", \"bool\");\n+\n+      // Weirdly, FHR doesn't have a <preference> element on the page, so we create it.\n+      const fhrPref = this.refs.fhrPref = document.createElementNS(XUL_NS, \"preference\");\n+      fhrPref.setAttribute(\"id\", FHR_UPLOAD_ENABLED_PREF);\n+      fhrPref.setAttribute(\"name\", FHR_UPLOAD_ENABLED_PREF);\n+      fhrPref.setAttribute(\"type\", \"bool\");\n+      fhrPref.addEventListener(\"change\", this);\n+    }\n+\n+    inject() {\n+      const parent = this.document.getElementById(\"submitHealthReportBox\").closest(\"vbox\");\n+      parent.appendChild(this.refs.container);\n+\n+      const preferences = this.document.getElementById(\"privacyPreferences\");\n+      preferences.appendChild(this.refs.optOutPref);\n+      preferences.appendChild(this.refs.fhrPref);\n+    }\n+\n+    remove() {\n+      this.refs.container.remove();", "body_text": "remove is a leftover I forgot to remove.\n\nSo I'm nervous here because fhrPref has a change listener which points to this object, it's a JSM so it stays alive ~forever, and because the object keeps DOM references it will keep the window alive.\n\nThe references are to the OptOutStudyCheckbox object, not the JSM itself. But maybe that's not a significant difference?\n\nSo I guess we're hoping the cycle collector works well here? Should we be more defensive about ensuring this doesn't leak?\n\nYeah. Would adding an event listener to the unload event for the document element be a good way to detect when it's time to clean up?", "in_reply_to_id": 130218490, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/938", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/130225973", "created_at": "2017-07-29T18:35:21Z", "author_association": "MEMBER", "body": "`remove` is a leftover I forgot to remove.\r\n\r\n> So I'm nervous here because fhrPref has a change listener which points to this object, it's a JSM so it stays alive ~forever, and because the object keeps DOM references it will keep the window alive.\r\n\r\nThe references are to the OptOutStudyCheckbox object, not the JSM itself. But maybe that's not a significant difference?\r\n\r\n\r\n\r\n> So I guess we're hoping the cycle collector works well here? Should we be more defensive about ensuring this doesn't leak?\r\n\r\nYeah. Would adding an event listener to the `unload` event for the `document` element be a good way to detect when it's time to clean up?", "updated_at": "2017-08-08T20:07:34Z", "html_url": "https://github.com/mozilla/normandy/pull/938#discussion_r130225973", "pull_request_review_id": 53081415, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/130225973"}, "html": {"href": "https://github.com/mozilla/normandy/pull/938#discussion_r130225973"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/938"}}, "commit_id": "b057e9026915ddfa6f4ef93147a888f34bb2aba1", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "position": null, "path": "recipe-client-addon/lib/ShieldPreferences.jsm", "body_html": "<p><code>remove</code> is a leftover I forgot to remove.</p>\n<blockquote>\n<p>So I'm nervous here because fhrPref has a change listener which points to this object, it's a JSM so it stays alive ~forever, and because the object keeps DOM references it will keep the window alive.</p>\n</blockquote>\n<p>The references are to the OptOutStudyCheckbox object, not the JSM itself. But maybe that's not a significant difference?</p>\n<blockquote>\n<p>So I guess we're hoping the cycle collector works well here? Should we be more defensive about ensuring this doesn't leak?</p>\n</blockquote>\n<p>Yeah. Would adding an event listener to the <code>unload</code> event for the <code>document</code> element be a good way to detect when it's time to clean up?</p>", "original_commit_id": "8bdd2c8556f5399ba2f373a6ffa54a6e95efa229", "id": 130225973}