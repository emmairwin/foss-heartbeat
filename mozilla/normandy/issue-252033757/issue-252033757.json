{"body_text": "Note: This is something that has been discussed previously, but I feel needs an actual ticket to track these issues.\n\nCurrently, we reload the recipe/extension listing pages every time the user navigates to them. We designed the system this way to prevent stale data from appearing as the latest data. However, this leads us into some UX issues:\n\nRecipes landing page takes an average of ~3.4s to load (tracking the fetchFilteredRecipesPage call)\n\nFor reference, 100ms is considered the threshold between whether a user can notice a delay or not\nAlso note, this is when viewing a listing page without any filters applied at all\n\n\nUI hangs during loading\n\nThis prevents clicking ANY interface element until the app is ready.\n\n\n\nThis UX is pretty subpar IMO - navigating between multiple recipes takes 5s+, even with recently viewed links in the nav (#982)\nThings to investigate:\n\nHandling _RECEIVED actions in bulk\n\nCurrently, hitting the recipes list causes a bunch of [RECIPE|REVISION]_RECEIVED actions to fire. I suspect that the approach of iterating over each action plus the use of redux-logger to console.log reduced actions is causing a considerable chunk of the slowdown.\nThere are several redux things we can experiment with, IMO the easiest way is to simply add a RECIPE_BULK_RECEIVED or similar, which would update the redux stores in one fell swoop (versus looping over an array and dispatching a bunch).\n\n\nCaching API results\n\nSince we want to ensure the data is fresh, caching seems like something that's off the table. However, if we could do something like assign a hash to an API response, we could use that for cachebusting.\nEx: user loads recipe listing, gets hash abc123 back with the data. user does stuff, navigates back to recipe page, hits the hash only endpoint to see that the hash is now bcd345, which means it should request the full lookup.\nWith this approach, we at least remove the need for waiting for the listing call to respond, and keep data fresh.\n\n\n\nI'm open to ideas on how to approach this, but IMO looking at the redux side of things may help with a good chunk of the slow down.", "labels": [], "number": 996, "assignee": {"following_url": "https://api.github.com/users/andymikulski/following{/other_user}", "events_url": "https://api.github.com/users/andymikulski/events{/privacy}", "organizations_url": "https://api.github.com/users/andymikulski/orgs", "url": "https://api.github.com/users/andymikulski", "gists_url": "https://api.github.com/users/andymikulski/gists{/gist_id}", "html_url": "https://github.com/andymikulski", "subscriptions_url": "https://api.github.com/users/andymikulski/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/2767162?v=4", "repos_url": "https://api.github.com/users/andymikulski/repos", "received_events_url": "https://api.github.com/users/andymikulski/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/andymikulski/starred{/owner}{/repo}", "site_admin": false, "login": "andymikulski", "type": "User", "id": 2767162, "followers_url": "https://api.github.com/users/andymikulski/followers"}, "repository_url": "https://api.github.com/repos/mozilla/normandy", "closed_at": "2017-09-21T18:46:45Z", "body_html": "<blockquote>\n<p>Note: This is something that has been discussed previously, but I feel needs an actual ticket to track these issues.</p>\n</blockquote>\n<p>Currently, we reload the recipe/extension listing pages every time the user navigates to them. We designed the system this way to prevent stale data from appearing as the latest data. However, this leads us into some UX issues:</p>\n<ul>\n<li>Recipes landing page takes an average of <strong>~3.4s</strong> to load (tracking the <code>fetchFilteredRecipesPage</code> call)\n<ul>\n<li>For reference, 100ms is considered the threshold between whether a user can notice a delay or not</li>\n<li>Also note, this is when viewing a listing page without any filters applied at all</li>\n</ul>\n</li>\n<li>UI hangs during loading\n<ul>\n<li>This prevents clicking ANY interface element until the app is ready.</li>\n</ul>\n</li>\n</ul>\n<p>This UX is pretty subpar IMO - navigating between multiple recipes takes 5s+, even with recently viewed links in the nav (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"250087671\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/mozilla/normandy/issues/982\" href=\"https://github.com/mozilla/normandy/issues/982\">#982</a>)</p>\n<p>Things to investigate:</p>\n<ul>\n<li>Handling <code>_RECEIVED</code> actions in bulk\n<ul>\n<li>Currently, hitting the recipes list causes a bunch of <code>[RECIPE|REVISION]_RECEIVED</code> actions to fire. I suspect that the approach of iterating over each action plus the use of redux-logger to console.log reduced actions is causing a considerable chunk of the slowdown.</li>\n<li>There are several redux things we can experiment with, IMO the easiest way is to simply add a <code>RECIPE_BULK_RECEIVED</code> or similar, which would update the redux stores in one fell swoop (versus looping over an array and <code>dispatch</code>ing a bunch).</li>\n</ul>\n</li>\n<li>Caching API results\n<ul>\n<li>Since we want to ensure the data is fresh, caching seems like something that's off the table. However, if we could do something like assign a hash to an API response, we could use that for cachebusting.</li>\n<li>Ex: user loads recipe listing, gets hash <code>abc123</code> back with the data. user does stuff, navigates back to recipe page, hits the <em>hash only</em> endpoint to see that the hash is now <code>bcd345</code>, which means it should request the full lookup.</li>\n<li>With this approach, we at least remove the need for waiting for the listing call to respond, and keep data fresh.</li>\n</ul>\n</li>\n</ul>\n<p>I'm open to ideas on how to approach this, but IMO looking at the redux side of things may help with a good chunk of the slow down.</p>", "id": 252033757, "title": "Listing Pages: Long load times", "comments": 5, "state": "closed", "body": ">Note: This is something that has been discussed previously, but I feel needs an actual ticket to track these issues.\r\n\r\nCurrently, we reload the recipe/extension listing pages every time the user navigates to them. We designed the system this way to prevent stale data from appearing as the latest data. However, this leads us into some UX issues:\r\n\r\n- Recipes landing page takes an average of **~3.4s** to load (tracking the `fetchFilteredRecipesPage` call)\r\n  - For reference, 100ms is considered the threshold between whether a user can notice a delay or not\r\n  - Also note, this is when viewing a listing page without any filters applied at all\r\n- UI hangs during loading\r\n  - This prevents clicking ANY interface element until the app is ready.\r\n\r\nThis UX is pretty subpar IMO - navigating between multiple recipes takes 5s+, even with recently viewed links in the nav (#982)\r\n\r\nThings to investigate:\r\n- Handling `_RECEIVED` actions in bulk\r\n  - Currently, hitting the recipes list causes a bunch of `[RECIPE|REVISION]_RECEIVED` actions to fire. I suspect that the approach of iterating over each action plus the use of redux-logger to console.log reduced actions is causing a considerable chunk of the slowdown.\r\n  - There are several redux things we can experiment with, IMO the easiest way is to simply add a `RECIPE_BULK_RECEIVED` or similar, which would update the redux stores in one fell swoop (versus looping over an array and `dispatch`ing a bunch).\r\n- Caching API results\r\n  - Since we want to ensure the data is fresh, caching seems like something that's off the table. However, if we could do something like assign a hash to an API response, we could use that for cachebusting.\r\n  - Ex: user loads recipe listing, gets hash `abc123` back with the data. user does stuff, navigates back to recipe page, hits the _hash only_ endpoint to see that the hash is now `bcd345`, which means it should request the full lookup.\r\n  - With this approach, we at least remove the need for waiting for the listing call to respond, and keep data fresh.\r\n\r\nI'm open to ideas on how to approach this, but IMO looking at the redux side of things may help with a good chunk of the slow down. ", "events_url": "https://api.github.com/repos/mozilla/normandy/issues/996/events", "labels_url": "https://api.github.com/repos/mozilla/normandy/issues/996/labels{/name}", "author_association": "CONTRIBUTOR", "comments_url": "https://api.github.com/repos/mozilla/normandy/issues/996/comments", "html_url": "https://github.com/mozilla/normandy/issues/996", "updated_at": "2017-09-21T18:46:45Z", "user": {"following_url": "https://api.github.com/users/andymikulski/following{/other_user}", "events_url": "https://api.github.com/users/andymikulski/events{/privacy}", "organizations_url": "https://api.github.com/users/andymikulski/orgs", "url": "https://api.github.com/users/andymikulski", "gists_url": "https://api.github.com/users/andymikulski/gists{/gist_id}", "html_url": "https://github.com/andymikulski", "subscriptions_url": "https://api.github.com/users/andymikulski/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/2767162?v=4", "repos_url": "https://api.github.com/users/andymikulski/repos", "received_events_url": "https://api.github.com/users/andymikulski/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/andymikulski/starred{/owner}{/repo}", "site_admin": false, "login": "andymikulski", "type": "User", "id": 2767162, "followers_url": "https://api.github.com/users/andymikulski/followers"}, "milestone": null, "locked": false, "url": "https://api.github.com/repos/mozilla/normandy/issues/996", "created_at": "2017-08-22T17:34:34Z", "assignees": [{"following_url": "https://api.github.com/users/andymikulski/following{/other_user}", "events_url": "https://api.github.com/users/andymikulski/events{/privacy}", "organizations_url": "https://api.github.com/users/andymikulski/orgs", "url": "https://api.github.com/users/andymikulski", "gists_url": "https://api.github.com/users/andymikulski/gists{/gist_id}", "html_url": "https://github.com/andymikulski", "subscriptions_url": "https://api.github.com/users/andymikulski/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/2767162?v=4", "repos_url": "https://api.github.com/users/andymikulski/repos", "received_events_url": "https://api.github.com/users/andymikulski/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/andymikulski/starred{/owner}{/repo}", "site_admin": false, "login": "andymikulski", "type": "User", "id": 2767162, "followers_url": "https://api.github.com/users/andymikulski/followers"}]}