{"original_position": 68, "diff_hunk": "@@ -152,17 +154,45 @@ add_task(async function testStart() {\n     [\"extensions.shield-recipe-client.experiments.lazy_classify\", false],\n   ]});\n   ok(!getStub.called, \"getClientClassification hasn't been called\");\n-  await RecipeRunner.start();\n-  ok(getStub.called, \"getClientClassfication was called eagerly\");\n+  await RecipeRunner.run();\n+  ok(getStub.called, \"getClientClassification was called eagerly\");\n \n   // When the experiment pref is true, do not eagerly call getClientClassification.\n   await SpecialPowers.pushPrefEnv({set: [\n     [\"extensions.shield-recipe-client.experiments.lazy_classify\", true],\n   ]});\n   getStub.reset();\n   ok(!getStub.called, \"getClientClassification hasn't been called\");\n-  await RecipeRunner.start();\n-  ok(!getStub.called, \"getClientClassfication was not called eagerly\");\n+  await RecipeRunner.run();\n+  ok(!getStub.called, \"getClientClassification was not called eagerly\");\n \n   getStub.restore();\n });\n+\n+add_task(async function testStartup() {\n+  const runStub = sinon.stub(RecipeRunner, \"run\");\n+  const addCleanupHandlerStub = sinon.stub(CleanupManager, \"addCleanupHandler\");\n+  const updateRunIntervalStub = sinon.stub(RecipeRunner, \"updateRunInterval\");\n+\n+  // in dev mode\n+  await SpecialPowers.pushPrefEnv({set: [[\"extensions.shield-recipe-client.dev_mode\", true]]});\n+  RecipeRunner.init();\n+  ok(runStub.called, \"RecipeRunner.run is called immediately when in dev mode\");\n+  ok(addCleanupHandlerStub.called, \"A cleanup function is registered when in dev mode\");\n+  ok(updateRunIntervalStub.called, \"A timer is registered when in dev mode\");\n+\n+  runStub.reset();\n+  addCleanupHandlerStub.reset();\n+  updateRunIntervalStub.reset();\n+\n+  // not in dev mode\n+  await SpecialPowers.pushPrefEnv({set: [[\"extensions.shield-recipe-client.dev_mode\", false]]});\n+  RecipeRunner.init();\n+  ok(!runStub.called, \"RecipeRunner.run is not called immediately when not in dev mode\");\n+  ok(addCleanupHandlerStub.called, \"A cleanup function is registered when not in dev mode\");\n+  ok(updateRunIntervalStub.called, \"A timer is registered when not in dev mode\");\n+\n+  runStub.restore();\n+  addCleanupHandlerStub.restore();\n+  updateRunIntervalStub.restore();\n+});", "body_text": "\ud83d\udc4d", "in_reply_to_id": 111088754, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/641", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/111209090", "created_at": "2017-04-12T17:16:14Z", "author_association": "MEMBER", "body": ":+1:", "updated_at": "2017-04-12T17:16:14Z", "html_url": "https://github.com/mozilla/normandy/pull/641#discussion_r111209090", "pull_request_review_id": 32438785, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/111209090"}, "html": {"href": "https://github.com/mozilla/normandy/pull/641#discussion_r111209090"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/641"}}, "commit_id": "03a7b3e238d9a956b4deb74246b94e438e3fb490", "user": {"following_url": "https://api.github.com/users/rhelmer/following{/other_user}", "events_url": "https://api.github.com/users/rhelmer/events{/privacy}", "organizations_url": "https://api.github.com/users/rhelmer/orgs", "url": "https://api.github.com/users/rhelmer", "gists_url": "https://api.github.com/users/rhelmer/gists{/gist_id}", "html_url": "https://github.com/rhelmer", "subscriptions_url": "https://api.github.com/users/rhelmer/subscriptions", "avatar_url": "https://avatars0.githubusercontent.com/u/61412?v=4", "repos_url": "https://api.github.com/users/rhelmer/repos", "received_events_url": "https://api.github.com/users/rhelmer/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/rhelmer/starred{/owner}{/repo}", "site_admin": false, "login": "rhelmer", "type": "User", "id": 61412, "followers_url": "https://api.github.com/users/rhelmer/followers"}, "position": 68, "path": "recipe-client-addon/test/browser/browser_RecipeRunner.js", "body_html": "<p><g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji></p>", "original_commit_id": "830d2fddd36241806fb94ab705ff625cb9b0438e", "id": 111209090}