{"original_position": 114, "diff_hunk": "@@ -110,6 +165,25 @@ add_task(withMockPreferences(function* (mockPreferences) {\n   stop.restore();\n }));\n \n+// startObserver should observe changes to the default preference value.\n+add_task(withMockPreferences(function* (mockPreferences) {\n+  const stop = sinon.stub(PreferenceExperiments, \"stop\");\n+  mockPreferences.set(\"fake.preference\", \"startvalue\", \"default\");\n+\n+  PreferenceExperiments.startObserver(\"test\", \"fake.preference\", \"experimentvalue\");\n+\n+  // Setting it to the experimental value should not trigger the call.\n+  DefaultPreferences.set(\"fake.preference\", \"experimentvalue\");\n+  ok(!stop.called, \"Changing to the experimental pref value did not trigger the observer\");\n+\n+  // Setting it to something different should trigger the call.", "body_text": "Not entirely sure what we're testing here, and if it's worth testing this again once setting it back to the experiment value from the new value? Specifically, is calling startObserver expected to set the preference immediately, or is it not set until the test here calls DefaultPreferences.set ? In the latter case, I suppose testing this again would make no difference, but a comment might be nice. Otherwise, testing the correct behaviour (whatever that is) when setting the thing back to the expected experiment value would make sense.", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/670", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/110403952", "created_at": "2017-04-07T14:33:51Z", "author_association": "CONTRIBUTOR", "body": "Not entirely sure what we're testing here, and if it's worth testing this again once setting it back to the experiment value from the new value? Specifically, is calling `startObserver` expected to set the preference immediately, or is it not set until the test here calls `DefaultPreferences.set` ? In the latter case, I suppose testing this again would make no difference, but a comment might be nice. Otherwise, testing the correct behaviour (whatever that is) when setting the thing back to the expected experiment value would make sense.", "updated_at": "2017-04-12T17:17:01Z", "html_url": "https://github.com/mozilla/normandy/pull/670#discussion_r110403952", "pull_request_review_id": 31575068, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/110403952"}, "html": {"href": "https://github.com/mozilla/normandy/pull/670#discussion_r110403952"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/670"}}, "commit_id": "05a53dac8b1bbcf2a57c097190c1c7e5644f5f28", "user": {"following_url": "https://api.github.com/users/gijsk/following{/other_user}", "events_url": "https://api.github.com/users/gijsk/events{/privacy}", "organizations_url": "https://api.github.com/users/gijsk/orgs", "url": "https://api.github.com/users/gijsk", "gists_url": "https://api.github.com/users/gijsk/gists{/gist_id}", "html_url": "https://github.com/gijsk", "subscriptions_url": "https://api.github.com/users/gijsk/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/375983?v=4", "repos_url": "https://api.github.com/users/gijsk/repos", "received_events_url": "https://api.github.com/users/gijsk/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/gijsk/starred{/owner}{/repo}", "site_admin": false, "login": "gijsk", "type": "User", "id": 375983, "followers_url": "https://api.github.com/users/gijsk/followers"}, "position": 167, "path": "recipe-client-addon/test/unit/test_PreferenceExperiments.js", "body_html": "<p>Not entirely sure what we're testing here, and if it's worth testing this again once setting it back to the experiment value from the new value? Specifically, is calling <code>startObserver</code> expected to set the preference immediately, or is it not set until the test here calls <code>DefaultPreferences.set</code> ? In the latter case, I suppose testing this again would make no difference, but a comment might be nice. Otherwise, testing the correct behaviour (whatever that is) when setting the thing back to the expected experiment value would make sense.</p>", "original_commit_id": "98de402df6a46aef592a090407dae2cf4c6afe78", "id": 110403952}