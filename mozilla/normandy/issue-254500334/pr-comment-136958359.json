{"original_position": 162, "diff_hunk": "@@ -29,69 +38,146 @@ const DEFAULT_PREFS = {\n   \"app.shield.optoutstudies.enabled\": AppConstants.MOZ_DATA_REPORTING,\n };\n \n-this.install = function() {};\n-\n-this.startup = function() {\n-  // Initialize preference defaults before anything else happens.\n-  const prefBranch = Services.prefs.getDefaultBranch(\"\");\n-  for (const [name, value] of Object.entries(DEFAULT_PREFS)) {\n-    switch (typeof value) {\n-      case \"string\":\n-        prefBranch.setCharPref(name, value);\n-        break;\n-      case \"number\":\n-        prefBranch.setIntPref(name, value);\n-        break;\n-      case \"boolean\":\n-        prefBranch.setBoolPref(name, value);\n-        break;\n-      default:\n-        throw new Error(`Invalid default preference type ${typeof value}`);\n+// Logging\n+const log = Log.repository.getLogger(BOOTSTRAP_LOGGER_NAME);\n+log.addAppender(new Log.ConsoleAppender(new Log.BasicFormatter()));\n+log.level = Services.prefs.getIntPref(PREF_LOGGING_LEVEL, Log.Level.Warn);\n+\n+this.Bootstrap = {\n+  initShieldPrefs(defaultPrefs) {\n+    const prefBranch = Services.prefs.getDefaultBranch(\"\");\n+    for (const [name, value] of Object.entries(defaultPrefs)) {\n+      switch (typeof value) {\n+        case \"string\":\n+          prefBranch.setCharPref(name, value);\n+          break;\n+        case \"number\":\n+          prefBranch.setIntPref(name, value);\n+          break;\n+        case \"boolean\":\n+          prefBranch.setBoolPref(name, value);\n+          break;\n+        default:\n+          throw new Error(`Invalid default preference type ${typeof value}`);\n+      }\n     }\n-  }\n+  },\n \n-  ShieldRecipeClient.startup();\n-};\n+  initExperimentPrefs() {\n+    const defaultBranch = Services.prefs.getDefaultBranch(\"\");\n+    const experimentBranch = Services.prefs.getBranch(STARTUP_EXPERIMENT_PREFS_BRANCH);\n+\n+    for (const childPrefName of experimentBranch.getChildList(\"\")) {\n+      const realPrefName = childPrefName.slice(1); // Remove leading dot\n+      const realPrefType = defaultBranch.getPrefType(childPrefName);\n+      const experimentPrefType = experimentBranch.getPrefType(childPrefName);\n+\n+      // TODO: This never passes?\n+      if (realPrefType !== Services.prefs.PREF_INVALID && realPrefType !== experimentPrefType) {\n+        log.error(`Error setting startup pref ${childPrefName}; pref type does not match.`);\n+        continue;\n+      }\n+\n+      switch (experimentPrefType) {\n+        case Services.prefs.PREF_STRING:\n+          defaultBranch.setCharPref(realPrefName, experimentBranch.getCharPref(childPrefName));\n+          break;\n+\n+        case Services.prefs.PREF_INT:\n+          defaultBranch.setIntPref(realPrefName, experimentBranch.getIntPref(childPrefName));\n+          break;\n+\n+        case Services.prefs.PREF_BOOL:\n+          defaultBranch.setBoolPref(realPrefName, experimentBranch.getBoolPref(childPrefName));\n+          break;\n+\n+        case Services.prefs.PREF_INVALID:\n+          // This should never happen.\n+          log.error(`Error setting startup pref ${childPrefName}; pref type is invalid (${experimentPrefType}).`);\n+          break;\n+\n+        default:\n+          // This should never happen either.\n+          log.error(`Error getting startup pref ${childPrefName}; unknown value type ${experimentPrefType}.`);\n+      }\n+    }\n+  },\n+\n+  observe(subject, topic, data) {\n+    if (topic === UI_AVAILABLE_NOTIFICATION) {\n+      Services.obs.removeObserver(this, UI_AVAILABLE_NOTIFICATION);\n+      ShieldRecipeClient.startup();\n+    }\n+  },\n+\n+  install() {\n+    // Nothing to do during install\n+  },\n+\n+  startup(data, reason) {\n+    // Initialization that needs to happen before the first paint on startup.\n+    this.initShieldPrefs(DEFAULT_PREFS);\n+    this.initExperimentPrefs();\n+\n+    // If the app is starting up, wait until the UI is available before finishing\n+    // init.\n+    if (reason === REASON_APP_STARTUP) {\n+      Services.obs.addObserver(this, UI_AVAILABLE_NOTIFICATION);\n+    } else {\n+      ShieldRecipeClient.startup();\n+    }\n+  },\n+\n+  async shutdown(data, reason) {\n+    // Wait for async write operations during shutdown before unloading modules.\n+    await ShieldRecipeClient.shutdown(reason);\n+\n+    // In case the observer didn't run, clean it up.\n+    Services.obs.removeObserver(this, UI_AVAILABLE_NOTIFICATION);\n+\n+    // Unload add-on modules. We don't do this in ShieldRecipeClient so that\n+    // modules are not unloaded accidentally during tests.\n+    let modules = [\n+      \"lib/ActionSandboxManager.jsm\",\n+      \"lib/Addons.jsm\",\n+      \"lib/AddonStudies.jsm\",\n+      \"lib/CleanupManager.jsm\",\n+      \"lib/ClientEnvironment.jsm\",\n+      \"lib/FilterExpressions.jsm\",\n+      \"lib/EventEmitter.jsm\",\n+      \"lib/Heartbeat.jsm\",\n+      \"lib/LogManager.jsm\",\n+      \"lib/NormandyApi.jsm\",\n+      \"lib/NormandyDriver.jsm\",\n+      \"lib/PreferenceExperiments.jsm\",\n+      \"lib/RecipeRunner.jsm\",\n+      \"lib/Sampling.jsm\",\n+      \"lib/SandboxManager.jsm\",\n+      \"lib/ShieldPreferences.jsm\",\n+      \"lib/ShieldRecipeClient.jsm\",\n+      \"lib/Storage.jsm\",\n+      \"lib/Uptake.jsm\",\n+      \"lib/Utils.jsm\",\n+    ].map(m => `resource://shield-recipe-client/${m}`);\n+    modules = modules.concat([", "body_text": "I know you're just moving this, but I think this would be easier to read and faster if written as:\nmodules.push(\n   \"resource://shield-recipe-client-content/AboutPages.jsm\",\n   \"resource://shield-recipe-client-vendor/mozjexl.js\"\n);", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/1024", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/136958359", "created_at": "2017-09-05T11:16:03Z", "author_association": "CONTRIBUTOR", "body": "I know you're just moving this, but I think this would be easier to read and faster if written as:\r\n\r\n```js\r\nmodules.push(\r\n   \"resource://shield-recipe-client-content/AboutPages.jsm\",\r\n   \"resource://shield-recipe-client-vendor/mozjexl.js\"\r\n);\r\n```", "updated_at": "2017-09-06T17:53:07Z", "html_url": "https://github.com/mozilla/normandy/pull/1024#discussion_r136958359", "pull_request_review_id": 60565528, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/136958359"}, "html": {"href": "https://github.com/mozilla/normandy/pull/1024#discussion_r136958359"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/1024"}}, "commit_id": "8ee8084c78948533e763ec3b6aab761d3050e8d2", "user": {"following_url": "https://api.github.com/users/gijsk/following{/other_user}", "events_url": "https://api.github.com/users/gijsk/events{/privacy}", "organizations_url": "https://api.github.com/users/gijsk/orgs", "url": "https://api.github.com/users/gijsk", "gists_url": "https://api.github.com/users/gijsk/gists{/gist_id}", "html_url": "https://github.com/gijsk", "subscriptions_url": "https://api.github.com/users/gijsk/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/375983?v=4", "repos_url": "https://api.github.com/users/gijsk/repos", "received_events_url": "https://api.github.com/users/gijsk/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/gijsk/starred{/owner}{/repo}", "site_admin": false, "login": "gijsk", "type": "User", "id": 375983, "followers_url": "https://api.github.com/users/gijsk/followers"}, "position": 164, "path": "recipe-client-addon/bootstrap.js", "body_html": "<p>I know you're just moving this, but I think this would be easier to read and faster if written as:</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-smi\">modules</span>.<span class=\"pl-c1\">push</span>(\n   <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>resource://shield-recipe-client-content/AboutPages.jsm<span class=\"pl-pds\">\"</span></span>,\n   <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>resource://shield-recipe-client-vendor/mozjexl.js<span class=\"pl-pds\">\"</span></span>\n);</pre></div>", "original_commit_id": "58b432cabce9345181a304221ba3b85acd210052", "id": 136958359}