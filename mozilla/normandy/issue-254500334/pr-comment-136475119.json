{"original_position": 75, "diff_hunk": "@@ -29,69 +38,146 @@ const DEFAULT_PREFS = {\n   \"app.shield.optoutstudies.enabled\": AppConstants.MOZ_DATA_REPORTING,\n };\n \n-this.install = function() {};\n-\n-this.startup = function() {\n-  // Initialize preference defaults before anything else happens.\n-  const prefBranch = Services.prefs.getDefaultBranch(\"\");\n-  for (const [name, value] of Object.entries(DEFAULT_PREFS)) {\n-    switch (typeof value) {\n-      case \"string\":\n-        prefBranch.setCharPref(name, value);\n-        break;\n-      case \"number\":\n-        prefBranch.setIntPref(name, value);\n-        break;\n-      case \"boolean\":\n-        prefBranch.setBoolPref(name, value);\n-        break;\n-      default:\n-        throw new Error(`Invalid default preference type ${typeof value}`);\n+// Logging\n+const log = Log.repository.getLogger(BOOTSTRAP_LOGGER_NAME);\n+log.addAppender(new Log.ConsoleAppender(new Log.BasicFormatter()));\n+log.level = Services.prefs.getIntPref(PREF_LOGGING_LEVEL, Log.Level.Warn);\n+\n+this.Bootstrap = {\n+  initShieldPrefs(defaultPrefs) {\n+    const prefBranch = Services.prefs.getDefaultBranch(\"\");\n+    for (const [name, value] of Object.entries(defaultPrefs)) {\n+      switch (typeof value) {\n+        case \"string\":\n+          prefBranch.setCharPref(name, value);\n+          break;\n+        case \"number\":\n+          prefBranch.setIntPref(name, value);\n+          break;\n+        case \"boolean\":\n+          prefBranch.setBoolPref(name, value);\n+          break;\n+        default:\n+          throw new Error(`Invalid default preference type ${typeof value}`);\n+      }\n     }\n-  }\n+  },\n \n-  ShieldRecipeClient.startup();\n-};\n+  initExperimentPrefs() {\n+    const defaultBranch = Services.prefs.getDefaultBranch(\"\");\n+    const experimentBranch = Services.prefs.getBranch(STARTUP_EXPERIMENT_PREFS_BRANCH);\n+\n+    for (const childPrefName of experimentBranch.getChildList(\"\")) {\n+      const realPrefName = childPrefName.slice(1); // Remove leading dot\n+      const realPrefType = defaultBranch.getPrefType(childPrefName);\n+      const experimentPrefType = experimentBranch.getPrefType(childPrefName);\n+\n+      // TODO: This never passes?", "body_text": "For some reason, as far as I can tell, realPrefType is always 0 (PREF_INVALID) here. I marked the test as skipped just to get the suite to pass, but even if the test sets the pref value and outputs the right type before calling this function, the function still thinks the real pref doesn't exist and doesn't detect the value conflict.\nAny insight on why realPrefType has the wrong value would be appreciated.", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/1024", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/136475119", "created_at": "2017-08-31T23:58:09Z", "author_association": "MEMBER", "body": "For some reason, as far as I can tell, `realPrefType` is _always_ `0` (`PREF_INVALID`) here. I marked the test as skipped just to get the suite to pass, but even if the test sets the pref value and outputs the right type before calling this function, the function still thinks the real pref doesn't exist and doesn't detect the value conflict.\r\n\r\nAny insight on why `realPrefType` has the wrong value would be appreciated.", "updated_at": "2017-09-06T17:53:07Z", "html_url": "https://github.com/mozilla/normandy/pull/1024#discussion_r136475119", "pull_request_review_id": 60020539, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/136475119"}, "html": {"href": "https://github.com/mozilla/normandy/pull/1024#discussion_r136475119"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/1024"}}, "commit_id": "8ee8084c78948533e763ec3b6aab761d3050e8d2", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "position": null, "path": "recipe-client-addon/bootstrap.js", "body_html": "<p>For some reason, as far as I can tell, <code>realPrefType</code> is <em>always</em> <code>0</code> (<code>PREF_INVALID</code>) here. I marked the test as skipped just to get the suite to pass, but even if the test sets the pref value and outputs the right type before calling this function, the function still thinks the real pref doesn't exist and doesn't detect the value conflict.</p>\n<p>Any insight on why <code>realPrefType</code> has the wrong value would be appreciated.</p>", "original_commit_id": "58b432cabce9345181a304221ba3b85acd210052", "id": 136475119}