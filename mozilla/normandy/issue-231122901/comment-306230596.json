{"body": "You can still explicitly return a promise from an async function, try this in a console (with a window, so not node.js):\r\n\r\n```js\r\nasync function a() { return new Promise(r => setTimeout(() => r(5), 1000)) }\r\na().then(arg => console.log(arg))\r\n```\r\n\r\nwill print 5 (not 'promise' or something like that).\r\n\r\n\r\nSo, (untested)\r\n\r\n```js\r\nasync installAddon(url) {\r\n  let installObj = await AddonManager.getInstallForURL(url, null, \"application/x-xpinstall\");\r\n  installObj.install();\r\n  return new Promise((resolve, reject) => installObj.addListener({\r\n    onInstallEnded(addonInstall, addon) {\r\n      resolve(addon.id);\r\n    },\r\n    onInstallFailed(addonInstall) {\r\n      reject(`AddonInstall error code: [${addonInstall.error}]`);\r\n    },\r\n  }));\r\n}\r\n```\r\n\r\nseems like it would work?", "body_text": "You can still explicitly return a promise from an async function, try this in a console (with a window, so not node.js):\nasync function a() { return new Promise(r => setTimeout(() => r(5), 1000)) }\na().then(arg => console.log(arg))\nwill print 5 (not 'promise' or something like that).\nSo, (untested)\nasync installAddon(url) {\n  let installObj = await AddonManager.getInstallForURL(url, null, \"application/x-xpinstall\");\n  installObj.install();\n  return new Promise((resolve, reject) => installObj.addListener({\n    onInstallEnded(addonInstall, addon) {\n      resolve(addon.id);\n    },\n    onInstallFailed(addonInstall) {\n      reject(`AddonInstall error code: [${addonInstall.error}]`);\n    },\n  }));\n}\nseems like it would work?", "url": "https://api.github.com/repos/mozilla/normandy/issues/comments/306230596", "created_at": "2017-06-05T16:11:41Z", "author_association": "CONTRIBUTOR", "html_url": "https://github.com/mozilla/normandy/pull/778#issuecomment-306230596", "updated_at": "2017-06-05T16:11:41Z", "user": {"following_url": "https://api.github.com/users/gijsk/following{/other_user}", "events_url": "https://api.github.com/users/gijsk/events{/privacy}", "organizations_url": "https://api.github.com/users/gijsk/orgs", "url": "https://api.github.com/users/gijsk", "gists_url": "https://api.github.com/users/gijsk/gists{/gist_id}", "html_url": "https://github.com/gijsk", "subscriptions_url": "https://api.github.com/users/gijsk/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/375983?v=4", "repos_url": "https://api.github.com/users/gijsk/repos", "received_events_url": "https://api.github.com/users/gijsk/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/gijsk/starred{/owner}{/repo}", "site_admin": false, "login": "gijsk", "type": "User", "id": 375983, "followers_url": "https://api.github.com/users/gijsk/followers"}, "body_html": "<p>You can still explicitly return a promise from an async function, try this in a console (with a window, so not node.js):</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">a</span>() { <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Promise</span>(<span class=\"pl-smi\">r</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-c1\">setTimeout</span>(() <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">r</span>(<span class=\"pl-c1\">5</span>), <span class=\"pl-c1\">1000</span>)) }\n<span class=\"pl-en\">a</span>().<span class=\"pl-en\">then</span>(<span class=\"pl-smi\">arg</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(arg))</pre></div>\n<p>will print 5 (not 'promise' or something like that).</p>\n<p>So, (untested)</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">async</span> <span class=\"pl-en\">installAddon</span>(<span class=\"pl-smi\">url</span>) {\n  <span class=\"pl-k\">let</span> installObj <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">AddonManager</span>.<span class=\"pl-en\">getInstallForURL</span>(url, <span class=\"pl-c1\">null</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>application/x-xpinstall<span class=\"pl-pds\">\"</span></span>);\n  <span class=\"pl-smi\">installObj</span>.<span class=\"pl-en\">install</span>();\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Promise</span>((<span class=\"pl-smi\">resolve</span>, <span class=\"pl-smi\">reject</span>) <span class=\"pl-k\">=&gt;</span> <span class=\"pl-smi\">installObj</span>.<span class=\"pl-en\">addListener</span>({\n    <span class=\"pl-en\">onInstallEnded</span>(<span class=\"pl-smi\">addonInstall</span>, <span class=\"pl-smi\">addon</span>) {\n      <span class=\"pl-en\">resolve</span>(<span class=\"pl-smi\">addon</span>.<span class=\"pl-c1\">id</span>);\n    },\n    <span class=\"pl-en\">onInstallFailed</span>(<span class=\"pl-smi\">addonInstall</span>) {\n      <span class=\"pl-en\">reject</span>(<span class=\"pl-s\"><span class=\"pl-pds\">`</span>AddonInstall error code: [<span class=\"pl-s1\"><span class=\"pl-pse\">${</span><span class=\"pl-smi\">addonInstall</span>.<span class=\"pl-smi\">error</span><span class=\"pl-pse\">}</span></span>]<span class=\"pl-pds\">`</span></span>);\n    },\n  }));\n}</pre></div>\n<p>seems like it would work?</p>", "id": 306230596, "issue_url": "https://api.github.com/repos/mozilla/normandy/issues/778"}