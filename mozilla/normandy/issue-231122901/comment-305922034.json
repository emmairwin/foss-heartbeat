{"body": "> I could be wrong, because async functions are pretty new beasts, but my understanding is that there's no observable difference from the caller's perspective between an async function and a non-async function that returns a promise -- running either without await returns a promise, and you can then await or .then() the promise. It's just less boilerplate to write an async function than function() { return new Promise(resolve => { ... }); }, and of course you can use await inside an async function and can't inside a non-async argument function to the Promise constructor.\r\n\r\nYep.\r\n\r\nThe current guidelines for the shield-recipe-client is to prefer async/await functions over Promises where possible. The driver uses Promises directly mostly because it's using Promises from the sandbox to allow for sandbox code to access `then` and use `await` properly. Eventually we should port the rest of the driver functions to use `SandboxManager.wrapAsync` instead of using Promises directly.", "body_text": "I could be wrong, because async functions are pretty new beasts, but my understanding is that there's no observable difference from the caller's perspective between an async function and a non-async function that returns a promise -- running either without await returns a promise, and you can then await or .then() the promise. It's just less boilerplate to write an async function than function() { return new Promise(resolve => { ... }); }, and of course you can use await inside an async function and can't inside a non-async argument function to the Promise constructor.\n\nYep.\nThe current guidelines for the shield-recipe-client is to prefer async/await functions over Promises where possible. The driver uses Promises directly mostly because it's using Promises from the sandbox to allow for sandbox code to access then and use await properly. Eventually we should port the rest of the driver functions to use SandboxManager.wrapAsync instead of using Promises directly.", "url": "https://api.github.com/repos/mozilla/normandy/issues/comments/305922034", "created_at": "2017-06-02T22:18:36Z", "author_association": "MEMBER", "html_url": "https://github.com/mozilla/normandy/pull/778#issuecomment-305922034", "updated_at": "2017-06-02T22:18:58Z", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "body_html": "<blockquote>\n<p>I could be wrong, because async functions are pretty new beasts, but my understanding is that there's no observable difference from the caller's perspective between an async function and a non-async function that returns a promise -- running either without await returns a promise, and you can then await or .then() the promise. It's just less boilerplate to write an async function than function() { return new Promise(resolve =&gt; { ... }); }, and of course you can use await inside an async function and can't inside a non-async argument function to the Promise constructor.</p>\n</blockquote>\n<p>Yep.</p>\n<p>The current guidelines for the shield-recipe-client is to prefer async/await functions over Promises where possible. The driver uses Promises directly mostly because it's using Promises from the sandbox to allow for sandbox code to access <code>then</code> and use <code>await</code> properly. Eventually we should port the rest of the driver functions to use <code>SandboxManager.wrapAsync</code> instead of using Promises directly.</p>", "id": 305922034, "issue_url": "https://api.github.com/repos/mozilla/normandy/issues/778"}