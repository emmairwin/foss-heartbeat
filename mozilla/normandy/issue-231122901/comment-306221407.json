{"body": "I don't think I can restructure the installAddon API as an async function.\r\n\r\nasync functions just decorate a function so that the resolve method of a Promise is wrapped around the return value of the top level function.  \r\n\r\n`AddonManager.getInstallForURL` invokes a callback with a single argument - an addon object.  I need to wrap `getInstallForURL` in a Promise so that I can make a subsequent call to `.install()` on the addon object using a Promise to make the call sequence clearer.\r\n\r\nThe problem here is that the addon object's `.install()` method immediately returns with no return value.  No callback functions and no promise.  The only signal we get back that the install either succeeded or failed is via a listener object that is bound to the addon.  \r\n\r\nThe decorator in the async function won't wrap the return value of the listener object because the final return value we care about is from within `listener.onInstallSucceeded` or `listener.onInstallFailed`.    The async function decorator will be wrapping the container object to the listener.\r\n\r\nIf we still really want to have the top level `.installAddon` function declared as an async function, I *could* wrap the lines where I register the listener, and invoke `addon.install()` in a Promise, but that seems to defeat the purpose of async functions entirely - which seems to be provide some syntactic sugar around explicit declaration of Promises.\r\n\r\nIf you see a way around this - let me know.  I haven't been able to figure out a nicer way to clean up this mess of callback functions.\r\n\r\nI'm going to try adding the `sinon` tests though - we should be testing the failure cases.", "body_text": "I don't think I can restructure the installAddon API as an async function.\nasync functions just decorate a function so that the resolve method of a Promise is wrapped around the return value of the top level function.\nAddonManager.getInstallForURL invokes a callback with a single argument - an addon object.  I need to wrap getInstallForURL in a Promise so that I can make a subsequent call to .install() on the addon object using a Promise to make the call sequence clearer.\nThe problem here is that the addon object's .install() method immediately returns with no return value.  No callback functions and no promise.  The only signal we get back that the install either succeeded or failed is via a listener object that is bound to the addon.\nThe decorator in the async function won't wrap the return value of the listener object because the final return value we care about is from within listener.onInstallSucceeded or listener.onInstallFailed.    The async function decorator will be wrapping the container object to the listener.\nIf we still really want to have the top level .installAddon function declared as an async function, I could wrap the lines where I register the listener, and invoke addon.install() in a Promise, but that seems to defeat the purpose of async functions entirely - which seems to be provide some syntactic sugar around explicit declaration of Promises.\nIf you see a way around this - let me know.  I haven't been able to figure out a nicer way to clean up this mess of callback functions.\nI'm going to try adding the sinon tests though - we should be testing the failure cases.", "url": "https://api.github.com/repos/mozilla/normandy/issues/comments/306221407", "created_at": "2017-06-05T15:39:16Z", "author_association": "CONTRIBUTOR", "html_url": "https://github.com/mozilla/normandy/pull/778#issuecomment-306221407", "updated_at": "2017-06-05T15:39:16Z", "user": {"following_url": "https://api.github.com/users/crankycoder/following{/other_user}", "events_url": "https://api.github.com/users/crankycoder/events{/privacy}", "organizations_url": "https://api.github.com/users/crankycoder/orgs", "url": "https://api.github.com/users/crankycoder", "gists_url": "https://api.github.com/users/crankycoder/gists{/gist_id}", "html_url": "https://github.com/crankycoder", "subscriptions_url": "https://api.github.com/users/crankycoder/subscriptions", "avatar_url": "https://avatars2.githubusercontent.com/u/4829?v=4", "repos_url": "https://api.github.com/users/crankycoder/repos", "received_events_url": "https://api.github.com/users/crankycoder/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/crankycoder/starred{/owner}{/repo}", "site_admin": false, "login": "crankycoder", "type": "User", "id": 4829, "followers_url": "https://api.github.com/users/crankycoder/followers"}, "body_html": "<p>I don't think I can restructure the installAddon API as an async function.</p>\n<p>async functions just decorate a function so that the resolve method of a Promise is wrapped around the return value of the top level function.</p>\n<p><code>AddonManager.getInstallForURL</code> invokes a callback with a single argument - an addon object.  I need to wrap <code>getInstallForURL</code> in a Promise so that I can make a subsequent call to <code>.install()</code> on the addon object using a Promise to make the call sequence clearer.</p>\n<p>The problem here is that the addon object's <code>.install()</code> method immediately returns with no return value.  No callback functions and no promise.  The only signal we get back that the install either succeeded or failed is via a listener object that is bound to the addon.</p>\n<p>The decorator in the async function won't wrap the return value of the listener object because the final return value we care about is from within <code>listener.onInstallSucceeded</code> or <code>listener.onInstallFailed</code>.    The async function decorator will be wrapping the container object to the listener.</p>\n<p>If we still really want to have the top level <code>.installAddon</code> function declared as an async function, I <em>could</em> wrap the lines where I register the listener, and invoke <code>addon.install()</code> in a Promise, but that seems to defeat the purpose of async functions entirely - which seems to be provide some syntactic sugar around explicit declaration of Promises.</p>\n<p>If you see a way around this - let me know.  I haven't been able to figure out a nicer way to clean up this mess of callback functions.</p>\n<p>I'm going to try adding the <code>sinon</code> tests though - we should be testing the failure cases.</p>", "id": 306221407, "issue_url": "https://api.github.com/repos/mozilla/normandy/issues/778"}