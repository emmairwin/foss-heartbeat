{"body": "I could be wrong, because async functions are pretty new beasts, but my understanding is that there's no observable difference from the caller's perspective between an async function and a non-async function that returns a promise -- running either without `await` returns a promise, and you can then `await` or `.then()` the promise. It's just less boilerplate to write an async function than `function() { return new Promise(resolve => { ... }); }`, and of course you can use `await` inside an async function and can't inside a non-async argument function to the `Promise` constructor.", "body_text": "I could be wrong, because async functions are pretty new beasts, but my understanding is that there's no observable difference from the caller's perspective between an async function and a non-async function that returns a promise -- running either without await returns a promise, and you can then await or .then() the promise. It's just less boilerplate to write an async function than function() { return new Promise(resolve => { ... }); }, and of course you can use await inside an async function and can't inside a non-async argument function to the Promise constructor.", "url": "https://api.github.com/repos/mozilla/normandy/issues/comments/305637383", "created_at": "2017-06-01T22:23:46Z", "author_association": "CONTRIBUTOR", "html_url": "https://github.com/mozilla/normandy/pull/778#issuecomment-305637383", "updated_at": "2017-06-01T22:23:46Z", "user": {"following_url": "https://api.github.com/users/gijsk/following{/other_user}", "events_url": "https://api.github.com/users/gijsk/events{/privacy}", "organizations_url": "https://api.github.com/users/gijsk/orgs", "url": "https://api.github.com/users/gijsk", "gists_url": "https://api.github.com/users/gijsk/gists{/gist_id}", "html_url": "https://github.com/gijsk", "subscriptions_url": "https://api.github.com/users/gijsk/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/375983?v=4", "repos_url": "https://api.github.com/users/gijsk/repos", "received_events_url": "https://api.github.com/users/gijsk/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/gijsk/starred{/owner}{/repo}", "site_admin": false, "login": "gijsk", "type": "User", "id": 375983, "followers_url": "https://api.github.com/users/gijsk/followers"}, "body_html": "<p>I could be wrong, because async functions are pretty new beasts, but my understanding is that there's no observable difference from the caller's perspective between an async function and a non-async function that returns a promise -- running either without <code>await</code> returns a promise, and you can then <code>await</code> or <code>.then()</code> the promise. It's just less boilerplate to write an async function than <code>function() { return new Promise(resolve =&gt; { ... }); }</code>, and of course you can use <code>await</code> inside an async function and can't inside a non-async argument function to the <code>Promise</code> constructor.</p>", "id": 305637383, "issue_url": "https://api.github.com/repos/mozilla/normandy/issues/778"}