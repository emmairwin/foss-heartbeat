{"body": "> The recipe details page relies on recipe.action so this is going to be a problem. Was there an issue with populating the options from the state other than needing to load the actions into the state?\r\n\r\nNot really.\r\n\r\nI guess it comes down to where we want the related bits of data to be combined; currently the server returns denormalized data, actions normalize it and store it in the state, and selectors denormalize it again. My instinct would be to have two steps instead of three; server returns normalized data, and selectors denormalize it. The query components can handle triggering a fetch for the action as well if necessary, although I dunno how we'd handle components that are loading the recipe, since currently I believe we do stuff like `if (recipe)`, which doesn't say anything about whether the action we also might need has been loaded yet. Maybe the selector returns null until both are present?\r\n\r\n@rehandalal What do you think? I may be forgetting that we've already decided that the API should return denormalized data.", "body_text": "The recipe details page relies on recipe.action so this is going to be a problem. Was there an issue with populating the options from the state other than needing to load the actions into the state?\n\nNot really.\nI guess it comes down to where we want the related bits of data to be combined; currently the server returns denormalized data, actions normalize it and store it in the state, and selectors denormalize it again. My instinct would be to have two steps instead of three; server returns normalized data, and selectors denormalize it. The query components can handle triggering a fetch for the action as well if necessary, although I dunno how we'd handle components that are loading the recipe, since currently I believe we do stuff like if (recipe), which doesn't say anything about whether the action we also might need has been loaded yet. Maybe the selector returns null until both are present?\n@rehandalal What do you think? I may be forgetting that we've already decided that the API should return denormalized data.", "url": "https://api.github.com/repos/mozilla/normandy/issues/comments/313159979", "created_at": "2017-07-05T16:45:32Z", "author_association": "MEMBER", "html_url": "https://github.com/mozilla/normandy/pull/859#issuecomment-313159979", "updated_at": "2017-07-05T16:45:32Z", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "body_html": "<blockquote>\n<p>The recipe details page relies on recipe.action so this is going to be a problem. Was there an issue with populating the options from the state other than needing to load the actions into the state?</p>\n</blockquote>\n<p>Not really.</p>\n<p>I guess it comes down to where we want the related bits of data to be combined; currently the server returns denormalized data, actions normalize it and store it in the state, and selectors denormalize it again. My instinct would be to have two steps instead of three; server returns normalized data, and selectors denormalize it. The query components can handle triggering a fetch for the action as well if necessary, although I dunno how we'd handle components that are loading the recipe, since currently I believe we do stuff like <code>if (recipe)</code>, which doesn't say anything about whether the action we also might need has been loaded yet. Maybe the selector returns null until both are present?</p>\n<p><a class=\"user-mention\" href=\"https://github.com/rehandalal\">@rehandalal</a> What do you think? I may be forgetting that we've already decided that the API should return denormalized data.</p>", "id": 313159979, "issue_url": "https://api.github.com/repos/mozilla/normandy/issues/859"}