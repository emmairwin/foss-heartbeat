{"original_position": 69, "diff_hunk": "@@ -0,0 +1,71 @@\n+/* eslint import/prefer-default-export: \"off\" */\n+\n+import { List, Map } from 'immutable';\n+\n+import {\n+  SESSION_INFO_RECEIVE,\n+  SESSION_INFO_HISTORY_VIEW,\n+  REQUEST_SEND,\n+  REQUEST_SUCCESS,\n+} from 'control_new/state/action-types';\n+\n+const STORAGE_KEY = 'normandy-sesh-info';\n+\n+export function fetchSessionInfo() {\n+  return async dispatch => {\n+    const requestId = 'fetch-session-info';\n+    dispatch({\n+      type: REQUEST_SEND,\n+      requestId,\n+    });\n+\n+    // Read the stringified object and convert it (and its nested objects) into\n+    // proper immutable objects.\n+    let savedHistory = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}');\n+    savedHistory = savedHistory.map(obj => new Map(obj));\n+    savedHistory = new List(savedHistory);\n+\n+\n+    dispatch({\n+      type: REQUEST_SUCCESS,\n+      requestId,\n+    });\n+\n+    dispatch({\n+      type: SESSION_INFO_RECEIVE,\n+      history: savedHistory,\n+    });\n+  };\n+}\n+\n+export function saveSession() {\n+  return async (dispatch, getState) => {\n+    const requestId = 'save-session-info';\n+    dispatch({\n+      type: REQUEST_SEND,\n+      requestId,\n+    });\n+\n+    const storedData = JSON.stringify(getState().app.session.history.toJS());\n+    localStorage.setItem(STORAGE_KEY, storedData);\n+\n+    dispatch({\n+      type: REQUEST_SUCCESS,\n+      requestId,\n+    });\n+  };\n+}\n+\n+export function addSessionView(caption) {\n+  return async (dispatch, getState) => {\n+    const url = getState().router.pathname;\n+\n+    dispatch({\n+      type: SESSION_INFO_HISTORY_VIEW,\n+      item: new Map({ url, caption }),\n+    });\n+\n+    // Automatically save the session when views are added.\n+    return saveSession()(dispatch, getState);", "body_text": "The normal way to deal with thunk action creators would be dispatch(saveSession()), which would handle passing dispatch and getState. It doesn't matter much here, but it provides a consistent API for action creators that I think we should follow.", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/997", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/134885579", "created_at": "2017-08-23T22:18:57Z", "author_association": "MEMBER", "body": "The normal way to deal with thunk action creators would be `dispatch(saveSession())`, which would handle passing `dispatch` and `getState`. It doesn't matter much here, but it provides a consistent API for action creators that I think we should follow.", "updated_at": "2017-09-05T16:01:36Z", "html_url": "https://github.com/mozilla/normandy/pull/997#discussion_r134885579", "pull_request_review_id": 58231637, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/134885579"}, "html": {"href": "https://github.com/mozilla/normandy/pull/997#discussion_r134885579"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/997"}}, "commit_id": "83a6701f1dcf13a5c29ad36cfbea0754a5e7ecef", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "position": null, "path": "recipe-server/client/control_new/state/app/session/actions.js", "body_html": "<p>The normal way to deal with thunk action creators would be <code>dispatch(saveSession())</code>, which would handle passing <code>dispatch</code> and <code>getState</code>. It doesn't matter much here, but it provides a consistent API for action creators that I think we should follow.</p>", "original_commit_id": "e855da6d6a48d911cdd1125cb397eca6e1c096da", "id": 134885579}