{"body": ">I also think that the combination of localstorage and all the request machinery is a bit odd.\r\n\r\nMy reasoning behind using `local[St|F]orage` in conjunction with the `Query` component is to keep a uniform approach of requesting/receiving data on the front end.\r\n\r\nFor instance, with this approach we can use the localStorage request ID with `LoadingOverlay`s to hide/show loading spinners in relevant sections. Another application is if we (for some reason) decided to store the session info server-side; we simply need to swap out the `localStorage` calls in the Query component with an `apiFetch` call, and the site continues to chug along as normal.\r\n\r\nUnfortunately, we _do_ have to manually dispatch the `REQUEST_` events to keep in line with those conventions, but IMO that's not super weird.", "body_text": "I also think that the combination of localstorage and all the request machinery is a bit odd.\n\nMy reasoning behind using local[St|F]orage in conjunction with the Query component is to keep a uniform approach of requesting/receiving data on the front end.\nFor instance, with this approach we can use the localStorage request ID with LoadingOverlays to hide/show loading spinners in relevant sections. Another application is if we (for some reason) decided to store the session info server-side; we simply need to swap out the localStorage calls in the Query component with an apiFetch call, and the site continues to chug along as normal.\nUnfortunately, we do have to manually dispatch the REQUEST_ events to keep in line with those conventions, but IMO that's not super weird.", "url": "https://api.github.com/repos/mozilla/normandy/issues/comments/324641454", "created_at": "2017-08-24T13:52:33Z", "author_association": "CONTRIBUTOR", "html_url": "https://github.com/mozilla/normandy/pull/997#issuecomment-324641454", "updated_at": "2017-08-24T13:52:47Z", "user": {"following_url": "https://api.github.com/users/andymikulski/following{/other_user}", "events_url": "https://api.github.com/users/andymikulski/events{/privacy}", "organizations_url": "https://api.github.com/users/andymikulski/orgs", "url": "https://api.github.com/users/andymikulski", "gists_url": "https://api.github.com/users/andymikulski/gists{/gist_id}", "html_url": "https://github.com/andymikulski", "subscriptions_url": "https://api.github.com/users/andymikulski/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/2767162?v=4", "repos_url": "https://api.github.com/users/andymikulski/repos", "received_events_url": "https://api.github.com/users/andymikulski/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/andymikulski/starred{/owner}{/repo}", "site_admin": false, "login": "andymikulski", "type": "User", "id": 2767162, "followers_url": "https://api.github.com/users/andymikulski/followers"}, "body_html": "<blockquote>\n<p>I also think that the combination of localstorage and all the request machinery is a bit odd.</p>\n</blockquote>\n<p>My reasoning behind using <code>local[St|F]orage</code> in conjunction with the <code>Query</code> component is to keep a uniform approach of requesting/receiving data on the front end.</p>\n<p>For instance, with this approach we can use the localStorage request ID with <code>LoadingOverlay</code>s to hide/show loading spinners in relevant sections. Another application is if we (for some reason) decided to store the session info server-side; we simply need to swap out the <code>localStorage</code> calls in the Query component with an <code>apiFetch</code> call, and the site continues to chug along as normal.</p>\n<p>Unfortunately, we <em>do</em> have to manually dispatch the <code>REQUEST_</code> events to keep in line with those conventions, but IMO that's not super weird.</p>", "id": 324641454, "issue_url": "https://api.github.com/repos/mozilla/normandy/issues/997"}