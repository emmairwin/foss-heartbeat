{"original_position": 83, "diff_hunk": "@@ -0,0 +1,102 @@\n+/* eslint-disable react/prop-types, react/display-name, jsx-a11y/no-static-element-interactions */\n+import React from 'react';\n+import { mount } from 'enzyme';\n+\n+import GenericFormContainer from 'control/components/recipes/GenericFormContainer';\n+\n+describe('<GenericFormContainer>', () => {\n+  const props = {\n+    form: () => <div />,\n+    formAction: async () => true,\n+    onFailure: () => {},\n+    onSuccess: () => {},\n+    formProps: {},\n+  };\n+\n+  it('should work', () => {\n+    const wrapper = () => mount(<GenericFormContainer {...props} />);\n+\n+    expect(wrapper).not.toThrow();\n+  });\n+\n+  it('should nest the `form` prop as a child', () => {\n+    const CustomEl = () => <div id=\"test\">Custom</div>;\n+\n+    const wrapper = mount(<GenericFormContainer {...props} form={CustomEl} />);\n+\n+    expect(wrapper.find('#test').length).toBe(1);\n+    expect(wrapper.find('#test').text()).toContain('Custom');\n+  });\n+\n+  it('should fire the formAction on submission', () => {\n+    const CustomEl = ({ onSubmit }) => <div onClick={onSubmit}>Test</div>;\n+    let fired = false;\n+    const wrapper = mount(\n+      <GenericFormContainer\n+        {...props}\n+        form={CustomEl}\n+        formAction={() => {\n+          fired = true;\n+        }}\n+      />,\n+    );\n+\n+    wrapper.find(CustomEl).simulate('click');\n+    expect(fired).toBe(true);\n+  });\n+\n+  it('should handle the formAction failing', () => {\n+    const CustomEl = ({ onSubmit }) => <div onClick={onSubmit}>Test</div>;\n+    let failed = false;\n+    const wrapper = mount(\n+      <GenericFormContainer\n+        {...props}\n+        form={CustomEl}\n+        onFailure={() => {\n+          failed = true;\n+        }}\n+        formAction={() => {\n+          throw new Error('Form action failed');\n+        }}\n+      />,\n+    );\n+\n+    wrapper.find(CustomEl).simulate('click');\n+    expect(failed).toBe(true);\n+  });\n+\n+  it('should handle the formAction succeeding', () => {\n+    const CustomEl = ({ onSubmit }) => <div onClick={onSubmit}>Test</div>;\n+    let success = false;\n+    const wrapper = mount(\n+      <GenericFormContainer\n+        {...props}\n+        form={CustomEl}\n+        onSuccess={() => {\n+          success = true;\n+        }}\n+      />,\n+    );\n+\n+    wrapper.find(CustomEl).simulate('click');\n+    // formAction is async so we need to wait for that promise to resolve.\n+    setTimeout(() => {", "body_text": "setTimeout shouldn't be used in tests like this. The onSuccess callback should resolve a promise that this function can await on. Also, since this test is not async, the test will pass before this callback fires.", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/1127", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/153874367", "created_at": "2017-11-29T18:27:45Z", "author_association": "MEMBER", "body": "setTimeout shouldn't be used in tests like this. The onSuccess callback should resolve a promise that this function can await on. Also, since this test is not async, the test will pass before this callback fires.", "updated_at": "2017-12-07T20:52:13Z", "html_url": "https://github.com/mozilla/normandy/pull/1127#discussion_r153874367", "pull_request_review_id": 79948445, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/153874367"}, "html": {"href": "https://github.com/mozilla/normandy/pull/1127#discussion_r153874367"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/1127"}}, "commit_id": "8a95f842fcc7f80a6021a3fcdd6b0d756a63c909", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "position": null, "path": "recipe-server/client/control/tests/components/recipes/test_GenericFormContainer.js", "body_html": "<p>setTimeout shouldn't be used in tests like this. The onSuccess callback should resolve a promise that this function can await on. Also, since this test is not async, the test will pass before this callback fires.</p>", "original_commit_id": "da56deca8a591df16bca13777ffbf9110275f6ae", "id": 153874367}