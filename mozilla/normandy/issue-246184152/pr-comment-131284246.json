{"original_position": 106, "diff_hunk": "@@ -145,20 +149,65 @@ this.NormandyApi = {\n \n   /**\n    * Fetch an array of available actions from the server.\n+   * @param filters\n+   * @param filters.enabled {boolean} If true, only returns enabled\n+   * recipes. Default true.\n+   * @resolves {Array}\n+   */\n+  async fetchRecipes(filters = {enabled: true}) {\n+    return this.fetchSignedObjects('recipe', filters);\n+  },\n+\n+  /**\n+   * Fetch an array of available actions from the server.\n    * @resolves {Array}\n    */\n-  async fetchActions() {\n-    const actionApiUrl = await this.getApiUrl(\"action-list\");\n-    const res = await this.get(actionApiUrl);\n-    return res.json();\n+  async fetchActions(filters = {}) {\n+    return this.fetchSignedObjects('action', filters);\n   },\n \n   async fetchImplementation(action) {\n-    const response = await fetch(action.implementation_url);\n-    if (response.ok) {\n-      return response.text();\n+    const implementationUrl = this.absolutify(action.implementation_url);\n+\n+\n+    // fetch implementation\n+    const response = await fetch(implementationUrl);\n+    if (!response.ok) {\n+      throw new Error(\n+        `Failed to fetch action implementation for ${action.name}: ${response.status}`\n+      );\n+    }\n+    const responseText = await response.text();\n+\n+    // Try to verify integrity of the implementation text. If no\n+    // integrity value is found, skip. If the integrity value doesn't\n+    // match thte content or uses an unknown algorithm, fail.\n+    const integrityRe = new RegExp('/([a-z]+[0-9]+)-([a-zA-Z0-9+-]+)/$');", "body_text": "I don't think we should use a regex to pull this value out. It's possible to create a URL that includes a hash that didn't come from the server that this regex matches with something like ?hah=/sha384-blahblahblah/ appended to the end.\nInstead, could we parse this as a URL and pull out the relevant path segment?", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/934", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/131284246", "created_at": "2017-08-03T23:35:27Z", "author_association": "MEMBER", "body": "I don't think we should use a regex to pull this value out. It's possible to create a URL that includes a hash that didn't come from the server that this regex matches with something like `?hah=/sha384-blahblahblah/` appended to the end.\r\n\r\nInstead, could we parse this as a URL and pull out the relevant path segment?", "updated_at": "2017-08-09T17:29:37Z", "html_url": "https://github.com/mozilla/normandy/pull/934#discussion_r131284246", "pull_request_review_id": 54244884, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/131284246"}, "html": {"href": "https://github.com/mozilla/normandy/pull/934#discussion_r131284246"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/934"}}, "commit_id": "9b11c6f569d0e9e3d25e024a14c775e0184ba9b7", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "position": null, "path": "recipe-client-addon/lib/NormandyApi.jsm", "body_html": "<p>I don't think we should use a regex to pull this value out. It's possible to create a URL that includes a hash that didn't come from the server that this regex matches with something like <code>?hah=/sha384-blahblahblah/</code> appended to the end.</p>\n<p>Instead, could we parse this as a URL and pull out the relevant path segment?</p>", "original_commit_id": "1245bf4232ce3547293009ad896c8bcecbdd8b33", "id": 131284246}