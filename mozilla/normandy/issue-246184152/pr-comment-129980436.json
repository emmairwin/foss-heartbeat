{"original_position": 76, "diff_hunk": "@@ -55,28 +57,60 @@ def recipe_signatures_are_correct(app_configs, **kwargs):\n     return errors\n \n \n-def recipe_signatures_use_good_certificates(app_configs, **kwargs):\n+def action_signatures_are_correct(app_configs, **kwargs):\n+    errors = []\n+    try:\n+        Action = apps.get_model('recipes', 'Action')\n+        signed_actions = list(Action.objects.exclude(signature=None))\n+    except (ProgrammingError, OperationalError, ImproperlyConfigured):\n+        errors.append(Info('Could not retrieve actions', id=INFO_COULD_NOT_RETRIEVE_ACTIONS))\n+    else:\n+        for action in signed_actions:\n+            data = action.canonical_json()\n+            signature = action.signature.signature\n+            pubkey = action.signature.public_key\n+            try:\n+                signing.verify_signature(data, signature, pubkey)\n+            except signing.BadSignature as e:\n+                msg = f\"Action '{action}' (id={action.id}) has a bad signature: {e.detail}\"\n+                errors.append(Warning(msg, id=WARNING_INVALID_ACTION_SIGNATURE))\n+\n+    return errors\n+\n+\n+def signatures_use_good_certificates(app_configs, **kwargs):\n     errors = []\n     expire_early = None\n     if settings.CERTIFICATES_EXPIRE_EARLY_DAYS:\n         expire_early = timedelta(days=settings.CERTIFICATES_EXPIRE_EARLY_DAYS)\n \n     try:\n+        Signature = apps.get_model('recipes', 'Signature')\n         Recipe = apps.get_model('recipes', 'Recipe')\n-        signed_recipes = list(Recipe.objects.exclude(signature=None))\n+        Action = apps.get_model('recipes', 'Action')\n+        signatures = list(Signature.objects.all())\n     except (ProgrammingError, OperationalError, ImproperlyConfigured):\n-        errors.append(Info('Could not retrieve recipes', id=INFO_COULD_NOT_RETRIEVE_RECIPES))\n+        errors.append(Info('Could not retrieve signatures', id=INFO_COULD_NOT_RETRIEVE_SIGNATURES))\n     else:\n-        urls = set(r.signature.x5u for r in signed_recipes)\n+        urls = set(s.x5u for s in signatures)\n         for url in urls:\n             try:\n                 signing.verify_x5u(url, expire_early)\n             except signing.BadCertificate as exc:\n                 matching_recipes = Recipe.objects.filter(signature__x5u=url)\n-                count = matching_recipes.count()\n-                ids = ', '.join(str(r.id) for r in matching_recipes)\n-                msg = (f'{count} recipes (ids {ids}) are signed with a bad cert. {exc.detail}. '\n+                matching_actions = Action.objects.filter(signature__x5u=url)\n+\n+                recipe_count = matching_recipes.count()\n+                action_count = matching_actions.count()\n+                count = recipe_count + action_count\n+                msg = (f'{count} objects are signed with a bad cert. {exc.detail}. '\n                        f'Certificate url is {url}')\n+                if recipe_count:\n+                    ids = ', '.join(str(r.id) for r in matching_recipes)\n+                    msg += f'\\n\\tRecipe ids: {ids}'\n+                if action_count:\n+                    names = ', '.join(str(a.name) for a in matching_actions)\n+                    msg += f'\\n\\tAction names: {names}'", "body_text": "This is fine as it is, but a minor improvement might be to rely on their __str__ representations to mark which is which, and just join the lists together at the start.", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/934", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/129980436", "created_at": "2017-07-27T23:08:15Z", "author_association": "MEMBER", "body": "This is fine as it is, but a minor improvement might be to rely on their `__str__` representations to mark which is which, and just join the lists together at the start.", "updated_at": "2017-08-09T17:29:37Z", "html_url": "https://github.com/mozilla/normandy/pull/934#discussion_r129980436", "pull_request_review_id": 52807776, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/129980436"}, "html": {"href": "https://github.com/mozilla/normandy/pull/934#discussion_r129980436"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/934"}}, "commit_id": "9b11c6f569d0e9e3d25e024a14c775e0184ba9b7", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "position": null, "path": "recipe-server/normandy/recipes/checks.py", "body_html": "<p>This is fine as it is, but a minor improvement might be to rely on their <code>__str__</code> representations to mark which is which, and just join the lists together at the start.</p>", "original_commit_id": "10107f0fa46fea21cb3e004e7dedfd1bb039ccec", "id": 129980436}