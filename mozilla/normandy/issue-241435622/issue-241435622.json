{"body_text": "In working on #749, I needed a way to load up ajv, but didn't want to manually import it like we did with mozjexl. Webpack to the rescue!\nWhat this does is add a webpack config to the add-on that includes one configuration per-library that we want to include. Each config builds the library into a single file and outputs it to a vendor subdirectory. It also includes a plugin that appends this.EXPORTED_SYMBOLS = [\"libname\"]; to the end of the output file so that it can be imported via Cu.import.\nThe rest is plumbing for automatically including these files within the add-on.\nI think this is more preferable to running webpack on the entire add-on for a few reasons:\n\nWe can continue to use imports that look familiar to Firefox devs.\nThe code that we land in mozilla-central is still amenable to large refactors that happen from time-to-time.\nNo need to mess around with source maps for the entire add-on.\n\nThis should work with most browser-compatible libraries that we care about, although some browser globals might cause issues, like URL or fetch. If we run into that, I'd consider just adding an importGlobalProperties call to the top of the output file as necessary. Could be an optional argument to libraryConfig.\nThis is a WIP because I still need to write docs and also have a question:\nHow should the workflow for triggering builds go? Should we keep using the scripts in bin and modify them to run webpack every time? Should we switch to npm script commands and call the scripts within those instead? Should we just expect devs to run webpack when necessary (since you only need a rebuild when dependencies change)?\nI'd appreciate feedback from anyone, but want it particularly from @mythmon. :D", "labels": [], "number": 871, "assignee": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "repository_url": "https://api.github.com/repos/mozilla/normandy", "closed_at": "2017-07-11T18:08:24Z", "body_html": "<p>In working on <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"227530261\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/mozilla/normandy/issues/749\" href=\"https://github.com/mozilla/normandy/issues/749\">#749</a>, I needed a way to load up <a href=\"https://github.com/epoberezkin/ajv\">ajv</a>, but didn't want to manually import it like we did with mozjexl. Webpack to the rescue!</p>\n<p>What this does is add a webpack config to the add-on that includes one configuration per-library that we want to include. Each config builds the library into a single file and outputs it to a <code>vendor</code> subdirectory. It also includes a plugin that appends <code>this.EXPORTED_SYMBOLS = [\"libname\"];</code> to the end of the output file so that it can be imported via <code>Cu.import</code>.</p>\n<p>The rest is plumbing for automatically including these files within the add-on.</p>\n<p>I think this is more preferable to running webpack on the entire add-on for a few reasons:</p>\n<ul>\n<li>We can continue to use imports that look familiar to Firefox devs.</li>\n<li>The code that we land in mozilla-central is still amenable to large refactors that happen from time-to-time.</li>\n<li>No need to mess around with source maps for the entire add-on.</li>\n</ul>\n<p>This <em>should</em> work with most browser-compatible libraries that we care about, although some browser globals might cause issues, like <code>URL</code> or <code>fetch</code>. If we run into that, I'd consider just adding an <code>importGlobalProperties</code> call to the top of the output file as necessary. Could be an optional argument to <code>libraryConfig</code>.</p>\n<p>This is a WIP because I still need to write docs and also have a question:</p>\n<p>How should the workflow for triggering builds go? Should we keep using the scripts in <code>bin</code> and modify them to run webpack every time? Should we switch to <code>npm</code> script commands and call the scripts within those instead? Should we just expect devs to run webpack when necessary (since you only need a rebuild when dependencies change)?</p>\n<p>I'd appreciate feedback from anyone, but want it particularly from <a class=\"user-mention\" href=\"https://github.com/mythmon\">@mythmon</a>. :D</p>", "id": 241435622, "title": "Support loading arbitrary npm dependencies in the add-on via webpack.", "pull_request": {"url": "https://api.github.com/repos/mozilla/normandy/pulls/871", "diff_url": "https://github.com/mozilla/normandy/pull/871.diff", "html_url": "https://github.com/mozilla/normandy/pull/871", "patch_url": "https://github.com/mozilla/normandy/pull/871.patch"}, "comments": 4, "state": "closed", "body": "In working on #749, I needed a way to load up [ajv](https://github.com/epoberezkin/ajv), but didn't want to manually import it like we did with mozjexl. Webpack to the rescue!\r\n\r\nWhat this does is add a webpack config to the add-on that includes one configuration per-library that we want to include. Each config builds the library into a single file and outputs it to a `vendor` subdirectory. It also includes a plugin that appends `this.EXPORTED_SYMBOLS = [\"libname\"];` to the end of the output file so that it can be imported via `Cu.import`.\r\n\r\nThe rest is plumbing for automatically including these files within the add-on.\r\n\r\nI think this is more preferable to running webpack on the entire add-on for a few reasons:\r\n- We can continue to use imports that look familiar to Firefox devs.\r\n- The code that we land in mozilla-central is still amenable to large refactors that happen from time-to-time.\r\n- No need to mess around with source maps for the entire add-on.\r\n\r\nThis _should_ work with most browser-compatible libraries that we care about, although some browser globals might cause issues, like `URL` or `fetch`. If we run into that, I'd consider just adding an `importGlobalProperties` call to the top of the output file as necessary. Could be an optional argument to `libraryConfig`.\r\n\r\nThis is a WIP because I still need to write docs and also have a question:\r\n\r\nHow should the workflow for triggering builds go? Should we keep using the scripts in `bin` and modify them to run webpack every time? Should we switch to `npm` script commands and call the scripts within those instead? Should we just expect devs to run webpack when necessary (since you only need a rebuild when dependencies change)?\r\n\r\nI'd appreciate feedback from anyone, but want it particularly from @mythmon. :D", "events_url": "https://api.github.com/repos/mozilla/normandy/issues/871/events", "labels_url": "https://api.github.com/repos/mozilla/normandy/issues/871/labels{/name}", "author_association": "MEMBER", "comments_url": "https://api.github.com/repos/mozilla/normandy/issues/871/comments", "html_url": "https://github.com/mozilla/normandy/pull/871", "updated_at": "2017-07-11T18:08:24Z", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "milestone": null, "locked": false, "url": "https://api.github.com/repos/mozilla/normandy/issues/871", "created_at": "2017-07-08T08:21:58Z", "assignees": [{"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}]}