{"original_position": 11, "diff_hunk": "@@ -50,34 +50,43 @@ buildControlField.propTypes = {\n   children: pt.node,\n };\n \n+export const CheckboxGroup = ({ name, onChange, options = [], value }) => {\n+  /**\n+   * Checkbox change event handler. Appends or removes the selected checkbox's\n+   * value to the existing `value` prop, and reports the change up to redux-form.\n+   *\n+   * @param  {Event} onChange event object\n+   */\n+  const handleChange = ({ event: target }) => {", "body_text": "Can you elaborate on this? handleChange interacts with the value prop passed into CheckboxGroup, and I'm unsure of how nesting subcomponents would avoid rerenders as a result.\nFor instance:\noptions.map((option, index) =>\n  <CheckboxGroupField\n    key={index}\n    option={option}\n    onChange={onChange}\n    value={value}\n    checked={value.includes(option.value)}\n  />\n)\n\nPassing redux-form's onChange directly (as shown here) means that we would need to pass the value into the CheckboxGroupField as well, which would cause a rerender. Using onChange={handleChange}, where handleChange is defined in CheckboxGroup, would loop back around to the issue that handleChange is defined every render, which re-renders the subcomponents.\nFurthermore, since these 'components' are not actual React Components, I'm fairly positive that the whole list is rendered regardless of what prop changes are passed in. Perhaps we should actually just use React.Component and define handleChange as a component function, which would avoid all of this. This code should be sufficient.", "in_reply_to_id": 107212033, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/595", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/107229584", "created_at": "2017-03-21T17:57:15Z", "author_association": "CONTRIBUTOR", "body": "Can you elaborate on this? `handleChange` interacts with the `value` prop passed into CheckboxGroup, and I'm unsure of how nesting subcomponents would avoid rerenders as a result.\r\n\r\nFor instance:\r\n\r\n```\r\noptions.map((option, index) =>\r\n  <CheckboxGroupField\r\n    key={index}\r\n    option={option}\r\n    onChange={onChange}\r\n    value={value}\r\n    checked={value.includes(option.value)}\r\n  />\r\n)\r\n```\r\nPassing redux-form's `onChange` directly (as shown here) means that we would need to pass the `value` into the CheckboxGroupField as well, which would cause a rerender. Using `onChange={handleChange}`, where `handleChange` is defined in CheckboxGroup, would loop back around to the issue that `handleChange` is defined every render, which re-renders the subcomponents.\r\n\r\nFurthermore, since these 'components' are not actual React Components, I'm fairly positive that the whole list is rendered regardless of what prop changes are passed in. Perhaps we should actually just use React.Component and define `handleChange` as a component function, which would avoid all of this. [This code](https://gist.github.com/andymikulski/d0d0ee9fdffbf77e4ac62cf02ef169a4) should be sufficient.\r\n", "updated_at": "2017-04-17T18:39:15Z", "html_url": "https://github.com/mozilla/normandy/pull/595#discussion_r107229584", "pull_request_review_id": 28189542, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/107229584"}, "html": {"href": "https://github.com/mozilla/normandy/pull/595#discussion_r107229584"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/595"}}, "commit_id": "4fa35e564b9c52cef07a720371a94f5cd0e1de76", "user": {"following_url": "https://api.github.com/users/andymikulski/following{/other_user}", "events_url": "https://api.github.com/users/andymikulski/events{/privacy}", "organizations_url": "https://api.github.com/users/andymikulski/orgs", "url": "https://api.github.com/users/andymikulski", "gists_url": "https://api.github.com/users/andymikulski/gists{/gist_id}", "html_url": "https://github.com/andymikulski", "subscriptions_url": "https://api.github.com/users/andymikulski/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/2767162?v=4", "repos_url": "https://api.github.com/users/andymikulski/repos", "received_events_url": "https://api.github.com/users/andymikulski/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/andymikulski/starred{/owner}{/repo}", "site_admin": false, "login": "andymikulski", "type": "User", "id": 2767162, "followers_url": "https://api.github.com/users/andymikulski/followers"}, "position": null, "path": "recipe-server/client/control/components/Fields.js", "body_html": "<p>Can you elaborate on this? <code>handleChange</code> interacts with the <code>value</code> prop passed into CheckboxGroup, and I'm unsure of how nesting subcomponents would avoid rerenders as a result.</p>\n<p>For instance:</p>\n<pre><code>options.map((option, index) =&gt;\n  &lt;CheckboxGroupField\n    key={index}\n    option={option}\n    onChange={onChange}\n    value={value}\n    checked={value.includes(option.value)}\n  /&gt;\n)\n</code></pre>\n<p>Passing redux-form's <code>onChange</code> directly (as shown here) means that we would need to pass the <code>value</code> into the CheckboxGroupField as well, which would cause a rerender. Using <code>onChange={handleChange}</code>, where <code>handleChange</code> is defined in CheckboxGroup, would loop back around to the issue that <code>handleChange</code> is defined every render, which re-renders the subcomponents.</p>\n<p>Furthermore, since these 'components' are not actual React Components, I'm fairly positive that the whole list is rendered regardless of what prop changes are passed in. Perhaps we should actually just use React.Component and define <code>handleChange</code> as a component function, which would avoid all of this. <a href=\"https://gist.github.com/andymikulski/d0d0ee9fdffbf77e4ac62cf02ef169a4\">This code</a> should be sufficient.</p>", "original_commit_id": "65730f9a28e51ced4f17c0fca9ce2303a7df050a", "id": 107229584}