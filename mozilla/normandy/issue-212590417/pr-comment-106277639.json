{"original_position": 47, "diff_hunk": "@@ -43,40 +44,49 @@ buildControlField.propTypes = {\n     error: pt.string,\n   }).isRequired,\n   label: pt.string,\n+  wrapper: pt.oneOfType([pt.func, pt.string]),\n   className: pt.string,\n   InputComponent: pt.oneOfType([pt.func, pt.string]),\n   children: pt.node,\n };\n \n \n-export const CheckboxGroup = ({ name, options = [], input }) =>\n-  <div>\n-    {\n-      options.map((option, index) =>\n-        <div className=\"checkbox\" key={index}>\n-          <input\n-            type=\"checkbox\"\n-            name={`${name}[${index}]`}\n-            value={option.value}\n-            checked={input.value.indexOf(option.value) !== -1}\n-            onChange={event => {\n-              const newValue = [...input.value];\n-              if (event.target.checked) {\n-                newValue.push(option.value);\n-              } else {\n-                newValue.splice(newValue.indexOf(option.value), 1);\n-              }\n+export const CheckboxGroup = ({ name, options = [], value, onChange }) => {\n+  const handleChange = option =>", "body_text": "The original problem is that React re-renders components when their props change, and because the function object created in this component is a different object each time the component is built, if the component is unchanged, the props between two instances of the component will still be interpreted as not being equal, since two different function objects are not considered equal, even if they have the same code in them.\nThis code is still creating a new function object each time. One way to solve this is to make the component a class instead of a function, and have the function be a method on the class. That way, the same function object is used across multiple renders, which avoids re-renders due to differing props.\nOne wrinkle there is how to reuse the function while getting a reference to the option instance, and the solution is to make the label tag a standalone component that takes the option as a prop, and make the function a method on that class. Within the method we can pull the option from the props, and it will still avoid re-renders.", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/595", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/106277639", "created_at": "2017-03-15T20:42:24Z", "author_association": "MEMBER", "body": "The original problem is that React re-renders components when their props change, and because the function object created in this component is a different object each time the component is built, if the component is unchanged, the props between two instances of the component will still be interpreted as not being equal, since two different function objects are not considered equal, even if they have the same code in them.\r\n\r\nThis code is still creating a new function object each time. One way to solve this is to make the component a class instead of a function, and have the function be a method on the class. That way, the same function object is used across multiple renders, which avoids re-renders due to differing props.\r\n\r\nOne wrinkle there is how to reuse the function while getting a reference to the `option` instance, and the solution is to make the `label` tag a standalone component that takes the option as a prop, and make the function a method on _that_ class. Within the method we can pull the option from the props, and it will still avoid re-renders.", "updated_at": "2017-04-17T18:39:15Z", "html_url": "https://github.com/mozilla/normandy/pull/595#discussion_r106277639", "pull_request_review_id": 27192795, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/106277639"}, "html": {"href": "https://github.com/mozilla/normandy/pull/595#discussion_r106277639"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/595"}}, "commit_id": "4fa35e564b9c52cef07a720371a94f5cd0e1de76", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "position": null, "path": "recipe-server/client/control/components/Fields.js", "body_html": "<p>The original problem is that React re-renders components when their props change, and because the function object created in this component is a different object each time the component is built, if the component is unchanged, the props between two instances of the component will still be interpreted as not being equal, since two different function objects are not considered equal, even if they have the same code in them.</p>\n<p>This code is still creating a new function object each time. One way to solve this is to make the component a class instead of a function, and have the function be a method on the class. That way, the same function object is used across multiple renders, which avoids re-renders due to differing props.</p>\n<p>One wrinkle there is how to reuse the function while getting a reference to the <code>option</code> instance, and the solution is to make the <code>label</code> tag a standalone component that takes the option as a prop, and make the function a method on <em>that</em> class. Within the method we can pull the option from the props, and it will still avoid re-renders.</p>", "original_commit_id": "d86998b4c6ba6efa58e580ac84660a14920ac820", "id": 106277639}