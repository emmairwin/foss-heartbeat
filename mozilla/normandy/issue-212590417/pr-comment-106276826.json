{"original_position": 104, "diff_hunk": "@@ -0,0 +1,234 @@\n+import React, { PropTypes as pt } from 'react';\n+\n+export default class MultiPicker extends React.Component {\n+  static propTypes = {\n+    unit: pt.string.isRequired,\n+    plural: pt.string.isRequired,\n+    options: pt.array,\n+    // from redux-form\n+    value: pt.oneOfType([pt.array, pt.string]),\n+    onChange: pt.func,\n+  };\n+\n+  static getActiveSelectOptions({ options }) {\n+    if (!options) {\n+      return [];\n+    }\n+\n+    const selected = [];\n+    for (let i = 0; i < options.length; i++) {\n+      if (options[i].selected) {\n+        selected.push(options[i].value);\n+      }\n+    }\n+\n+    return selected.filter(x => x);\n+  }\n+\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      filterText: null,\n+    };\n+\n+    this.handleApplyOption = ::this.handleApplyOption;\n+    this.handleRemoveOption = ::this.handleRemoveOption;\n+    this.onTextChange = ::this.onTextChange;\n+    this.convertValueToObj = ::this.convertValueToObj;\n+  }\n+\n+  onTextChange(event) {\n+    const { value } = event.target;\n+\n+    this.setState({\n+      filterText: value,\n+    });\n+  }\n+\n+  getDisplayedOptions() {\n+    const {\n+      options = [],\n+      value,\n+    } = this.props;\n+\n+    const selectedOptions = options.filter(option =>\n+      value.indexOf(option.value) === -1);\n+\n+    let displayedOptions = [].concat(selectedOptions)\n+      .map(option => option.value)\n+      .map(val =>\n+        (!val ? null : { ...this.convertValueToObj(val) }))\n+      .filter(x => x);\n+\n+    const {\n+      filterText,\n+    } = this.state;\n+\n+    if (filterText) {\n+      displayedOptions = displayedOptions.filter(option =>\n+        JSON.stringify(option).indexOf(filterText) > -1);\n+    }\n+\n+    return displayedOptions;\n+  }\n+\n+  handleApplyOption(event) {\n+    event.persist();\n+\n+    if (!this.availableRef) {\n+      return;\n+    }\n+\n+    const {\n+      value,\n+      onChange,\n+    } = this.props;\n+\n+    let selectedFilters = MultiPicker.getActiveSelectOptions(this.availableRef);\n+\n+    if (!selectedFilters || selectedFilters.length === 0) {\n+      selectedFilters = this.getDisplayedOptions();\n+      selectedFilters = selectedFilters.map(option => option.value);\n+    }\n+\n+    const newOptions = []\n+      .concat(value || [])\n+      .concat(selectedFilters);\n+\n+    // clear user input\n+    this.availableRef.value = null;\n+\n+    onChange(newOptions.join(','));\n+  }\n+\n+  handleRemoveOption(event) {", "body_text": "handleApplyOption/handleRemoveOption have been refactored down into one function, since they shared near-identical functionality.\nAs for splitting up the different sides of the MultiPicker, I'm unsure how that would work since we are reading values from refs, and splitting out those components would lose those references. I will investigate.", "in_reply_to_id": 105822921, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/595", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/106276826", "created_at": "2017-03-15T20:39:15Z", "author_association": "CONTRIBUTOR", "body": "`handleApplyOption`/`handleRemoveOption` have been refactored down into one function, since they shared near-identical functionality.\r\n\r\nAs for splitting up the different sides of the MultiPicker, I'm unsure how that would work since we are reading values from `ref`s, and splitting out those components would lose those references. I will investigate.", "updated_at": "2017-04-17T18:39:15Z", "html_url": "https://github.com/mozilla/normandy/pull/595#discussion_r106276826", "pull_request_review_id": 27191978, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/106276826"}, "html": {"href": "https://github.com/mozilla/normandy/pull/595#discussion_r106276826"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/595"}}, "commit_id": "4fa35e564b9c52cef07a720371a94f5cd0e1de76", "user": {"following_url": "https://api.github.com/users/andymikulski/following{/other_user}", "events_url": "https://api.github.com/users/andymikulski/events{/privacy}", "organizations_url": "https://api.github.com/users/andymikulski/orgs", "url": "https://api.github.com/users/andymikulski", "gists_url": "https://api.github.com/users/andymikulski/gists{/gist_id}", "html_url": "https://github.com/andymikulski", "subscriptions_url": "https://api.github.com/users/andymikulski/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/2767162?v=4", "repos_url": "https://api.github.com/users/andymikulski/repos", "received_events_url": "https://api.github.com/users/andymikulski/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/andymikulski/starred{/owner}{/repo}", "site_admin": false, "login": "andymikulski", "type": "User", "id": 2767162, "followers_url": "https://api.github.com/users/andymikulski/followers"}, "position": null, "path": "recipe-server/client/control/components/MultiPicker.js", "body_html": "<p><code>handleApplyOption</code>/<code>handleRemoveOption</code> have been refactored down into one function, since they shared near-identical functionality.</p>\n<p>As for splitting up the different sides of the MultiPicker, I'm unsure how that would work since we are reading values from <code>ref</code>s, and splitting out those components would lose those references. I will investigate.</p>", "original_commit_id": "06e1a003b7df1c373c774e52b1bb31eaeb7234ed", "id": 106276826}