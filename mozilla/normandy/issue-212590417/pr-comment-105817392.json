{"original_position": 191, "diff_hunk": "@@ -0,0 +1,234 @@\n+import React, { PropTypes as pt } from 'react';\n+\n+export default class MultiPicker extends React.Component {\n+  static propTypes = {\n+    unit: pt.string.isRequired,\n+    plural: pt.string.isRequired,\n+    options: pt.array,\n+    // from redux-form\n+    value: pt.oneOfType([pt.array, pt.string]),\n+    onChange: pt.func,\n+  };\n+\n+  static getActiveSelectOptions({ options }) {\n+    if (!options) {\n+      return [];\n+    }\n+\n+    const selected = [];\n+    for (let i = 0; i < options.length; i++) {\n+      if (options[i].selected) {\n+        selected.push(options[i].value);\n+      }\n+    }\n+\n+    return selected.filter(x => x);\n+  }\n+\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      filterText: null,\n+    };\n+\n+    this.handleApplyOption = ::this.handleApplyOption;\n+    this.handleRemoveOption = ::this.handleRemoveOption;\n+    this.onTextChange = ::this.onTextChange;\n+    this.convertValueToObj = ::this.convertValueToObj;\n+  }\n+\n+  onTextChange(event) {\n+    const { value } = event.target;\n+\n+    this.setState({\n+      filterText: value,\n+    });\n+  }\n+\n+  getDisplayedOptions() {\n+    const {\n+      options = [],\n+      value,\n+    } = this.props;\n+\n+    const selectedOptions = options.filter(option =>\n+      value.indexOf(option.value) === -1);\n+\n+    let displayedOptions = [].concat(selectedOptions)\n+      .map(option => option.value)\n+      .map(val =>\n+        (!val ? null : { ...this.convertValueToObj(val) }))\n+      .filter(x => x);\n+\n+    const {\n+      filterText,\n+    } = this.state;\n+\n+    if (filterText) {\n+      displayedOptions = displayedOptions.filter(option =>\n+        JSON.stringify(option).indexOf(filterText) > -1);\n+    }\n+\n+    return displayedOptions;\n+  }\n+\n+  handleApplyOption(event) {\n+    event.persist();\n+\n+    if (!this.availableRef) {\n+      return;\n+    }\n+\n+    const {\n+      value,\n+      onChange,\n+    } = this.props;\n+\n+    let selectedFilters = MultiPicker.getActiveSelectOptions(this.availableRef);\n+\n+    if (!selectedFilters || selectedFilters.length === 0) {\n+      selectedFilters = this.getDisplayedOptions();\n+      selectedFilters = selectedFilters.map(option => option.value);\n+    }\n+\n+    const newOptions = []\n+      .concat(value || [])\n+      .concat(selectedFilters);\n+\n+    // clear user input\n+    this.availableRef.value = null;\n+\n+    onChange(newOptions.join(','));\n+  }\n+\n+  handleRemoveOption(event) {\n+    event.persist();\n+    if (!this.selectedRef) {\n+      return;\n+    }\n+\n+    const {\n+      value,\n+      onChange,\n+    } = this.props;\n+\n+    const selectedFilters = MultiPicker.getActiveSelectOptions(this.selectedRef);\n+    let newOptions = []\n+      .concat(value || [])\n+      .filter(val => selectedFilters.indexOf(val) === -1);\n+\n+    if (!selectedFilters || selectedFilters.length === 0) {\n+      newOptions = [];\n+    }\n+\n+    // clear the user selection\n+    this.selectedRef.value = null;\n+\n+    onChange(newOptions.join(','));\n+  }\n+\n+  convertValueToObj(value) {\n+    const {\n+      options = [],\n+    } = this.props;\n+\n+    return options.find(option => option.value === value);\n+  }\n+\n+  /**\n+   * Render\n+   */\n+  render() {\n+    const {\n+      unit,\n+      plural,\n+      value,\n+    } = this.props;\n+\n+    let pickerValue = value || [];\n+\n+    if (value && typeof value === 'string') {\n+      pickerValue = pickerValue.split(',');\n+    }\n+\n+    pickerValue = pickerValue.map(this.convertValueToObj);\n+\n+    const displayedOptions = this.getDisplayedOptions();\n+\n+    const availableLabel = displayedOptions\n+      && (displayedOptions.length === 0 || displayedOptions.length > 1)\n+      ? plural : unit;\n+\n+    const selectedLabel = pickerValue\n+      && (pickerValue.length === 0 || pickerValue.length > 1)\n+      ? plural : unit;\n+\n+    return (\n+      <div className=\"multipicker\">\n+\n+        <div className=\"mp-frame mp-from\">\n+          {`Available ${availableLabel}`}\n+\n+          <input\n+            type=\"text\"\n+            placeholder={`Search ${plural}`}\n+            onChange={this.onTextChange}\n+          />\n+\n+          <select ref={ref => { this.availableRef = ref || this.availableRef; }} multiple>\n+            {\n+              (displayedOptions).map((option, idx) =>\n+                <option\n+                  key={idx}\n+                  title={option.value}\n+                  value={option.value}\n+                >\n+                  {option.label}\n+                </option>\n+              )\n+            }\n+          </select>\n+          <button type=\"button\" onClick={this.handleApplyOption}>Add {unit}</button>", "body_text": "If these behave the same as the arrows for moving between select boxes, we can remove these and keep the arrows without losing any functionality.", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/595", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/105817392", "created_at": "2017-03-14T02:45:51Z", "author_association": "MEMBER", "body": "If these behave the same as the arrows for moving between select boxes, we can remove these and keep the arrows without losing any functionality.", "updated_at": "2017-04-17T18:39:15Z", "html_url": "https://github.com/mozilla/normandy/pull/595#discussion_r105817392", "pull_request_review_id": 26681945, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/105817392"}, "html": {"href": "https://github.com/mozilla/normandy/pull/595#discussion_r105817392"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/595"}}, "commit_id": "4fa35e564b9c52cef07a720371a94f5cd0e1de76", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "position": null, "path": "recipe-server/client/control/components/MultiPicker.js", "body_html": "<p>If these behave the same as the arrows for moving between select boxes, we can remove these and keep the arrows without losing any functionality.</p>", "original_commit_id": "06e1a003b7df1c373c774e52b1bb31eaeb7234ed", "id": 105817392}