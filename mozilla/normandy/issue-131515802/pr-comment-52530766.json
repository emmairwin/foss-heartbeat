{"original_position": 25, "diff_hunk": "@@ -0,0 +1,38 @@\n+import json\n+\n+from django import forms\n+from django.core.exceptions import ValidationError\n+\n+import jsonschema\n+\n+\n+class ActionAdminForm(forms.ModelForm):\n+    def clean(self):\n+        \"\"\"\n+        Validate that the action being edited isn't currently in use.\n+        \"\"\"\n+        super().clean()\n+\n+        if self.instance.in_use:\n+            self.add_error(\n+                None,\n+                ValidationError('Action is currently in use and cannot be edited.')\n+            )\n+\n+\n+class RecipeActionInlineForm(forms.ModelForm):\n+    def clean(self):\n+        \"\"\"Validate the arguments against their schema.\"\"\"", "body_text": "I'm a little nervous about making this specific to the admin interface (and other things that use forms). Although right now this is the only way that recipes are created and edited, I can certainly image other ways in the future. Namely I'm thinking of API access to this, which I imagine we will want eventually.\nOne way we could handle this is to re-implement the schema validation logic in the API. I'm not excited about this. Another option would be to put this validation into the model somehow. That makes nice error messages harder though, I imagine.\nIs this something you want to worry about now? Or should we just kick it down the road until we actually have another editor of these models?\nAlso, tests for validation would be nice.", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/26", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/52530766", "created_at": "2016-02-10T21:46:05Z", "author_association": "MEMBER", "body": "I'm a little nervous about making this specific to the admin interface (and other things that use forms). Although right now this is the only way that recipes are created and edited, I can certainly image other ways in the future. Namely I'm thinking of API access to this, which I imagine we will want eventually.\n\nOne way we could handle this is to re-implement the schema validation logic in the API. I'm not excited about this. Another option would be to put this validation into the model somehow. That makes nice error messages harder though, I imagine.\n\nIs this something you want to worry about now? Or should we just kick it down the road until we actually have another editor of these models?\n\nAlso, tests for validation would be nice.\n", "updated_at": "2016-02-12T00:54:13Z", "html_url": "https://github.com/mozilla/normandy/pull/26#discussion_r52530766", "pull_request_review_id": null, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/52530766"}, "html": {"href": "https://github.com/mozilla/normandy/pull/26#discussion_r52530766"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/26"}}, "commit_id": "573f32168547b1a340b09b4dd65ee7ad87e8dc12", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "position": 26, "path": "normandy/recipes/forms.py", "body_html": "<p>I'm a little nervous about making this specific to the admin interface (and other things that use forms). Although right now this is the only way that recipes are created and edited, I can certainly image other ways in the future. Namely I'm thinking of API access to this, which I imagine we will want eventually.</p>\n<p>One way we could handle this is to re-implement the schema validation logic in the API. I'm not excited about this. Another option would be to put this validation into the model somehow. That makes nice error messages harder though, I imagine.</p>\n<p>Is this something you want to worry about now? Or should we just kick it down the road until we actually have another editor of these models?</p>\n<p>Also, tests for validation would be nice.</p>", "original_commit_id": "719faa6aeead0ce7e0f5bc99e1703170a2a7102e", "id": 52530766}