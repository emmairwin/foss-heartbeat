{"original_position": 84, "diff_hunk": "@@ -0,0 +1,205 @@\n+Filter Expressions\n+==================\n+Filter expressions describe which users a :ref:`recipe <recipes>` should be\n+executed for. They're executed locally in the client's browser and, if they\n+pass, the corresponding recipe is executed. Filter expressions have access to\n+information about the user, such as their location, locale, and Firefox version.\n+\n+Filter expressions are written using a language called JEXL_. JEXL is an\n+open-source expression language that is given a context (in this case,\n+information about the user's browser) and evaluates a statement using that\n+context. JEXL stands for \"JavaScript Expression Language\" and uses JavaScript\n+syntax for several (but not all) of its features.\n+\n+.. note:: The rest of this document includes examples of JEXL syntax that has\n+   comments inline with the expressions. JEXL does **not** have any support for\n+   comments in statements, but we're using them to make understanding our\n+   examples easier.\n+\n+.. _JEXL: https://github.com/TechnologyAdvice/Jexl\n+\n+JEXL Basics\n+-----------\n+The `JEXL Readme`_ describes the syntax of the language in detail; the following\n+section covers the basics of writing valid JEXL expressions.\n+\n+.. note:: Normally, JEXL doesn't allow newlines or other whitespace besides\n+   spaces in expressions, but filter expressions in Normandy allow arbitrary\n+   whitespace.\n+\n+A JEXL expression evaluates down to a single value. JEXL supports several basic\n+types, such as numbers, strings (single or double quoted), and booleans. JEXL\n+also supports several operators for combining values, such as arithmetic,\n+boolean operators, comparisons, and string concatenation.\n+\n+.. code-block:: javascript\n+\n+   // Arithmetic\n+   2 + 2 - 3 // == 1\n+\n+   // Numerical comparisons\n+   5 > 7 // == false\n+\n+   // Boolean operators\n+   false || 5 > 4 // == true\n+\n+   // String concatenation\n+   \"Mozilla\" + \" \" + \"Firefox\" // == \"Mozilla Firefox\"\n+\n+Expressions can be grouped using parenthesis:\n+\n+.. code-block:: javascript\n+\n+   ((2 + 3) * 3) - 3 // == 7\n+\n+JEXL also supports lists and objects (known as dictionaries in other languages)\n+as well as attribute access:\n+\n+.. code-block:: javascript\n+\n+   [1, 2, 1].length // == 3\n+   {foo: 1, bar: 2}.foo // == 1\n+\n+Unlike JavaScript, JEXL supports an ``in`` operator for checking if a substring\n+is in a string or if an element is in an array:\n+\n+.. code-block:: javascript\n+\n+   \"bar\" in \"foobarbaz\" // == true\n+   3 in [1, 2, 3, 4] // == true\n+\n+The context passed to JEXL can be expressed using identifiers, which also\n+support attribute access:\n+\n+.. code-block:: javascript\n+\n+   normandy.locale == 'en-US' // == true if the client's locale is en-US\n+\n+Another unique feature of JEXL is transforms, which modify the value given to\n+them. Transforms are applied to a value using the ``|`` operator, and may take\n+additional arguments passed in the expression:\n+\n+.. code-block:: javascript\n+\n+   'January 7th, 1980'|date // == a date object", "body_text": "This won't work, right now.\n> new Date('January 7th, 1980')\nInvalid Date\n\nThe values that work right now are, according the JS spec, ISO8601 format, or whatever the browser feels like today. Probably best to stick with ISO8601, like 1980-01-07.", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/194", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/70532521", "created_at": "2016-07-12T22:15:30Z", "author_association": "MEMBER", "body": "This won't work, right now.\n\n```\n> new Date('January 7th, 1980')\nInvalid Date\n```\n\nThe values that work right now are, according the JS spec, ISO8601 format, or whatever the browser feels like today. Probably best to stick with ISO8601, like `1980-01-07`.\n", "updated_at": "2016-07-14T17:17:45Z", "html_url": "https://github.com/mozilla/normandy/pull/194#discussion_r70532521", "pull_request_review_id": null, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/70532521"}, "html": {"href": "https://github.com/mozilla/normandy/pull/194#discussion_r70532521"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/194"}}, "commit_id": "f92a4dbaad17aac0e7436f11f659b847aba54fe6", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "position": null, "path": "docs/user/filter_expressions.rst", "body_html": "<p>This won't work, right now.</p>\n<pre><code>&gt; new Date('January 7th, 1980')\nInvalid Date\n</code></pre>\n<p>The values that work right now are, according the JS spec, ISO8601 format, or whatever the browser feels like today. Probably best to stick with ISO8601, like <code>1980-01-07</code>.</p>", "original_commit_id": "51844a10a9a09fa24aeb8744d49cce13594d6990", "id": 70532521}