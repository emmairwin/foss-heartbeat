{"body": "After reading the django-webpack-loader \"How to use in production\" section, I think adding a call to webpack to `Dockerfile` is the right way to go, so we get a `webpack-stats.json` in the image.\n\nI made this change to `Dockerfile`, and now running the server in Docker just works (I used Docker Compose and [normandy-compose](https://github.com/mythmon/normandy-compose) to do that). I suspect this will make the tests pass too.\n\n``` diff\ndiff --git a/Dockerfile b/Dockerfile\nindex 7f6a9da..0cef5c2 100644\n--- a/Dockerfile\n+++ b/Dockerfile\n@@ -11,10 +11,14 @@ RUN curl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -\n     apt-get update && apt-get install -y nodejs\n\n COPY ./requirements.txt /app/requirements.txt\n-RUN pip install -U 'pip>=8' && pip install --upgrade --no-cache-dir -r requirements.txt\n+COPY ./package.json /app/package.json\n+RUN pip install -U 'pip>=8' && \\\n+    pip install --upgrade --no-cache-dir -r requirements.txt && \\\n+    npm install\n\n COPY . /app\n-RUN DJANGO_CONFIGURATION=Build ./manage.py collectstatic --no-input && \\\n+RUN ./node_modules/.bin/webpack && \\\n+    DJANGO_CONFIGURATION=Build ./manage.py collectstatic --no-input && \\\n     mkdir -p media && chown app:app media && \\\n     mkdir -p __version__ && \\\n     git rev-parse HEAD > __version__/commit && \\\n```\n", "body_text": "After reading the django-webpack-loader \"How to use in production\" section, I think adding a call to webpack to Dockerfile is the right way to go, so we get a webpack-stats.json in the image.\nI made this change to Dockerfile, and now running the server in Docker just works (I used Docker Compose and normandy-compose to do that). I suspect this will make the tests pass too.\ndiff --git a/Dockerfile b/Dockerfile\nindex 7f6a9da..0cef5c2 100644\n--- a/Dockerfile\n+++ b/Dockerfile\n@@ -11,10 +11,14 @@ RUN curl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -\n     apt-get update && apt-get install -y nodejs\n\n COPY ./requirements.txt /app/requirements.txt\n-RUN pip install -U 'pip>=8' && pip install --upgrade --no-cache-dir -r requirements.txt\n+COPY ./package.json /app/package.json\n+RUN pip install -U 'pip>=8' && \\\n+    pip install --upgrade --no-cache-dir -r requirements.txt && \\\n+    npm install\n\n COPY . /app\n-RUN DJANGO_CONFIGURATION=Build ./manage.py collectstatic --no-input && \\\n+RUN ./node_modules/.bin/webpack && \\\n+    DJANGO_CONFIGURATION=Build ./manage.py collectstatic --no-input && \\\n     mkdir -p media && chown app:app media && \\\n     mkdir -p __version__ && \\\n     git rev-parse HEAD > __version__/commit && \\", "url": "https://api.github.com/repos/mozilla/normandy/issues/comments/215579219", "created_at": "2016-04-28T22:16:12Z", "author_association": "MEMBER", "html_url": "https://github.com/mozilla/normandy/pull/125#issuecomment-215579219", "updated_at": "2016-04-28T22:16:12Z", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "body_html": "<p>After reading the django-webpack-loader \"How to use in production\" section, I think adding a call to webpack to <code>Dockerfile</code> is the right way to go, so we get a <code>webpack-stats.json</code> in the image.</p>\n<p>I made this change to <code>Dockerfile</code>, and now running the server in Docker just works (I used Docker Compose and <a href=\"https://github.com/mythmon/normandy-compose\">normandy-compose</a> to do that). I suspect this will make the tests pass too.</p>\n<div class=\"highlight highlight-source-diff\"><pre><span class=\"pl-c1\">diff --git a/Dockerfile b/Dockerfile</span>\nindex 7f6a9da..0cef5c2 100644\n<span class=\"pl-md\">--- a/Dockerfile</span>\n<span class=\"pl-mi1\">+++ b/Dockerfile</span>\n<span class=\"pl-mdr\">@@ -11,10 +11,14 @@</span> RUN curl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -\n     apt-get update &amp;&amp; apt-get install -y nodejs\n\n COPY ./requirements.txt /app/requirements.txt\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>RUN pip install -U 'pip&gt;=8' &amp;&amp; pip install --upgrade --no-cache-dir -r requirements.txt</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>COPY ./package.json /app/package.json</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>RUN pip install -U 'pip&gt;=8' &amp;&amp; \\</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    pip install --upgrade --no-cache-dir -r requirements.txt &amp;&amp; \\</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    npm install</span>\n\n COPY . /app\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>RUN DJANGO_CONFIGURATION=Build ./manage.py collectstatic --no-input &amp;&amp; \\</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>RUN ./node_modules/.bin/webpack &amp;&amp; \\</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    DJANGO_CONFIGURATION=Build ./manage.py collectstatic --no-input &amp;&amp; \\</span>\n     mkdir -p media &amp;&amp; chown app:app media &amp;&amp; \\\n     mkdir -p __version__ &amp;&amp; \\\n     git rev-parse HEAD &gt; __version__/commit &amp;&amp; \\</pre></div>", "id": 215579219, "issue_url": "https://api.github.com/repos/mozilla/normandy/issues/125"}