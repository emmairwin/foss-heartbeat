{"original_position": 162, "diff_hunk": "@@ -0,0 +1,210 @@\n+/* This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n+\n+/**\n+ * @typedef {Object} Study\n+ * @property {string} name\n+ *   Unique name of the study\n+ * @property {string} version\n+ *   Study add-on version number\n+ * @property {string} description\n+ *   Description of the study and its intent.\n+ * @property {string} studyStartDate\n+ *   ISO-formatted date string of when the study was started.\n+ * @property {string} studyEndDate\n+ *   ISO-formatted date string of when the study was ended.\n+ * @property {string} addonId\n+ *   Add-on ID for this particular study.\n+ * @property {boolean} active\n+ *   Is the study still running?\n+ */\n+\n+\"use strict\";\n+\n+const {utils: Cu} = Components;\n+Cu.import(\"resource://gre/modules/XPCOMUtils.jsm\");\n+XPCOMUtils.defineLazyModuleGetter(this, \"IndexedDB\", \"resource://gre/modules/IndexedDB.jsm\");\n+\n+this.EXPORTED_SYMBOLS = [\"StudyStorage\"];\n+\n+const DB_NAME = \"shield-studies\";\n+let gDatabase;\n+\n+const DB_OPTIONS = {\n+  namespace: \"shield-study-addons\",\n+  version: 1,\n+  storage: \"persistent\",\n+  schema: {\n+    name: { type: \"string\", unique: true },\n+    version: { type: \"string\" },\n+    description: { type: \"string\" },\n+    studyStartDate: { type: \"number\" },\n+    studyEndDate: { type: \"number\" },\n+    addonId: { type: \"string\", },\n+    active: { type: \"boolean\" },\n+  },\n+};\n+\n+// Compares a given `data` object against the DB_OPTIONS.schema. Throws if a key\n+// that is not in the schema appears, or if the schema `type` does not match the\n+// given value type.\n+function validateSchema(data) {\n+  const {schema} = DB_OPTIONS;\n+\n+  Object.keys(data).forEach((dataKey) => {\n+    const incomingData = data[dataKey];\n+    const requiredType = schema[dataKey] && schema[dataKey].type;\n+\n+    if (!requiredType) {\n+      throw new Error(`Key \"${dataKey}\" does not exist in Study schema.`);\n+    }\n+\n+    // In some cases, the value will be empty, at which point we just want to\n+    // skip the rest of validation.\n+    if (typeof incomingData === \"undefined\" || incomingData === null) {\n+      return;\n+    }\n+\n+    // If the `type` is a function, it's going to be a class (like Map or Set),\n+    // otherwise we can assume it is a primitive type (like \"boolean\" or \"number\").\n+    const validates = typeof requiredType === \"function\" ?\n+      incomingData instanceof requiredType : typeof incomingData === requiredType;\n+\n+    if (!validates) {\n+      throw new Error(`Key \"${dataKey}\" must be of type \"${requiredType.name || requiredType}\"`);\n+    }\n+  });\n+}\n+\n+\n+// Creates new object store and populates that store's indexes.\n+function setupDatabase(db) {\n+  const {schema} = DB_OPTIONS;\n+  const store = db.createObjectStore(DB_NAME, { keyPath: \"name\" });\n+\n+  Object.keys(schema).forEach((schemaKey) => {\n+    store.createIndex(schemaKey, schemaKey, schema[schemaKey]);\n+  });\n+}\n+\n+// Determines if a DB connection/request already exists.\n+function hasDatabaseRequest() {\n+  return !!gDatabase;\n+}\n+\n+// Returns the currently active IDB connection, and creates one if not\n+// already present.\n+async function getDatabase() {\n+  if (!hasDatabaseRequest()) {\n+    // gDB is a Promise to prevent multiple calls to `IDB.open` - subsequent calls\n+    // will refer to this same promise, requiring only one `open` call internally.\n+    gDatabase = new Promise(async (resolve) => {\n+      const db = await IndexedDB.open(DB_NAME, DB_OPTIONS, setupDatabase);\n+      resolve(db);\n+    });\n+  }\n+\n+  return gDatabase;\n+}\n+\n+\n+this.StudyStorage = {\n+  /**\n+   * Clears all data from the connected IndexedDB.\n+   * @async\n+   */\n+  async clearAllData() {\n+    const db = await getDatabase();\n+    await db.objectStore(DB_NAME, \"readwrite\").clear();\n+  },\n+\n+  /**\n+   * If a database exists and is connected, disconnect and remove the reference\n+   * to that database.\n+   *\n+   * @async\n+   */\n+  async closeConnection() {\n+    if (hasDatabaseRequest()) {\n+      const db = await getDatabase();\n+      await db.close();\n+      gDatabase = null;\n+    }\n+  },\n+\n+  /**\n+   * Look up a Study based on the given unique name. Returns `null` if no study\n+   * is found in the DB.\n+   *\n+   * @async\n+   * @param  {string} studyName Unique name of study to retrieve.\n+   * @return {Promise<Study>}\n+   */\n+  async getStudy(studyName) {\n+    const db = await getDatabase();\n+\n+    const foundStudy = await db.objectStore(DB_NAME, \"readonly\").get(studyName);\n+\n+    return foundStudy || null;\n+  },\n+\n+  /**\n+   * Given a Study, validates its schema and saves the data into the DB's\n+   * objectStore instance.\n+   *\n+   * @async\n+   * @param  {Study}  study [description]\n+   * @return {Promise}\n+   */\n+  async saveStudy(study) {\n+    const {\n+      addonId, // The add-on ID", "body_text": "Nit-pickety me is confused about the order being different here compared to the newStudy assignment further down. It should probably be consistent. :-)", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/860", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/126279197", "created_at": "2017-07-08T10:05:49Z", "author_association": "CONTRIBUTOR", "body": "Nit-pickety me is confused about the order being different here compared to the `newStudy` assignment further down. It should probably be consistent. :-)", "updated_at": "2017-07-11T21:12:35Z", "html_url": "https://github.com/mozilla/normandy/pull/860#discussion_r126279197", "pull_request_review_id": 48753525, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/126279197"}, "html": {"href": "https://github.com/mozilla/normandy/pull/860#discussion_r126279197"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/860"}}, "commit_id": "f1440ec998aab5190ee6b3c661e89c7c45e49821", "user": {"following_url": "https://api.github.com/users/gijsk/following{/other_user}", "events_url": "https://api.github.com/users/gijsk/events{/privacy}", "organizations_url": "https://api.github.com/users/gijsk/orgs", "url": "https://api.github.com/users/gijsk", "gists_url": "https://api.github.com/users/gijsk/gists{/gist_id}", "html_url": "https://github.com/gijsk", "subscriptions_url": "https://api.github.com/users/gijsk/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/375983?v=4", "repos_url": "https://api.github.com/users/gijsk/repos", "received_events_url": "https://api.github.com/users/gijsk/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/gijsk/starred{/owner}{/repo}", "site_admin": false, "login": "gijsk", "type": "User", "id": 375983, "followers_url": "https://api.github.com/users/gijsk/followers"}, "position": null, "path": "recipe-client-addon/lib/StudyStorage.jsm", "body_html": "<p>Nit-pickety me is confused about the order being different here compared to the <code>newStudy</code> assignment further down. It should probably be consistent. :-)</p>", "original_commit_id": "a6698ba5a929c9b4814340b9feb3c16e90b8e4ad", "id": 126279197}