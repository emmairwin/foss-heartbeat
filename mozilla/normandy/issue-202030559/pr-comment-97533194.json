{"original_position": 33, "diff_hunk": "@@ -20,15 +19,13 @@ this.EventEmitter = function(driver) {\n       Promise.resolve()\n         .then(() => {\n           if (!(eventName in listeners)) {\n-            driver.log(`EventEmitter: Event fired with no listeners: ${eventName}`);\n+            log.info(`EventEmitter: Event fired with no listeners: ${eventName}`);\n             return;\n           }\n-          // freeze event to prevent handlers from modifying it\n-          const frozenEvent = Object.freeze(event);", "body_text": "I think in principle this looks OK from a leakiness-perspective... pushing to try to doublecheck wouldn't hurt. Just push to linux64 for only debug builds and only mochitest-bc and mochitest-e10s-bc tests and you should have an answer in relatively short order.\nSeparately though, you could still call emit() by eval'ing it inside the sandbox. It's a bit of a faff though, so if this works and offers the functionality we need, great.\nThough, thinking about this more... you now have 2 emitters, and you call emit() on the one that lives outside the sandbox. But that one won't have the handlers of the one inside the sandbox, right? I though the idea was that code inside a recipe could listen for events from the heartbeat infra? Am I wrong about that, or wrong about how we forward the handling of events, or something else? It looks like the heartbeat tests are using the heartbeat's eventEmitter property, not the sandboxed one, so they will keep working, but if I'm right then 'real' recipes might be broken.", "in_reply_to_id": 97058236, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/436", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/97533194", "created_at": "2017-01-24T12:13:16Z", "author_association": "CONTRIBUTOR", "body": "I think in principle this looks OK from a leakiness-perspective... pushing to try to doublecheck wouldn't hurt. Just push to linux64 for only debug builds and only mochitest-bc and mochitest-e10s-bc tests and you should have an answer in relatively short order.\r\n\r\nSeparately though, you could still call `emit()` by eval'ing it inside the sandbox. It's a bit of a faff though, so if this works and offers the functionality we need, great.\r\n\r\nThough, thinking about this more... you now have 2 emitters, and you call `emit()` on the one that lives outside the sandbox. But that one won't have the handlers of the one inside the sandbox, right? I though the idea was that code inside a recipe could listen for events from the heartbeat infra? Am I wrong about that, or wrong about how we forward the handling of events, or something else? It looks like the heartbeat tests are using the heartbeat's `eventEmitter` property, not the sandboxed one, so they will keep working, but if I'm right then 'real' recipes might be broken.", "updated_at": "2017-01-27T17:57:33Z", "html_url": "https://github.com/mozilla/normandy/pull/436#discussion_r97533194", "pull_request_review_id": 18144553, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/97533194"}, "html": {"href": "https://github.com/mozilla/normandy/pull/436#discussion_r97533194"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/436"}}, "commit_id": "87238c3cb90a13c27247a84fbe5c239ccca3778a", "user": {"following_url": "https://api.github.com/users/gijsk/following{/other_user}", "events_url": "https://api.github.com/users/gijsk/events{/privacy}", "organizations_url": "https://api.github.com/users/gijsk/orgs", "url": "https://api.github.com/users/gijsk", "gists_url": "https://api.github.com/users/gijsk/gists{/gist_id}", "html_url": "https://github.com/gijsk", "subscriptions_url": "https://api.github.com/users/gijsk/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/375983?v=4", "repos_url": "https://api.github.com/users/gijsk/repos", "received_events_url": "https://api.github.com/users/gijsk/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/gijsk/starred{/owner}{/repo}", "site_admin": false, "login": "gijsk", "type": "User", "id": 375983, "followers_url": "https://api.github.com/users/gijsk/followers"}, "position": 42, "path": "recipe-client-addon/lib/EventEmitter.jsm", "body_html": "<p>I think in principle this looks OK from a leakiness-perspective... pushing to try to doublecheck wouldn't hurt. Just push to linux64 for only debug builds and only mochitest-bc and mochitest-e10s-bc tests and you should have an answer in relatively short order.</p>\n<p>Separately though, you could still call <code>emit()</code> by eval'ing it inside the sandbox. It's a bit of a faff though, so if this works and offers the functionality we need, great.</p>\n<p>Though, thinking about this more... you now have 2 emitters, and you call <code>emit()</code> on the one that lives outside the sandbox. But that one won't have the handlers of the one inside the sandbox, right? I though the idea was that code inside a recipe could listen for events from the heartbeat infra? Am I wrong about that, or wrong about how we forward the handling of events, or something else? It looks like the heartbeat tests are using the heartbeat's <code>eventEmitter</code> property, not the sandboxed one, so they will keep working, but if I'm right then 'real' recipes might be broken.</p>", "original_commit_id": "877c57c4a5ba2dd61ae1f912de56838c2e10348f", "id": 97533194}