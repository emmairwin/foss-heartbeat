{"original_position": 50, "diff_hunk": "@@ -1,34 +1,42 @@\n /* This Source Code Form is subject to the terms of the Mozilla Public\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n-\n-// This file is meant to run inside action sandboxes\n-\n \"use strict\";\n \n+const {utils: Cu} = Components;\n+const {jsonCopy} = Cu.import(\"resource://shield-recipe-client/lib/Utils.jsm\", {});\n+Cu.import(\"resource://shield-recipe-client/lib/LogManager.jsm\");\n+\n+this.EXPORTED_SYMBOLS = [\"EventEmitter\"];\n \n-this.EventEmitter = function(driver) {\n-  if (!driver) {\n-    throw new Error(\"driver must be provided\");\n-  }\n+const log = LogManager.getLogger(\"event-emitter\");\n \n+this.EventEmitter = function(sandboxManager) {\n   const listeners = {};\n \n   return {\n+    createSandboxedEmitter() {\n+      return sandboxManager.cloneInto({\n+        on: this.on.bind(this),\n+        off: this.off.bind(this),\n+        once: this.once.bind(this),\n+      });\n+    },\n+\n     emit(eventName, event) {\n       // Fire events async\n       Promise.resolve()\n         .then(() => {\n           if (!(eventName in listeners)) {\n-            driver.log(`EventEmitter: Event fired with no listeners: ${eventName}`);\n+            log.info(`EventEmitter: Event fired with no listeners: ${eventName}`);\n             return;\n           }\n-          // freeze event to prevent handlers from modifying it\n-          const frozenEvent = Object.freeze(event);\n           // Clone callbacks array to avoid problems with mutation while iterating\n           const callbacks = Array.from(listeners[eventName]);\n           for (const cb of callbacks) {\n-            cb(frozenEvent);\n+            // Copy event to prevent modifcations leaking between callbacks.\n+            const copiedEvent = jsonCopy(event);\n+            cb(sandboxManager.cloneInto(copiedEvent));", "body_text": "Oh, so actually, the cloneInto here will guarantee every callback gets a fresh copy anyway.", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/436", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/97532642", "created_at": "2017-01-24T12:09:46Z", "author_association": "CONTRIBUTOR", "body": "Oh, so actually, the `cloneInto` here will guarantee every callback gets a fresh copy anyway.", "updated_at": "2017-01-27T17:57:33Z", "html_url": "https://github.com/mozilla/normandy/pull/436#discussion_r97532642", "pull_request_review_id": 18143996, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/97532642"}, "html": {"href": "https://github.com/mozilla/normandy/pull/436#discussion_r97532642"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/436"}}, "commit_id": "87238c3cb90a13c27247a84fbe5c239ccca3778a", "user": {"following_url": "https://api.github.com/users/gijsk/following{/other_user}", "events_url": "https://api.github.com/users/gijsk/events{/privacy}", "organizations_url": "https://api.github.com/users/gijsk/orgs", "url": "https://api.github.com/users/gijsk", "gists_url": "https://api.github.com/users/gijsk/gists{/gist_id}", "html_url": "https://github.com/gijsk", "subscriptions_url": "https://api.github.com/users/gijsk/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/375983?v=4", "repos_url": "https://api.github.com/users/gijsk/repos", "received_events_url": "https://api.github.com/users/gijsk/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/gijsk/starred{/owner}{/repo}", "site_admin": false, "login": "gijsk", "type": "User", "id": 375983, "followers_url": "https://api.github.com/users/gijsk/followers"}, "position": null, "path": "recipe-client-addon/lib/EventEmitter.jsm", "body_html": "<p>Oh, so actually, the <code>cloneInto</code> here will guarantee every callback gets a fresh copy anyway.</p>", "original_commit_id": "c2ef14098d2cfd13f833deb4a4c4712e3f21b749", "id": 97532642}