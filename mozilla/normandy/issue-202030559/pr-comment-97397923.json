{"original_position": 33, "diff_hunk": "@@ -20,15 +19,13 @@ this.EventEmitter = function(driver) {\n       Promise.resolve()\n         .then(() => {\n           if (!(eventName in listeners)) {\n-            driver.log(`EventEmitter: Event fired with no listeners: ${eventName}`);\n+            log.info(`EventEmitter: Event fired with no listeners: ${eventName}`);\n             return;\n           }\n-          // freeze event to prevent handlers from modifying it\n-          const frozenEvent = Object.freeze(event);", "body_text": "It does! And that almost works.\nThe problem with cloning the object into the sandbox is that we can't call emit on the cloned emitter without calling waiveXrays on it, and if we do that, then the resulting emitter in the privileged compartment can have callbacks attached to it, which the sandbox could then trigger by calling emit on the cloned emitter, which seems like a bad idea for potential future engineers who think adding callbacks to the emitter is an easy fix for some problem.\nSo, I tried re-introducing the sandbox parameter to the emitter, and creating a new emitter specifically for the sandbox that doesn't have emit. I'm not entirely sure how to reason about potential leaks now that we've reintroduced the sandbox parameter to the event emitter, so I wanted to check with you.\n@gijsk How does this latest commit look? Note that it's missing some tests and I haven't gone over it, just looking for feedback.", "in_reply_to_id": 97058236, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/436", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/97397923", "created_at": "2017-01-23T19:37:18Z", "author_association": "MEMBER", "body": "It does! And that _almost_ works.\r\n\r\nThe problem with cloning the object into the sandbox is that we can't call `emit` on the cloned emitter without calling `waiveXrays` on it, and if we do that, then the resulting emitter in the privileged compartment can have callbacks attached to it, which the sandbox could then trigger by calling `emit` on the cloned emitter, which seems like a bad idea for potential future engineers who think adding callbacks to the emitter is an easy fix for some problem.\r\n\r\nSo, I tried re-introducing the sandbox parameter to the emitter, and creating a new emitter specifically for the sandbox that doesn't have `emit`. I'm not entirely sure how to reason about potential leaks now that we've reintroduced the sandbox parameter to the event emitter, so I wanted to check with you. \r\n\r\n@gijsk How does this latest commit look? Note that it's missing some tests and I haven't gone over it, just looking for feedback.", "updated_at": "2017-01-27T17:57:33Z", "html_url": "https://github.com/mozilla/normandy/pull/436#discussion_r97397923", "pull_request_review_id": 18006138, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/97397923"}, "html": {"href": "https://github.com/mozilla/normandy/pull/436#discussion_r97397923"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/436"}}, "commit_id": "87238c3cb90a13c27247a84fbe5c239ccca3778a", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "position": 42, "path": "recipe-client-addon/lib/EventEmitter.jsm", "body_html": "<p>It does! And that <em>almost</em> works.</p>\n<p>The problem with cloning the object into the sandbox is that we can't call <code>emit</code> on the cloned emitter without calling <code>waiveXrays</code> on it, and if we do that, then the resulting emitter in the privileged compartment can have callbacks attached to it, which the sandbox could then trigger by calling <code>emit</code> on the cloned emitter, which seems like a bad idea for potential future engineers who think adding callbacks to the emitter is an easy fix for some problem.</p>\n<p>So, I tried re-introducing the sandbox parameter to the emitter, and creating a new emitter specifically for the sandbox that doesn't have <code>emit</code>. I'm not entirely sure how to reason about potential leaks now that we've reintroduced the sandbox parameter to the event emitter, so I wanted to check with you.</p>\n<p><a class=\"user-mention\" href=\"https://github.com/gijsk\">@gijsk</a> How does this latest commit look? Note that it's missing some tests and I haven't gone over it, just looking for feedback.</p>", "original_commit_id": "877c57c4a5ba2dd61ae1f912de56838c2e10348f", "id": 97397923}