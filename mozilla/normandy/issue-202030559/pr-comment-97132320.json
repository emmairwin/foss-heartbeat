{"original_position": 33, "diff_hunk": "@@ -20,15 +19,13 @@ this.EventEmitter = function(driver) {\n       Promise.resolve()\n         .then(() => {\n           if (!(eventName in listeners)) {\n-            driver.log(`EventEmitter: Event fired with no listeners: ${eventName}`);\n+            log.info(`EventEmitter: Event fired with no listeners: ${eventName}`);\n             return;\n           }\n-          // freeze event to prevent handlers from modifying it\n-          const frozenEvent = Object.freeze(event);", "body_text": "I blame @jimblandy for telling me this was a thing, and myself for not properly testing it. :P\nThe problem with freezing as it was before is that the cloned object passed in to emit is a proxy object (because it has been cloned into another compartment, so we get an xrayed wrapper? I think) and throws when you try to freeze it.\nSo we need to freeze inside of the sandbox, but IIRC there were concerns with the EventEmitter class having a reference to the sandbox and also being cloned into it due to memory leaks and/or potential security issues. So I was hoping to avoid the EventEmitter class itself having a reference to the sandbox.\nI'll see if I can find a way around this, and will report back.", "in_reply_to_id": 97058236, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/436", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/97132320", "created_at": "2017-01-20T18:56:46Z", "author_association": "MEMBER", "body": "I blame @jimblandy for telling me this was a thing, and myself for not properly testing it. :P\r\n\r\nThe problem with freezing as it was before is that the cloned object passed in to `emit` is a proxy object (because it has been cloned into another compartment, so we get an xrayed wrapper? I think) and throws when you try to freeze it. \r\n\r\nSo we need to freeze inside of the sandbox, but IIRC there were concerns with the EventEmitter class having a reference to the sandbox and also being cloned into it due to memory leaks and/or potential security issues. So I was hoping to avoid the EventEmitter class itself having a reference to the sandbox.\r\n\r\nI'll see if I can find a way around this, and will report back.", "updated_at": "2017-01-27T17:57:33Z", "html_url": "https://github.com/mozilla/normandy/pull/436#discussion_r97132320", "pull_request_review_id": 17740296, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/97132320"}, "html": {"href": "https://github.com/mozilla/normandy/pull/436#discussion_r97132320"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/436"}}, "commit_id": "87238c3cb90a13c27247a84fbe5c239ccca3778a", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "position": 42, "path": "recipe-client-addon/lib/EventEmitter.jsm", "body_html": "<p>I blame <a class=\"user-mention\" href=\"https://github.com/jimblandy\">@jimblandy</a> for telling me this was a thing, and myself for not properly testing it. :P</p>\n<p>The problem with freezing as it was before is that the cloned object passed in to <code>emit</code> is a proxy object (because it has been cloned into another compartment, so we get an xrayed wrapper? I think) and throws when you try to freeze it.</p>\n<p>So we need to freeze inside of the sandbox, but IIRC there were concerns with the EventEmitter class having a reference to the sandbox and also being cloned into it due to memory leaks and/or potential security issues. So I was hoping to avoid the EventEmitter class itself having a reference to the sandbox.</p>\n<p>I'll see if I can find a way around this, and will report back.</p>", "original_commit_id": "877c57c4a5ba2dd61ae1f912de56838c2e10348f", "id": 97132320}