{"original_position": 136, "diff_hunk": "@@ -0,0 +1,166 @@\n+\"use strict\";\n+\n+Cu.import(\"resource://gre/modules/Preferences.jsm\", this);\n+Cu.import(\"resource://gre/modules/TelemetryEnvironment.jsm\", this);\n+Cu.import(\"resource://shield-recipe-client/lib/PreferenceManagement.jsm\", this);\n+\n+// Save ourselves some typing\n+const Manager = PreferenceManagement(\"test\");\n+const withMockData = Manager.withMockData.bind(Manager);\n+\n+const DefaultPreferences = new Preferences({defaultBranch: true});\n+\n+function experimentFactory(attrs) {\n+  return Object.assign({\n+    name: \"fakename\",\n+    branch: \"fakebranch\",\n+    expired: false,\n+    lastSeen: new Date().toJSON(),\n+    preferenceName: \"fake.preference\",\n+    preferenceValue: \"falkevalue\",\n+    preferenceType: \"string\",\n+    previousPreferenceValue: \"oldfakevalue\",\n+    preferenceBranchType: \"default\",\n+  }, attrs);\n+}\n+\n+// clearStorage\n+add_task(withMockData(async function(experiments) {\n+  experiments[\"test\"] = experimentFactory({name: \"test\"});\n+\n+  ok(await Manager.has(\"test\"), \"Mock experiment is detected.\");\n+  await Manager.clearStorage();\n+  ok(\n+    !(await Manager.has(\"test\")),\n+    \"clearStorage removed all stored experiments\",\n+  );\n+}));\n+\n+\n+// startObserver should throw if an observer for the experiment is already\n+// active.\n+add_task(withMockData(async function() {\n+  Manager.startObserver(\"test\", \"fake.preference\", \"newvalue\");\n+  Assert.throws(\n+    () => Manager.startObserver(\"test\", \"another.fake\", \"othervalue\"),\n+    \"startObserver threw due to a conflicting active observer\",\n+  );\n+  Manager.stopAllObservers();\n+}));\n+\n+add_task(withMockData(async function testHasObserver() {\n+  Manager.startObserver(\"test\", \"fake.preference\", \"experimentValue\");\n+\n+  ok(await Manager.hasObserver(\"test\"), \"hasObserver detects active observers\");\n+  ok(\n+    !(await Manager.hasObserver(\"missing\")),\n+    \"hasObserver doesn't detect inactive observers\",\n+  );\n+\n+  Manager.stopAllObservers();\n+}));\n+\n+// stopObserver should throw if there is no observer active for it to stop.\n+add_task(withMockData(async function() {\n+  Assert.throws(\n+    () => Manager.stopObserver(\"neveractive\", \"another.fake\", \"othervalue\"),\n+    \"stopObserver threw because there was not matching active observer\",\n+  );\n+}));\n+\n+// markLastSeen should throw if it can't find a matching experiment\n+add_task(withMockData(async function() {\n+  await Assert.rejects(\n+    Manager.markLastSeen(\"neveractive\"),\n+    \"markLastSeen threw because there was not a matching experiment\",\n+  );\n+}));\n+\n+// markLastSeen should update the lastSeen date\n+add_task(withMockData(async function(experiments) {\n+  const oldDate = new Date(1988, 10, 1).toJSON();\n+  experiments[\"test\"] = experimentFactory({name: \"test\", lastSeen: oldDate});\n+  await Manager.markLastSeen(\"test\");\n+  Assert.notEqual(\n+    experiments[\"test\"].lastSeen,\n+    oldDate,\n+    \"markLastSeen updated the experiment lastSeen date\",\n+  );\n+}));\n+\n+// get should throw if no experiment exists with the given name\n+add_task(withMockData(async function() {\n+  await Assert.rejects(\n+    Manager.get(\"neverexisted\"),\n+    \"get rejects if no experiment with the given name is found\",\n+  );\n+}));\n+\n+// get\n+add_task(withMockData(async function(experiments) {\n+  const experiment = experimentFactory({name: \"test\"});\n+  experiments[\"test\"] = experiment;\n+\n+  const fetchedExperiment = await Manager.get(\"test\");\n+  Assert.deepEqual(fetchedExperiment, experiment, \"get fetches the correct experiment\");\n+\n+  // Modifying the fetched experiment must not edit the data source.\n+  fetchedExperiment.name = \"othername\";\n+  is(experiments[\"test\"].name, \"test\", \"get returns a copy of the experiment\");\n+}));\n+\n+add_task(withMockData(async function testGetActiveChanges(experiments) {\n+  const experiment1 = experimentFactory({name: \"experiment1\"});\n+  const experiment2 = experimentFactory({name: \"experiment2\", disabled: true});\n+  experiments[\"experiment1\"] = experiment1;\n+  experiments[\"experiment2\"] = experiment2;\n+\n+  const fetchedExperiments = await Manager.getActiveChanges();\n+  is(fetchedExperiments.length, 2, \"getActiveChanges returns a list of all stored experiments\");\n+  Assert.deepEqual(\n+    fetchedExperiments.find(e => e.name === \"experiment1\"),\n+    experiment1,\n+    \"getActiveChanges returns a list with the correct experiments\",\n+  );\n+  const fetchedExperiment2 = fetchedExperiments.find(e => e.name === \"experiment2\");\n+  Assert.deepEqual(\n+    fetchedExperiment2,\n+    experiment2,\n+    \"getActiveChanges returns a list with the correct experiments, including disabled ones\",\n+  );\n+\n+  fetchedExperiment2.name = \"othername\";\n+  is(experiment2.name, \"experiment2\", \"getActiveChanges returns copies of the experiments\");\n+}));\n+\n+add_task(withMockData(withMockPreferences(async function testGetActiveChanges(experiments) {", "body_text": "Please make sure your functions have unique names, even if they're function expressions rather than globals. :-)", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/724", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/118460699", "created_at": "2017-05-25T10:39:05Z", "author_association": "CONTRIBUTOR", "body": "Please make sure your functions have unique names, even if they're function expressions rather than globals. :-)", "updated_at": "2017-06-12T21:44:43Z", "html_url": "https://github.com/mozilla/normandy/pull/724#discussion_r118460699", "pull_request_review_id": 40240947, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/118460699"}, "html": {"href": "https://github.com/mozilla/normandy/pull/724#discussion_r118460699"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/724"}}, "commit_id": "46651e36e3771d2c4d90f6529a28ef814e4d9e4b", "user": {"following_url": "https://api.github.com/users/gijsk/following{/other_user}", "events_url": "https://api.github.com/users/gijsk/events{/privacy}", "organizations_url": "https://api.github.com/users/gijsk/orgs", "url": "https://api.github.com/users/gijsk", "gists_url": "https://api.github.com/users/gijsk/gists{/gist_id}", "html_url": "https://github.com/gijsk", "subscriptions_url": "https://api.github.com/users/gijsk/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/375983?v=4", "repos_url": "https://api.github.com/users/gijsk/repos", "received_events_url": "https://api.github.com/users/gijsk/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/gijsk/starred{/owner}{/repo}", "site_admin": false, "login": "gijsk", "type": "User", "id": 375983, "followers_url": "https://api.github.com/users/gijsk/followers"}, "position": null, "path": "recipe-client-addon/test/browser/browser_PreferenceManagement.js", "body_html": "<p>Please make sure your functions have unique names, even if they're function expressions rather than globals. :-)</p>", "original_commit_id": "56b772323bbfb68cf5f7771579c1c1d213fe33f0", "id": 118460699}