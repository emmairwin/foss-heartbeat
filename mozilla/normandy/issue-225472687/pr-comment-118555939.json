{"original_position": 84, "diff_hunk": "@@ -0,0 +1,166 @@\n+\"use strict\";\n+\n+Cu.import(\"resource://gre/modules/Preferences.jsm\", this);\n+Cu.import(\"resource://gre/modules/TelemetryEnvironment.jsm\", this);\n+Cu.import(\"resource://shield-recipe-client/lib/PreferenceManagement.jsm\", this);\n+\n+// Save ourselves some typing\n+const Manager = PreferenceManagement(\"test\");\n+const withMockData = Manager.withMockData.bind(Manager);\n+\n+const DefaultPreferences = new Preferences({defaultBranch: true});\n+\n+function experimentFactory(attrs) {\n+  return Object.assign({\n+    name: \"fakename\",\n+    branch: \"fakebranch\",\n+    expired: false,\n+    lastSeen: new Date().toJSON(),\n+    preferenceName: \"fake.preference\",\n+    preferenceValue: \"falkevalue\",\n+    preferenceType: \"string\",\n+    previousPreferenceValue: \"oldfakevalue\",\n+    preferenceBranchType: \"default\",\n+  }, attrs);\n+}\n+\n+// clearStorage\n+add_task(withMockData(async function(experiments) {\n+  experiments[\"test\"] = experimentFactory({name: \"test\"});\n+\n+  ok(await Manager.has(\"test\"), \"Mock experiment is detected.\");\n+  await Manager.clearStorage();\n+  ok(\n+    !(await Manager.has(\"test\")),\n+    \"clearStorage removed all stored experiments\",\n+  );\n+}));\n+\n+\n+// startObserver should throw if an observer for the experiment is already\n+// active.\n+add_task(withMockData(async function() {\n+  Manager.startObserver(\"test\", \"fake.preference\", \"newvalue\");\n+  Assert.throws(\n+    () => Manager.startObserver(\"test\", \"another.fake\", \"othervalue\"),\n+    \"startObserver threw due to a conflicting active observer\",\n+  );\n+  Manager.stopAllObservers();\n+}));\n+\n+add_task(withMockData(async function testHasObserver() {\n+  Manager.startObserver(\"test\", \"fake.preference\", \"experimentValue\");\n+\n+  ok(await Manager.hasObserver(\"test\"), \"hasObserver detects active observers\");\n+  ok(\n+    !(await Manager.hasObserver(\"missing\")),\n+    \"hasObserver doesn't detect inactive observers\",\n+  );\n+\n+  Manager.stopAllObservers();\n+}));\n+\n+// stopObserver should throw if there is no observer active for it to stop.\n+add_task(withMockData(async function() {\n+  Assert.throws(\n+    () => Manager.stopObserver(\"neveractive\", \"another.fake\", \"othervalue\"),\n+    \"stopObserver threw because there was not matching active observer\",\n+  );\n+}));\n+\n+// markLastSeen should throw if it can't find a matching experiment\n+add_task(withMockData(async function() {\n+  await Assert.rejects(\n+    Manager.markLastSeen(\"neveractive\"),\n+    \"markLastSeen threw because there was not a matching experiment\",\n+  );\n+}));\n+\n+// markLastSeen should update the lastSeen date\n+add_task(withMockData(async function(experiments) {\n+  const oldDate = new Date(1988, 10, 1).toJSON();\n+  experiments[\"test\"] = experimentFactory({name: \"test\", lastSeen: oldDate});\n+  await Manager.markLastSeen(\"test\");\n+  Assert.notEqual(", "body_text": "The dates are converted toJSON, which stringifies the datetime to YYYY-MM-DDTHH:mm:ss.sssZ format, so comparisons should be fine. I can look at enforcing the date check.", "in_reply_to_id": 118460152, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/724", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/118555939", "created_at": "2017-05-25T18:44:15Z", "author_association": "CONTRIBUTOR", "body": "The dates are converted `toJSON`, which stringifies the datetime to `YYYY-MM-DDTHH:mm:ss.sssZ` format, so comparisons should be fine. I can look at enforcing the date check.", "updated_at": "2017-06-12T21:44:43Z", "html_url": "https://github.com/mozilla/normandy/pull/724#discussion_r118555939", "pull_request_review_id": 40359841, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/118555939"}, "html": {"href": "https://github.com/mozilla/normandy/pull/724#discussion_r118555939"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/724"}}, "commit_id": "46651e36e3771d2c4d90f6529a28ef814e4d9e4b", "user": {"following_url": "https://api.github.com/users/andymikulski/following{/other_user}", "events_url": "https://api.github.com/users/andymikulski/events{/privacy}", "organizations_url": "https://api.github.com/users/andymikulski/orgs", "url": "https://api.github.com/users/andymikulski", "gists_url": "https://api.github.com/users/andymikulski/gists{/gist_id}", "html_url": "https://github.com/andymikulski", "subscriptions_url": "https://api.github.com/users/andymikulski/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/2767162?v=4", "repos_url": "https://api.github.com/users/andymikulski/repos", "received_events_url": "https://api.github.com/users/andymikulski/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/andymikulski/starred{/owner}{/repo}", "site_admin": false, "login": "andymikulski", "type": "User", "id": 2767162, "followers_url": "https://api.github.com/users/andymikulski/followers"}, "position": null, "path": "recipe-client-addon/test/browser/browser_PreferenceManagement.js", "body_html": "<p>The dates are converted <code>toJSON</code>, which stringifies the datetime to <code>YYYY-MM-DDTHH:mm:ss.sssZ</code> format, so comparisons should be fine. I can look at enforcing the date check.</p>", "original_commit_id": "56b772323bbfb68cf5f7771579c1c1d213fe33f0", "id": 118555939}