{"original_position": 193, "diff_hunk": "@@ -0,0 +1,395 @@\n+/* This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n+\n+/**\n+ * PreferenceManagement exposes an API for recipes such as Preference Experiments\n+ * to handle manipulating default/user branch preferences. Recipes should extend\n+ * this module.\n+ *\n+ * Info on active and past recipes is stored in a JSON file in the profile\n+ * folder. Preference observers can also be tracked/instantiated/etc.\n+ */\n+\"use strict\";\n+\n+const {utils: Cu} = Components;\n+Cu.import(\"resource://gre/modules/XPCOMUtils.jsm\");\n+\n+XPCOMUtils.defineLazyModuleGetter(this, \"Services\", \"resource://gre/modules/Services.jsm\");\n+XPCOMUtils.defineLazyModuleGetter(this, \"CleanupManager\", \"resource://shield-recipe-client/lib/CleanupManager.jsm\");\n+XPCOMUtils.defineLazyModuleGetter(this, \"JSONFile\", \"resource://gre/modules/JSONFile.jsm\");\n+XPCOMUtils.defineLazyModuleGetter(this, \"OS\", \"resource://gre/modules/osfile.jsm\");\n+XPCOMUtils.defineLazyModuleGetter(this, \"LogManager\", \"resource://shield-recipe-client/lib/LogManager.jsm\");\n+XPCOMUtils.defineLazyModuleGetter(this, \"Preferences\", \"resource://gre/modules/Preferences.jsm\");\n+XPCOMUtils.defineLazyModuleGetter(this, \"TelemetryEnvironment\", \"resource://gre/modules/TelemetryEnvironment.jsm\");\n+\n+this.EXPORTED_SYMBOLS = [\"PreferenceManagement\"];\n+\n+const STORE_FILE = \"shield-preference-recipes.json\";\n+\n+const PREFERENCE_TYPE_MAP = {\n+  boolean: Services.prefs.PREF_BOOL,\n+  string: Services.prefs.PREF_STRING,\n+  integer: Services.prefs.PREF_INT,\n+};\n+\n+const DefaultPreferences = new Preferences({defaultBranch: true});\n+/**\n+ * Enum storing Preference modules for each type of preference branch.\n+ * @enum {Object}\n+ */\n+const PreferenceBranchType = {\n+  user: Preferences,\n+  default: DefaultPreferences,\n+};\n+\n+const log = LogManager.getLogger(\"preference-management\");\n+\n+this.PreferenceManagement = (namespace) => ({\n+  preferenceObservers: new Map(),\n+\n+  // Internal 'store loaded' tracking object\n+  storePromise: undefined,\n+\n+  /**\n+   * Asynchronously loads the local JSON file used for storage, returning the\n+   * request Promise.\n+   *\n+   * @returns {Promise}\n+   * @resolves When the operation is completed succesfully\n+   * @rejects Javascript exception.\n+   */\n+  ensureStorage() {\n+    if (this.storePromise === undefined) {\n+      const path = OS.Path.join(OS.Constants.Path.profileDir, STORE_FILE);\n+      const storage = new JSONFile({path});\n+      this.storePromise = storage.load().then(() => storage);\n+    }\n+    return this.storePromise;\n+  },\n+\n+  /**\n+   * Returns the internal storage object, after properly ensuring the store and\n+   * store namespace are initiated.\n+   *\n+   * @returns {Promise}\n+   * @resolves When the operation is completed succesfully\n+   * @rejects Javascript exception.\n+   */\n+  async getStorage() {\n+    const store = await this.ensureStorage();\n+    store.data = store.data || {};\n+    store.data[namespace] = store.data[namespace] || {};\n+    store.saveSoon();\n+\n+    return store;\n+  },\n+\n+  /**\n+   * Clears the namespaced storage.\n+   *\n+   * @returns {Promise}\n+   * @resolves When the operation is completed succesfully\n+   * @rejects Javascript exception.\n+   */\n+  async clearStorage() {\n+    const store = await this.getStorage();\n+    store.data[namespace] = {};\n+    store.saveSoon();\n+  },\n+\n+\n+  /**\n+   * Returns the internal storage object, after properly ensuring the store and\n+   * store namespace are initiated.\n+   *\n+   * @returns {Promise}\n+   * @resolves When the operation is completed succesfully\n+   * @rejects Javascript exception.\n+   */\n+  async setStorageItem(key, value) {\n+    const store = await this.getStorage();\n+    store.data[namespace][key] = value;\n+  },\n+\n+  /**\n+   * Test wrapper that temporarily replaces the stored recipe data with fake\n+   * data for testing. Given a test function, mocks the data store, then executes\n+   * that function.\n+   */\n+  withMockData(testFunction) {\n+    // We use a POJO to fake the internal storage.\n+    this.mockData = {\n+      [namespace]: {},\n+    };\n+\n+    return async (...args) => {\n+      this.storePromise = Promise.resolve({\n+        data: this.mockData,\n+        saveSoon() {},\n+      });\n+\n+      try {\n+        // Tests directly edit store values, so for test functions, the relevant\n+        // namespace is exposed for brevity.\n+        await testFunction(this.mockData[namespace], ...args)\n+      } finally {\n+        this.stopAllObservers();\n+\n+        // Clear up any remnants from the test function\n+        this.clearStorage();\n+\n+        // Undo the mock storage\n+        this.storePromise = undefined;\n+      }\n+\n+      // ensureStorage will use the fake `storePromise`, returning mock data.\n+      return await this.ensureStorage();\n+    };\n+  },\n+\n+  /**\n+   * Looks up active recipes in the local store that modify preference values,\n+   * and applies those changes across Default/User prefs.\n+   *\n+   * @returns {Promise}\n+   * @resolves When the operation is completed succesfully\n+   * @rejects Javascript exception.\n+   */\n+  async applyAll() {\n+    // On shutdown, clear all the observers that we're about to instantiate.\n+    CleanupManager.addCleanupHandler(this.stopAllObservers.bind(this));\n+\n+    for (const recipe of await this.getActiveChanges()) {\n+      // Select the User or Default branch, then update the recipe's preference\n+      // with the appropriate value.\n+      const prefs = this.getPreferenceBranch(recipe.preferenceBranchType);\n+      prefs.set(recipe.preferenceName, recipe.preferenceValue);\n+\n+      // Notify Telemetry of recipes we're running, since they don't persist between restarts\n+      TelemetryEnvironment.setExperimentActive(recipe.name, recipe.branch);\n+\n+      // Watch for changes to the recipe's preference\n+      this.startObserver(recipe.name, recipe.preferenceName, recipe.preferenceValue);\n+    }\n+  },\n+\n+  /**\n+   * Returns a reference to either the Default or User preferences branch\n+   *\n+   * @param  {string} which Branch to return ('user' or 'default')\n+   * @return {Object}       Selected preferences branch\n+   */\n+  getPreferenceBranch(which) {\n+    const branch = PreferenceBranchType[which];\n+    if (!branch) {\n+      throw new Error(`Invalid value for preference branch: \"${which}\"`);\n+    }\n+\n+    return branch;\n+  },\n+\n+  /**\n+   * Register a preference observer that stops an recipe when the user", "body_text": "Nit: a recipe", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/724", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/118457466", "created_at": "2017-05-25T10:16:54Z", "author_association": "CONTRIBUTOR", "body": "Nit: a recipe", "updated_at": "2017-06-12T21:44:43Z", "html_url": "https://github.com/mozilla/normandy/pull/724#discussion_r118457466", "pull_request_review_id": 40240947, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/118457466"}, "html": {"href": "https://github.com/mozilla/normandy/pull/724#discussion_r118457466"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/724"}}, "commit_id": "46651e36e3771d2c4d90f6529a28ef814e4d9e4b", "user": {"following_url": "https://api.github.com/users/gijsk/following{/other_user}", "events_url": "https://api.github.com/users/gijsk/events{/privacy}", "organizations_url": "https://api.github.com/users/gijsk/orgs", "url": "https://api.github.com/users/gijsk", "gists_url": "https://api.github.com/users/gijsk/gists{/gist_id}", "html_url": "https://github.com/gijsk", "subscriptions_url": "https://api.github.com/users/gijsk/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/375983?v=4", "repos_url": "https://api.github.com/users/gijsk/repos", "received_events_url": "https://api.github.com/users/gijsk/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/gijsk/starred{/owner}{/repo}", "site_admin": false, "login": "gijsk", "type": "User", "id": 375983, "followers_url": "https://api.github.com/users/gijsk/followers"}, "position": null, "path": "recipe-client-addon/lib/PreferenceManagement.jsm", "body_html": "<p>Nit: a recipe</p>", "original_commit_id": "56b772323bbfb68cf5f7771579c1c1d213fe33f0", "id": 118457466}