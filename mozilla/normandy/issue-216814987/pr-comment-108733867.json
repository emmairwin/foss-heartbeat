{"original_position": 4, "diff_hunk": "@@ -31,8 +31,11 @@ this.NormandyDriver = function(sandboxManager) {\n   }\n   const {sandbox} = sandboxManager;\n \n+  Storage.seedDurability(sandbox);", "body_text": "@andymikulski and I chatted in Vidyo about this. To summarize for the record, the main confusion is that when I said\n\nthis will count only the first recipe run the first time as non-durable\n\nWhat I was saying is that when storage has not proven itself to be durable, with the current code the first recipe to execute would see storage as not-proven-durable correctly, and all the other executed recipes would incorrectly see storage as durable.\nThe self-repair check looking for 2 was an implementation detail relating to how it handled retrieving and incrementing the number. It would have a value of 1 the first time, and never have a value of 0, so only a value of 2 would represent durability to Firefox restarting.\nWe also cleared up that sandboxes are annoying and confusing and complicate this a bit.", "in_reply_to_id": 108527660, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/633", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/108733867", "created_at": "2017-03-29T17:13:48Z", "author_association": "MEMBER", "body": "@andymikulski and I chatted in Vidyo about this. To summarize for the record, the main confusion is that when I said\r\n\r\n> this will count only the first recipe run the first time as non-durable\r\n\r\nWhat I was saying is that when storage has not proven itself to be durable, with the current code the first recipe to execute would see storage as not-proven-durable correctly, and all the other executed recipes would incorrectly see storage as durable.\r\n\r\nThe self-repair check looking for 2 was an implementation detail relating to how it handled retrieving and incrementing the number. It would have a value of 1 the first time, and never have a value of 0, so only a value of 2 would represent durability to Firefox restarting.\r\n\r\nWe also cleared up that sandboxes are annoying and confusing and complicate this a bit.", "updated_at": "2017-03-31T17:53:47Z", "html_url": "https://github.com/mozilla/normandy/pull/633#discussion_r108733867", "pull_request_review_id": 29785085, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/108733867"}, "html": {"href": "https://github.com/mozilla/normandy/pull/633#discussion_r108733867"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/633"}}, "commit_id": "ced6ba379fc6d24d135c186440c27c9d64326b5e", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "position": null, "path": "recipe-client-addon/lib/NormandyDriver.jsm", "body_html": "<p><a class=\"user-mention\" href=\"https://github.com/andymikulski\">@andymikulski</a> and I chatted in Vidyo about this. To summarize for the record, the main confusion is that when I said</p>\n<blockquote>\n<p>this will count only the first recipe run the first time as non-durable</p>\n</blockquote>\n<p>What I was saying is that when storage has not proven itself to be durable, with the current code the first recipe to execute would see storage as not-proven-durable correctly, and all the other executed recipes would incorrectly see storage as durable.</p>\n<p>The self-repair check looking for 2 was an implementation detail relating to how it handled retrieving and incrementing the number. It would have a value of 1 the first time, and never have a value of 0, so only a value of 2 would represent durability to Firefox restarting.</p>\n<p>We also cleared up that sandboxes are annoying and confusing and complicate this a bit.</p>", "original_commit_id": "9c3ec361368d18a6ee65b66c0c754b16e0588975", "id": 108733867}