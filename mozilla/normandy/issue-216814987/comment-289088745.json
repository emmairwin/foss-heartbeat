{"body": "> * Should non-durable storage throw errors?\r\n\r\nIn self-repair, it does by default and there is an option to override this when creating a storage object. I think we should keep this behavior for now.\r\n\r\n> - Right now I have it set up so that when Storage is created, it seeds the durability check, and then every read/write after that it checks the durability.\r\n>  - Does it matter if the durability is set to 0 for each new Storage? Should it retain the existing value for any reason?\r\n>  - Is it overkill to run a durability check on each read/write? On selfrepair we check on every read, fwiw.\r\n\r\nI think there might be some confusion here about what \"durability\" means in this context. Which is entirely fair. I haven't really explained it, and the code is rather vague. Durability here means that data written to the storage objects *persists after Firefox restarts*. This is specifically to prevent a bug we had where due to a bug in the storage driver, the entire country of Australia got a heartbeat prompt every time they started the browser for about a week. (This incident was all pre-Normandy).\r\n\r\nSo having independent durability for each prefix is going to be problematic. It means that the first time every heartbeat runs, it won't consider storage to be durable, and will likely fail. It means that if a recipe only runs once, it will never work.\r\n\r\nIn self-repair we *read* the durability values on every call to `getItem`, but we only update the durability when we create a new driver object, which we do once per page load of self-repair. This should probably be called by the driver, and shouldn't be available to the actions.\r\n\r\n> - Is `store.saveSoon()` necessary to save the durability key update? I'm assuming so.\r\n\r\n`store` is a [`JSONFile` object](https://dxr.mozilla.org/mozilla-central/source/toolkit/modules/JSONFile.jsm). It gives us a JS object that it will occasionally write to disk. Calling `saveSoon` hints that it should probably write something to disk, and we do it after every modification, to avoid losing data. It is probably a good idea to call it here too.\r\n\r\n> - How should tests for this be written? There already exists a bunch of `browser_Storage` tests that cover storing different types of data (objects, strings, numbers, etc). \r\n>   - Could it be as simple as creating two stores with the same namespace, and testing if they can interact with the same values?\r\n>   - On the self repair side, we simply set a value and then check if the store can read it - which doesn't necessarily seem to be a complete 'durability' check, but maybe I'm wrong.\r\n\r\nThe read/write tests of various types are checking that the storage works at all, not testing its durability. We have [two tests specifically about durability](https://github.com/mozilla/normandy/blob/master/recipe-server/client/selfrepair/tests/test_normandy_driver.js#L277-L295) in the self-repair driver\r\n\r\n> - When a Storage object is created, I see a call to `Cu.cloneInto(...)` - does the durability seed need to happen after that step?\r\n\r\nI don't think it matters either way, but we should test this.", "body_text": "Should non-durable storage throw errors?\n\n\nIn self-repair, it does by default and there is an option to override this when creating a storage object. I think we should keep this behavior for now.\n\n\nRight now I have it set up so that when Storage is created, it seeds the durability check, and then every read/write after that it checks the durability.\nDoes it matter if the durability is set to 0 for each new Storage? Should it retain the existing value for any reason?\nIs it overkill to run a durability check on each read/write? On selfrepair we check on every read, fwiw.\n\n\nI think there might be some confusion here about what \"durability\" means in this context. Which is entirely fair. I haven't really explained it, and the code is rather vague. Durability here means that data written to the storage objects persists after Firefox restarts. This is specifically to prevent a bug we had where due to a bug in the storage driver, the entire country of Australia got a heartbeat prompt every time they started the browser for about a week. (This incident was all pre-Normandy).\nSo having independent durability for each prefix is going to be problematic. It means that the first time every heartbeat runs, it won't consider storage to be durable, and will likely fail. It means that if a recipe only runs once, it will never work.\nIn self-repair we read the durability values on every call to getItem, but we only update the durability when we create a new driver object, which we do once per page load of self-repair. This should probably be called by the driver, and shouldn't be available to the actions.\n\n\nIs store.saveSoon() necessary to save the durability key update? I'm assuming so.\n\n\nstore is a JSONFile object. It gives us a JS object that it will occasionally write to disk. Calling saveSoon hints that it should probably write something to disk, and we do it after every modification, to avoid losing data. It is probably a good idea to call it here too.\n\n\nHow should tests for this be written? There already exists a bunch of browser_Storage tests that cover storing different types of data (objects, strings, numbers, etc).\n\nCould it be as simple as creating two stores with the same namespace, and testing if they can interact with the same values?\nOn the self repair side, we simply set a value and then check if the store can read it - which doesn't necessarily seem to be a complete 'durability' check, but maybe I'm wrong.\n\n\n\n\nThe read/write tests of various types are checking that the storage works at all, not testing its durability. We have two tests specifically about durability in the self-repair driver\n\n\nWhen a Storage object is created, I see a call to Cu.cloneInto(...) - does the durability seed need to happen after that step?\n\n\nI don't think it matters either way, but we should test this.", "url": "https://api.github.com/repos/mozilla/normandy/issues/comments/289088745", "created_at": "2017-03-24T17:26:48Z", "author_association": "MEMBER", "html_url": "https://github.com/mozilla/normandy/pull/633#issuecomment-289088745", "updated_at": "2017-03-24T17:26:48Z", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "body_html": "<blockquote>\n<ul>\n<li>Should non-durable storage throw errors?</li>\n</ul>\n</blockquote>\n<p>In self-repair, it does by default and there is an option to override this when creating a storage object. I think we should keep this behavior for now.</p>\n<blockquote>\n<ul>\n<li>Right now I have it set up so that when Storage is created, it seeds the durability check, and then every read/write after that it checks the durability.</li>\n<li>Does it matter if the durability is set to 0 for each new Storage? Should it retain the existing value for any reason?</li>\n<li>Is it overkill to run a durability check on each read/write? On selfrepair we check on every read, fwiw.</li>\n</ul>\n</blockquote>\n<p>I think there might be some confusion here about what \"durability\" means in this context. Which is entirely fair. I haven't really explained it, and the code is rather vague. Durability here means that data written to the storage objects <em>persists after Firefox restarts</em>. This is specifically to prevent a bug we had where due to a bug in the storage driver, the entire country of Australia got a heartbeat prompt every time they started the browser for about a week. (This incident was all pre-Normandy).</p>\n<p>So having independent durability for each prefix is going to be problematic. It means that the first time every heartbeat runs, it won't consider storage to be durable, and will likely fail. It means that if a recipe only runs once, it will never work.</p>\n<p>In self-repair we <em>read</em> the durability values on every call to <code>getItem</code>, but we only update the durability when we create a new driver object, which we do once per page load of self-repair. This should probably be called by the driver, and shouldn't be available to the actions.</p>\n<blockquote>\n<ul>\n<li>Is <code>store.saveSoon()</code> necessary to save the durability key update? I'm assuming so.</li>\n</ul>\n</blockquote>\n<p><code>store</code> is a <a href=\"https://dxr.mozilla.org/mozilla-central/source/toolkit/modules/JSONFile.jsm\" rel=\"nofollow\"><code>JSONFile</code> object</a>. It gives us a JS object that it will occasionally write to disk. Calling <code>saveSoon</code> hints that it should probably write something to disk, and we do it after every modification, to avoid losing data. It is probably a good idea to call it here too.</p>\n<blockquote>\n<ul>\n<li>How should tests for this be written? There already exists a bunch of <code>browser_Storage</code> tests that cover storing different types of data (objects, strings, numbers, etc).\n<ul>\n<li>Could it be as simple as creating two stores with the same namespace, and testing if they can interact with the same values?</li>\n<li>On the self repair side, we simply set a value and then check if the store can read it - which doesn't necessarily seem to be a complete 'durability' check, but maybe I'm wrong.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>The read/write tests of various types are checking that the storage works at all, not testing its durability. We have <a href=\"https://github.com/mozilla/normandy/blob/master/recipe-server/client/selfrepair/tests/test_normandy_driver.js#L277-L295\">two tests specifically about durability</a> in the self-repair driver</p>\n<blockquote>\n<ul>\n<li>When a Storage object is created, I see a call to <code>Cu.cloneInto(...)</code> - does the durability seed need to happen after that step?</li>\n</ul>\n</blockquote>\n<p>I don't think it matters either way, but we should test this.</p>", "id": 289088745, "issue_url": "https://api.github.com/repos/mozilla/normandy/issues/633"}