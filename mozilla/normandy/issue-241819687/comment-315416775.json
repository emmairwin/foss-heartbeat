{"body": "This is ready for review. I've changed how I initially approached disabling the form fields during submission, so now:\r\n\r\n- `RecipeForm` will automatically disable form fields via `areAnyRequestsInProgress`\r\n- `LoadingOverlay` now has an optional `condition` prop\r\n  - I ran into an issue where the `LoadingOverlay` would pop up when saving an existing recipe, thereby removing all the field changes (due to elements being swapped in/out of the dom and the fact we don't track form changes anywhere).\r\n  - The `condition` prop gives a little finer control over when to display the `LoadingOverlay`. With this approach, we can use `LoadingOverlay` for global requests, or use it as a 'dumb' component, as I have in this PR.\r\n- `disable` props have been added to form controls. I was trying to find a way around adding `disabled={disabled}` all over the place, but ultimately couldn't find a better approach.\r\n- With the `LoadingOverlay`, `RecipeForm`, and `disabled` changes, we get the desired result of a disabled form while submitting info to the server, _without_ losing changes due to dom flips.\r\n   - However, we lose the actual spinner + blur, so it doesn't feel as visually cohesive.\r\n\r\nUltimately, we _should_ do some sort of form state tracking, however I think to get this page landed this approach should suffice.\r\n\r\n@rehandalal Ready for review!\r\n", "body_text": "This is ready for review. I've changed how I initially approached disabling the form fields during submission, so now:\n\nRecipeForm will automatically disable form fields via areAnyRequestsInProgress\nLoadingOverlay now has an optional condition prop\n\nI ran into an issue where the LoadingOverlay would pop up when saving an existing recipe, thereby removing all the field changes (due to elements being swapped in/out of the dom and the fact we don't track form changes anywhere).\nThe condition prop gives a little finer control over when to display the LoadingOverlay. With this approach, we can use LoadingOverlay for global requests, or use it as a 'dumb' component, as I have in this PR.\n\n\ndisable props have been added to form controls. I was trying to find a way around adding disabled={disabled} all over the place, but ultimately couldn't find a better approach.\nWith the LoadingOverlay, RecipeForm, and disabled changes, we get the desired result of a disabled form while submitting info to the server, without losing changes due to dom flips.\n\nHowever, we lose the actual spinner + blur, so it doesn't feel as visually cohesive.\n\n\n\nUltimately, we should do some sort of form state tracking, however I think to get this page landed this approach should suffice.\n@rehandalal Ready for review!", "url": "https://api.github.com/repos/mozilla/normandy/issues/comments/315416775", "created_at": "2017-07-14T17:23:35Z", "author_association": "CONTRIBUTOR", "html_url": "https://github.com/mozilla/normandy/pull/872#issuecomment-315416775", "updated_at": "2017-07-14T17:24:56Z", "user": {"following_url": "https://api.github.com/users/andymikulski/following{/other_user}", "events_url": "https://api.github.com/users/andymikulski/events{/privacy}", "organizations_url": "https://api.github.com/users/andymikulski/orgs", "url": "https://api.github.com/users/andymikulski", "gists_url": "https://api.github.com/users/andymikulski/gists{/gist_id}", "html_url": "https://github.com/andymikulski", "subscriptions_url": "https://api.github.com/users/andymikulski/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/2767162?v=4", "repos_url": "https://api.github.com/users/andymikulski/repos", "received_events_url": "https://api.github.com/users/andymikulski/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/andymikulski/starred{/owner}{/repo}", "site_admin": false, "login": "andymikulski", "type": "User", "id": 2767162, "followers_url": "https://api.github.com/users/andymikulski/followers"}, "body_html": "<p>This is ready for review. I've changed how I initially approached disabling the form fields during submission, so now:</p>\n<ul>\n<li><code>RecipeForm</code> will automatically disable form fields via <code>areAnyRequestsInProgress</code></li>\n<li><code>LoadingOverlay</code> now has an optional <code>condition</code> prop\n<ul>\n<li>I ran into an issue where the <code>LoadingOverlay</code> would pop up when saving an existing recipe, thereby removing all the field changes (due to elements being swapped in/out of the dom and the fact we don't track form changes anywhere).</li>\n<li>The <code>condition</code> prop gives a little finer control over when to display the <code>LoadingOverlay</code>. With this approach, we can use <code>LoadingOverlay</code> for global requests, or use it as a 'dumb' component, as I have in this PR.</li>\n</ul>\n</li>\n<li><code>disable</code> props have been added to form controls. I was trying to find a way around adding <code>disabled={disabled}</code> all over the place, but ultimately couldn't find a better approach.</li>\n<li>With the <code>LoadingOverlay</code>, <code>RecipeForm</code>, and <code>disabled</code> changes, we get the desired result of a disabled form while submitting info to the server, <em>without</em> losing changes due to dom flips.\n<ul>\n<li>However, we lose the actual spinner + blur, so it doesn't feel as visually cohesive.</li>\n</ul>\n</li>\n</ul>\n<p>Ultimately, we <em>should</em> do some sort of form state tracking, however I think to get this page landed this approach should suffice.</p>\n<p><a class=\"user-mention\" href=\"https://github.com/rehandalal\">@rehandalal</a> Ready for review!</p>", "id": 315416775, "issue_url": "https://api.github.com/repos/mozilla/normandy/issues/872"}