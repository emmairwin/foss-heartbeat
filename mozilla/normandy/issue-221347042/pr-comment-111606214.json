{"original_position": 53, "diff_hunk": "@@ -584,10 +584,44 @@ add_task(withMockExperiments(async function testInit() {\n }));\n \n // Experiments shouldn't be recorded by init() in telemetry if they are expired\n-add_task(withMockExperiments(async function testInit(experiments) {\n+add_task(withMockExperiments(async function testInitTelemetryExpired(experiments) {\n   const setActiveStub = sinon.stub(TelemetryEnvironment, \"setExperimentActive\");\n   experiments[\"experiment1\"] = experimentFactory({name: \"expired\", branch: \"branch\", expired: true});\n   await PreferenceExperiments.init();\n   ok(!setActiveStub.called, \"Expired experiment is not registered by init\");\n   setActiveStub.restore();\n }));\n+\n+// Experiments should end if the preference has been changed when init() is called\n+add_task(withMockExperiments(withMockPreferences(async function testInitChanges(experiments, mockPreferences) {\n+  experiments[\"test\"] = experimentFactory({\n+    name: \"test\",\n+    preferenceName: \"fake.preference\",\n+    preferenceValue: \"experiment value\",\n+  });\n+  mockPreferences.set(\"fake.preference\", \"changed value\");\n+  await PreferenceExperiments.init();\n+  ok(experiments[\"test\"].expired, \"Experiment expires because value changed\");\n+  ok(mockPreferences.get(\"fake.preference\"), \"changed value\", \"Preference value was not changed\");\n+})));\n+\n+// init should register an observer for experiments\n+add_task(withMockExperiments(withMockPreferences(async function testInitRegistersObserver(experiments, mockPreferences) {\n+  dump(\"@@ starting test\");\n+  const startObserver = sinon.stub(PreferenceExperiments, \"startObserver\");\n+  experiments[\"test\"] = experimentFactory({\n+    name: \"test\",\n+    preferenceName: \"fake.preference\",\n+    preferenceValue: \"experiment value\",\n+  });\n+  mockPreferences.set(\"fake.preference\", \"experiment value\");\n+  await PreferenceExperiments.init();\n+\n+  ok(\n+    startObserver.calledWith(\"test\", \"fake.preference\", \"experiment value\"),\n+    \"init registered an observer\",\n+  );\n+\n+  startObserver.restore();\n+  ok(false);", "body_text": "That ain't ok", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/684", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/111606214", "created_at": "2017-04-14T17:30:13Z", "author_association": "MEMBER", "body": "That ain't ok", "updated_at": "2017-04-20T21:43:09Z", "html_url": "https://github.com/mozilla/normandy/pull/684#discussion_r111606214", "pull_request_review_id": 32864374, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/111606214"}, "html": {"href": "https://github.com/mozilla/normandy/pull/684#discussion_r111606214"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/684"}}, "commit_id": "009453077d34baa6259317a687770e0d34627c79", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "position": null, "path": "recipe-client-addon/test/unit/test_PreferenceExperiments.js", "body_html": "<p>That ain't ok</p>", "original_commit_id": "4915caf0148a02371dcba297847415d4030e23c0", "id": 111606214}