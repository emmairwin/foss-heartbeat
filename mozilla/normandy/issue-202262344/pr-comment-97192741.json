{"original_position": 82, "diff_hunk": "@@ -33,33 +38,53 @@ XPCOMUtils.defineLazyGetter(this, \"jexl\", () => {\n   return jexl;\n });\n \n-const getLatestTelemetry = Task.async(function *() {\n-  const pings = yield TelemetryArchive.promiseArchivedPingList();\n+this.EnvExpressions = {\n+  getLatestTelemetry: Task.async(function *() {\n+    const pings = yield TelemetryArchive.promiseArchivedPingList();\n \n-  // get most recent ping per type\n-  const mostRecentPings = {};\n-  for (const ping of pings) {\n-    if (ping.type in mostRecentPings) {\n-      if (mostRecentPings[ping.type].timeStampCreated < ping.timeStampCreated) {\n+    // get most recent ping per type\n+    const mostRecentPings = {};\n+    for (const ping of pings) {\n+      if (ping.type in mostRecentPings) {\n+        if (mostRecentPings[ping.type].timeStampCreated < ping.timeStampCreated) {\n+          mostRecentPings[ping.type] = ping;\n+        }\n+      } else {\n         mostRecentPings[ping.type] = ping;\n       }\n-    } else {\n-      mostRecentPings[ping.type] = ping;\n     }\n-  }\n \n-  const telemetry = {};\n-  for (const key in mostRecentPings) {\n-    const ping = mostRecentPings[key];\n-    telemetry[ping.type] = yield TelemetryArchive.promiseArchivedPingById(ping.id);\n-  }\n-  return telemetry;\n-});\n+    const telemetry = {};\n+    for (const key in mostRecentPings) {\n+      const ping = mostRecentPings[key];\n+      telemetry[ping.type] = yield TelemetryArchive.promiseArchivedPingById(ping.id);\n+    }\n+    return telemetry;\n+  }),\n+\n+  getUserId() {\n+    let id = prefs.getCharPref(\"user_id\");\n+    console.log(\"pref user_id\", id);\n+    if (id === \"\") {\n+      id = generateUUID().toString().slice(1, -1);\n+      prefs.setCharPref(\"user_id\", id);\n+    }\n+    console.log(\"getUserId ret\", id);\n+    return id;\n+  },\n \n-this.EnvExpressions = {\n   eval(expr, extraContext = {}) {\n-    const context = Object.assign({telemetry: getLatestTelemetry()}, extraContext);\n+    // First clone the extra context\n+    const context = Object.assign({}, extraContext);\n+    // jexl handles promises, so it is fine to include them in this data.\n+    context.telemetry = EnvExpressions.getLatestTelemetry();\n+    context.normandy = context.normandy || {};", "body_text": "Should we add a test for this fallback if normandy isn't provided? Maybe.", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/441", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/97192741", "created_at": "2017-01-21T07:02:30Z", "author_association": "MEMBER", "body": "Should we add a test for this fallback if `normandy` isn't provided? Maybe.", "updated_at": "2017-01-25T18:37:30Z", "html_url": "https://github.com/mozilla/normandy/pull/441#discussion_r97192741", "pull_request_review_id": 17801384, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/97192741"}, "html": {"href": "https://github.com/mozilla/normandy/pull/441#discussion_r97192741"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/441"}}, "commit_id": "910227d94b0b381ab52a5e9ddb6c672d9bf7f9a1", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "position": 83, "path": "recipe-client-addon/lib/EnvExpressions.jsm", "body_html": "<p>Should we add a test for this fallback if <code>normandy</code> isn't provided? Maybe.</p>", "original_commit_id": "8a4301c4e749e80a3646a5abedbadc0abafde08e", "id": 97192741}