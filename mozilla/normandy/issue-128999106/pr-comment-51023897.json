{"original_position": 129, "diff_hunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Convenience wrapper around XMLHttpRequest.\n+ *\n+ * @param {String} method - HTTP method to use.\n+ * @param {String} url - URL to send the request to.\n+ * @param {Object} options - Optional arguments.\n+ * @param {Object} options.data - Request data as an Object; keys are\n+ *     used as parameter names, values as parameter values.\n+ * @param {Object} options.headers - Headers and values to set on the\n+ *     request.\n+ * @promise {XMLHttpRequest} The request after it has succeeded.\n+ * @rejects {XMLHttpRequest} The request after it has failed.\n+ */\n+function xhr(method, url, options={}) {\n+    return new Promise((resolve, reject) => {\n+        let req = new XMLHttpRequest();\n+        req.addEventListener('load', e => {\n+            if (req.status !== 200) {\n+                reject(req);\n+            } else {\n+                resolve(req);\n+            }\n+        });\n+        req.open(method, url);\n+\n+        let data = undefined;\n+        if (options.data) {\n+            req.setRequestHeader('Content-Type', 'application/json');\n+            data = JSON.stringify(data);\n+        }\n+\n+        if (options.headers) {\n+            for (let key in options.headers) {\n+                req.setRequestHeader(key, options.headers[key]);\n+            }\n+        }\n+\n+        req.send(data);\n+    });\n+}\n+xhr.get = xhr.bind(null, 'GET');\n+xhr.post = xhr.bind(null, 'POST');\n+\n+\n+let registeredActions = {};\n+window.Normandy = {\n+    registerAction(name, func) {\n+        registeredActions[name] = func;\n+    }\n+};\n+\n+\n+/**\n+ * Download the implementation of the given action from the server.\n+ *\n+ * @param {Action} action  - Action taken from a Recipe.\n+ * @promise Resolves once the action has been loaded and registered.\n+ * @rejects {Error} Rejects if the action could not be loaded or did not\n+ *     register itself.\n+ */\n+function loadAction(action) {\n+    return new Promise((resolve, reject) => {\n+        if (!registeredActions[action.name]) {\n+            let script = document.createElement('script');\n+            script.src = action.implementation.url;\n+            script.onload = () => {\n+                if (!registeredActions[action.name]) {\n+                    reject(new Error(`Could not find action with name ${action.name}.`));\n+                } else {\n+                    resolve();\n+                }\n+            };\n+            document.head.appendChild(script);\n+        } else {\n+            resolve();\n+        }\n+    });\n+}\n+\n+/**\n+ * Fetch recipes from the Recipe server.\n+ *\n+ * @promise {Array<Recipe>} List of recipes.\n+ */\n+function fetchRecipes() {\n+    let {recipe_url, locale} = document.documentElement.dataset;\n+\n+    return xhr.post(recipe_url, {\n+        data: {locale: locale},\n+        headers: {Accept: 'application/json'}\n+    }).then(request => {\n+        return JSON.parse(request.responseText).recipes;\n+    });\n+}\n+\n+\n+/**\n+ * Fetch and execute the actions for the given recipe.\n+ *\n+ * @param {Recipe} recipe - Recipe retrieved from the server.\n+ * @promise Resolves once all actions are complete.\n+ */\n+function runRecipe(recipe) {\n+    return Promise.all(recipe.actions.map(loadAction)).then(() => {\n+        let recipePromise = Promise.resolve();\n+\n+        for (let action of recipe.actions) {\n+            let func = registeredActions[action.name];\n+            recipePromise = recipePromise.then(() => {\n+                return func(null, action.arguments);\n+            });\n+        }\n+\n+        return recipePromise;\n+    });\n+}\n+\n+\n+// Actually fetch and run the recipes.\n+fetchRecipes().then((recipes) => {\n+    let chain = Promise.resolve();\n+\n+    for (let recipe of recipes) {\n+        chain.then(() => {\n+            return runRecipe(recipe);\n+        });\n+    }\n+\n+    return chain;", "body_text": "I feel like that's super-unreadable. Maybe a helper method for a promise chain would be better, though. Passing that callback to then seems like unnecessary noise.", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/19", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/51023897", "created_at": "2016-01-27T18:09:50Z", "author_association": "MEMBER", "body": "I feel like that's super-unreadable. Maybe a helper method for a promise chain would be better, though. Passing that callback to `then` seems like unnecessary noise.\n", "updated_at": "2016-01-27T18:54:07Z", "html_url": "https://github.com/mozilla/normandy/pull/19#discussion_r51023897", "pull_request_review_id": null, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/51023897"}, "html": {"href": "https://github.com/mozilla/normandy/pull/19#discussion_r51023897"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/19"}}, "commit_id": "6d7177a63f7bda81e6c35ddcf336b070fd09c923", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "position": 130, "path": "normandy/selfrepair/static/js/self_repair_driver.js", "body_html": "<p>I feel like that's super-unreadable. Maybe a helper method for a promise chain would be better, though. Passing that callback to <code>then</code> seems like unnecessary noise.</p>", "original_commit_id": "a7ea378746d1a2a292b6d099792cfd32c63b203f", "id": 51023897}