{"original_position": 36, "diff_hunk": "@@ -0,0 +1,37 @@\n+import { combineReducers } from 'redux';\n+import { fromJS, Map, List } from 'immutable';\n+\n+import {\n+  EXPERIMENTS_RECEIVE,\n+  EXPERIMENT_ACCEPTED,\n+  EXPERIMENT_ALREADY_ACCEPTED,\n+  EXPERIMENT_REJECTED,\n+  EXPERIMENT_SELECT_REJECTED,\n+} from 'control/state/action-types';\n+\n+function filterExperiments(state, slug) {\n+  const experiments = state.get('experiments', new List());\n+  const filteredExperiments = experiments.filter(experiment => experiment.get('experiment_slug') !== slug);\n+  return state.set('experiments', filteredExperiments);\n+}\n+\n+function items(state = new Map(), action) {\n+  switch (action.type) {\n+    case EXPERIMENTS_RECEIVE:\n+      return state.set('experiments', fromJS(action.experiments));\n+    case EXPERIMENT_ACCEPTED:\n+      return filterExperiments(state, action.experiment.experiment_slug);\n+    case EXPERIMENT_ALREADY_ACCEPTED:\n+      return filterExperiments(state, action.experiment.experiment_slug);\n+    case EXPERIMENT_SELECT_REJECTED:\n+      return state.set('rejected_experiment', fromJS(action.experiment));\n+    case EXPERIMENT_REJECTED:\n+      return filterExperiments(state, action.experiment.experiment_slug);\n+    default:\n+      return state;\n+  }\n+}\n+\n+export default combineReducers({\n+  items,", "body_text": "Right, so rejected_experiments shouldn't be nested under items. rejected_experiments should be it's own reducer. Something like:\nfunction items(state = new List(), action) {\n  // handles RECEIVE, ACCEPTED, ALREADY_ACCEPTED, and REJECTED\n}\n\nfunction rejected(state = null, action) {\n  switch (action.type) {\n    case EXPERIMENT_SELECT_REJECTED: {\n      return fromJS(action.experiment);\n    }\n    default: {\n      return state;\n    }\n}\n\nexport default combineReducers({\n  items,\n  rejected,\n});\nThen you'd have state.app.experiments.items and state.app.experiments.rejected. To me this makes more sense than nesting rejected under items.\nThis is a bigger change, but most of the time that we have a collection and then a selection into that collection, like here, we use a Map for the items, and instead of storing the entire item in rejected, it would be rejectedId, and just store the key into that map for the rejected item. I'm not sure if this would work well with Experimenter's data model though.", "in_reply_to_id": 143301024, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/1098", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/145286518", "created_at": "2017-10-17T23:50:56Z", "author_association": "MEMBER", "body": "Right, so `rejected_experiments` shouldn't be nested under items. `rejected_experiments` should be it's own reducer. Something like:\r\n\r\n```js\r\nfunction items(state = new List(), action) {\r\n  // handles RECEIVE, ACCEPTED, ALREADY_ACCEPTED, and REJECTED\r\n}\r\n\r\nfunction rejected(state = null, action) {\r\n  switch (action.type) {\r\n    case EXPERIMENT_SELECT_REJECTED: {\r\n      return fromJS(action.experiment);\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n}\r\n\r\nexport default combineReducers({\r\n  items,\r\n  rejected,\r\n});\r\n```\r\n\r\nThen you'd have `state.app.experiments.items` and `state.app.experiments.rejected`. To me this makes more sense than nesting `rejected` under `items`.\r\n\r\nThis is a bigger change, but most of the time that we have a collection and then a selection into that collection, like here, we use a `Map` for the items, and instead of storing the entire item in `rejected`, it would be `rejectedId`, and just store the key into that map for the rejected item. I'm not sure if this would work well with Experimenter's data model though.", "updated_at": "2017-10-19T17:43:08Z", "html_url": "https://github.com/mozilla/normandy/pull/1098#discussion_r145286518", "pull_request_review_id": 70064955, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/145286518"}, "html": {"href": "https://github.com/mozilla/normandy/pull/1098#discussion_r145286518"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/1098"}}, "commit_id": "5b305d208f017ac1c7c09a9c00574348a1b01f74", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "position": 40, "path": "recipe-server/client/control/state/app/experimenter/reducers.js", "body_html": "<p>Right, so <code>rejected_experiments</code> shouldn't be nested under items. <code>rejected_experiments</code> should be it's own reducer. Something like:</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">items</span>(<span class=\"pl-smi\">state</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">List</span>(), <span class=\"pl-smi\">action</span>) {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> handles RECEIVE, ACCEPTED, ALREADY_ACCEPTED, and REJECTED</span>\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">rejected</span>(<span class=\"pl-smi\">state</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">null</span>, <span class=\"pl-smi\">action</span>) {\n  <span class=\"pl-k\">switch</span> (<span class=\"pl-smi\">action</span>.<span class=\"pl-c1\">type</span>) {\n    <span class=\"pl-k\">case</span> <span class=\"pl-c1\">EXPERIMENT_SELECT_REJECTED</span>: {\n      <span class=\"pl-k\">return</span> <span class=\"pl-en\">fromJS</span>(<span class=\"pl-smi\">action</span>.<span class=\"pl-smi\">experiment</span>);\n    }\n    <span class=\"pl-k\">default</span>: {\n      <span class=\"pl-k\">return</span> state;\n    }\n}\n\n<span class=\"pl-k\">export</span> <span class=\"pl-c1\">default</span> <span class=\"pl-smi\">combineReducers</span>({\n  items,\n  rejected,\n});</pre></div>\n<p>Then you'd have <code>state.app.experiments.items</code> and <code>state.app.experiments.rejected</code>. To me this makes more sense than nesting <code>rejected</code> under <code>items</code>.</p>\n<p>This is a bigger change, but most of the time that we have a collection and then a selection into that collection, like here, we use a <code>Map</code> for the items, and instead of storing the entire item in <code>rejected</code>, it would be <code>rejectedId</code>, and just store the key into that map for the rejected item. I'm not sure if this would work well with Experimenter's data model though.</p>", "original_commit_id": "98fc1d6a39c82abe4419e91c2dd41038188e4597", "id": 145286518}