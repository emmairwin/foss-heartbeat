{"body": "That seems really tough.\n\nThese tests seem to be working at several levels all at once. On the one hand, you're dealing with the very black box idea of monitoring and manipulating the DOM, and on the other hand you're dealing with the white box idea of introspecting the actions and the store. I noticed you called this an integration test, so it does make sense to test the DOM, but I'm not sure if all the detailed testing is worth this trouble.\n\nDo you think it would be worthwhile to change the scope of these tests to only be unit tests, and test each part in isolation? Test that each action creator creates the expected action(s), that reducers modify the state in the expected way, that a component--given the right props--renders the expected code and calls the right handlers?\n\nThen we could use something like Marionette or Selenium to do full, end-to-end, black box integration tests that assert things like \"when this url is loaded, and that button is hit, it creates a recipe in the DB\" (or something).\n\nThis would probably be more work. I know I don't like writing Selenium tests. But I think it will also give us more confidence in the system. Plus, e2e tests can be used to verify other environments, like stage or new deploys.\n", "body_text": "That seems really tough.\nThese tests seem to be working at several levels all at once. On the one hand, you're dealing with the very black box idea of monitoring and manipulating the DOM, and on the other hand you're dealing with the white box idea of introspecting the actions and the store. I noticed you called this an integration test, so it does make sense to test the DOM, but I'm not sure if all the detailed testing is worth this trouble.\nDo you think it would be worthwhile to change the scope of these tests to only be unit tests, and test each part in isolation? Test that each action creator creates the expected action(s), that reducers modify the state in the expected way, that a component--given the right props--renders the expected code and calls the right handlers?\nThen we could use something like Marionette or Selenium to do full, end-to-end, black box integration tests that assert things like \"when this url is loaded, and that button is hit, it creates a recipe in the DB\" (or something).\nThis would probably be more work. I know I don't like writing Selenium tests. But I think it will also give us more confidence in the system. Plus, e2e tests can be used to verify other environments, like stage or new deploys.", "url": "https://api.github.com/repos/mozilla/normandy/issues/comments/229723776", "created_at": "2016-06-30T17:07:43Z", "author_association": "MEMBER", "html_url": "https://github.com/mozilla/normandy/pull/185#issuecomment-229723776", "updated_at": "2016-06-30T17:07:43Z", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "body_html": "<p>That seems really tough.</p>\n<p>These tests seem to be working at several levels all at once. On the one hand, you're dealing with the very black box idea of monitoring and manipulating the DOM, and on the other hand you're dealing with the white box idea of introspecting the actions and the store. I noticed you called this an integration test, so it does make sense to test the DOM, but I'm not sure if all the detailed testing is worth this trouble.</p>\n<p>Do you think it would be worthwhile to change the scope of these tests to only be unit tests, and test each part in isolation? Test that each action creator creates the expected action(s), that reducers modify the state in the expected way, that a component--given the right props--renders the expected code and calls the right handlers?</p>\n<p>Then we could use something like Marionette or Selenium to do full, end-to-end, black box integration tests that assert things like \"when this url is loaded, and that button is hit, it creates a recipe in the DB\" (or something).</p>\n<p>This would probably be more work. I know I don't like writing Selenium tests. But I think it will also give us more confidence in the system. Plus, e2e tests can be used to verify other environments, like stage or new deploys.</p>", "id": 229723776, "issue_url": "https://api.github.com/repos/mozilla/normandy/issues/185"}