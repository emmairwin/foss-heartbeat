{"original_position": 140, "diff_hunk": "@@ -0,0 +1,175 @@\n+Concepts\n+========\n+Normandy is a component in a larger system called SHIELD. The end goal of\n+SHIELD is to allow Firefox to perform a variety of actions to aid the user and\n+gather feedback to guide Mozilla in developing a better browser for them. To do\n+this, we need a way to instruct Firefox to perform certain actions without\n+having to download an update or wait for a new release.\n+\n+SHIELD is split into three main concepts: Actions, Recipes, and the runtime.\n+This document describes those concepts in detail.\n+\n+.. _actions:\n+\n+Actions\n+-------\n+An action is JavaScript code that describes a process to perform within a user's\n+browser. The code is designed to run in a sandbox that has no privileged access\n+to the rest of the browser except through a :doc:`driver object </dev/driver>`\n+that has a constrained API for performing sensitive actions, such as showing a\n+survey to a user or getting information about the browser itself.\n+\n+Actions can accept a configuration object that is specified within the Normandy\n+control interface. This configuration, which is part of a\n+:ref:`recipe <recipes>`, contains static data required by the action, such as\n+translated strings or boolean options for controlling behavior.\n+\n+For example, a survey action would include code to check whether we have showed\n+a survey to the user recently, to determine which variant of a survey to show,\n+and the call to the driver to actually display the survey itself. The\n+configuration for the survey action would contain the text of the survey prompt\n+and the URL to redirect the user to after answering.\n+\n+Actions are stored in the Normandy code repository and the\n+:ref:`runtime <runtime>` fetches the actions from the Normandy service during\n+execution. Here's an example of an action that logs a message to the console:\n+\n+.. code-block:: javascript\n+\n+   export default class ConsoleLogAction {\n+     constructor(normandy, recipe) {\n+       this.normandy = normandy; // The driver object\n+       this.recipe = recipe; // Contains recipe arguments and other data\n+     }\n+\n+     // Actions should return a Promise when executed\n+     async execute() {\n+       this.normandy.log(this.recipe.arguments.message, 'info');\n+     }\n+   }\n+\n+   // registerAction is in the sandbox's global object\n+   registerAction('console-log', ConsoleLogAction);\n+\n+.. _recipes:\n+\n+Recipes\n+-------\n+A recipe is a model that represents a single instance of an action we want to\n+perform. Recipes contain three important pieces of information:\n+\n+1. Client filtering data that determines which users the recipe should be run\n+   for. This takes the form of a JEXL_ expression that is evaluated on the\n+   client and has access to several pieces of data about the client, such as the\n+   data collected by Telemetry_.\n+2. A pointer to the :ref:`action <actions>` that this recipe should perform when\n+   run.\n+3. The configuration data to pass to the Action code when it is executed, called\n+   the recipe's **arguments**.\n+\n+Recipes are stored in the Normandy database and the :ref:`runtime <runtime>`\n+fetches them from the service during execution. Here's an example of a recipe in\n+JSON format as returned by Normandy:\n+\n+.. code-block:: json\n+\n+   {\n+      \"id\": 1,\n+      \"name\": \"Console Log Test\",\n+      \"revision_id\": 12,\n+      \"action\": {\n+         \"name\": \"console-log\",\n+         \"implementation_url\": \"https://self-repair.mozilla.org/api/v1/action/console-log/implementation/8ee8e7621fc08574f854972ee77be2a5280fb546/\",\n+         \"arguments_schema\": {\n+            \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n+            \"description\": \"Log a message to the console\",\n+            \"type\": \"object\",\n+            \"properties\": {\n+               \"message\": {\n+                  \"default\": \"\",\n+                  \"description\": \"Message to log to the console\",\n+                  \"type\": \"string\",\n+               }\n+            },\n+            \"required\": [\n+               \"message\"\n+            ],\n+         }\n+      },\n+      \"arguments\": {\n+         \"message\": \"It works!\"\n+      }\n+   }\n+\n+Note that the recipe as returned by the API also contains data about the action,\n+including a schema describing the arguments field.\n+\n+.. _JEXL: https://github.com/TechnologyAdvice/Jexl\n+.. _Telemetry: https://wiki.mozilla.org/Telemetry\n+\n+.. _runtime:\n+\n+Runtime\n+-------\n+The runtime is an execution environment that can affect a running instance of\n+Firefox. Upon activation (typically a few moments after Firefox launches), the\n+runtime:\n+\n+1. Downloads :ref:`recipes <recipes>` from the Normandy service.\n+2. Evaluates the recipe filters and filters out recipes that do not match the\n+   client the runtime is installed within.\n+3. Downloads the :ref:`actions <actions>` for the remaining recipes.\n+4. Executes the action code for each recipe in a sandbox, passing in the\n+   arguments from the recipe, and a :doc:`driver object </dev/driver>` containing\n+   methods that can perform privileged actions.\n+\n+The runtime is implemented as a system add-on in the normandy-addon_ repository.\n+\n+.. _normandy-addon: https://github.com/mozilla/normandy-addon\n+\n+Threat Model\n+------------\n+Since the goal of SHIELD is to allow Mozilla to perform certain privileged\n+actions quickly without shipping full updates to Firefox, it is a tempting\n+target for compromising Firefox users. Normandy includes several security\n+controls to help mitigate this risk.\n+\n+Action and Recipe Signing\n+^^^^^^^^^^^^^^^^^^^^^^^^^\n+Actions and recipes that are downloaded by the runtime are signed using the\n+autograph_ service. The runtime verifies the signature upon downloading the", "body_text": "I'd refer to the protocol as well signed according to the Content-Signature protocol as provided by the autograph service.\nUnfortunately, we don't yet have a spec for Content-Signature for you to link to.", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/156", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/66649327", "created_at": "2016-06-10T17:19:08Z", "author_association": "CONTRIBUTOR", "body": "I'd refer to the protocol as well `signed according to the Content-Signature protocol as provided by the autograph service`.\nUnfortunately, we don't yet have a spec for Content-Signature for you to link to.\n", "updated_at": "2016-06-15T16:26:41Z", "html_url": "https://github.com/mozilla/normandy/pull/156#discussion_r66649327", "pull_request_review_id": null, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/66649327"}, "html": {"href": "https://github.com/mozilla/normandy/pull/156#discussion_r66649327"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/156"}}, "commit_id": "d008dfaa6a233a5c16e789ba0a38ae8f191f19d2", "user": {"following_url": "https://api.github.com/users/jvehent/following{/other_user}", "events_url": "https://api.github.com/users/jvehent/events{/privacy}", "organizations_url": "https://api.github.com/users/jvehent/orgs", "url": "https://api.github.com/users/jvehent", "gists_url": "https://api.github.com/users/jvehent/gists{/gist_id}", "html_url": "https://github.com/jvehent", "subscriptions_url": "https://api.github.com/users/jvehent/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/415617?v=4", "repos_url": "https://api.github.com/users/jvehent/repos", "received_events_url": "https://api.github.com/users/jvehent/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/jvehent/starred{/owner}{/repo}", "site_admin": false, "login": "jvehent", "type": "User", "id": 415617, "followers_url": "https://api.github.com/users/jvehent/followers"}, "position": null, "path": "docs/dev/concepts.rst", "body_html": "<p>I'd refer to the protocol as well <code>signed according to the Content-Signature protocol as provided by the autograph service</code>.<br>\nUnfortunately, we don't yet have a spec for Content-Signature for you to link to.</p>", "original_commit_id": "b295f3c76b9f5ccd7fbbdcbb5d882274f4e89950", "id": 66649327}