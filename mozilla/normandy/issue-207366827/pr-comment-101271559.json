{"original_position": 23, "diff_hunk": "@@ -3,19 +3,13 @@\n const {utils: Cu} = Components;\n Cu.import(\"resource://shield-recipe-client/lib/NormandyApi.jsm\", this);\n \n-add_task(function* () {\n+add_task(function* test_get() {\n   // Point the add-on to the test server.\n-  yield SpecialPowers.pushPrefEnv({\n-    set: [\n-      [\n-        \"extensions.shield-recipe-client.api_url\",\n-        \"http://mochi.test:8888/browser/browser/extensions/shield-recipe-client/test\",\n-      ],\n-    ],\n-  });\n+  const url = \"http://mochi.test:8888/browser/browser/extensions/shield-recipe-client/test\";\n+  yield SpecialPowers.pushPrefEnv({set: [[\"extensions.shield-recipe-client.api_url\", url]]});\n \n   // Test that NormandyApi can fetch from the test server.\n-  const response = yield NormandyApi.get(\"browser/test_server.sjs\");\n+  const response = yield NormandyApi.get(`${url}/browser/test_server.sjs`);\n   const data = yield response.json();\n-  Assert.deepEqual(data, {test: \"data\"}, \"NormandyApi returned incorrect server data.\");\n+  Assert.deepEqual(data, {test: \"data\"}, \"NormandyApi returned correct server data.\");", "body_text": "You can use an sjs file ( see https://developer.mozilla.org/en-US/docs/Mozilla/httpd.js/HTTP_server_for_unit_tests ) to generate dummy responses for use in a test. It's true that they could get out of date with the server, but presumably when you're updating the server you update the client, and if you update the client without updating the mock server, you'd break things.\nIt's true that you would only ever guarantee that the test works with the mock server you'd write and so you wouldn't catch subtle differences between the mock server and the 'real' one, but you'd be able to have a bit more confidence in:\n\nclient changes that should continue to work with the same server\nserver changes that update the mock server in the 'same way' - you get infra to guarantee things work with your mock server, and so now in review you check the mock server is a reasonable representation of the real server, which is easier to do as a human being than \"does my client code interact with this orthogonal server code in the right way\".\n\nI hope that reasoning makes some sense, though I also think it's something about which reasonable people can disagree. :-)", "in_reply_to_id": 101018089, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/510", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/101271559", "created_at": "2017-02-15T13:03:44Z", "author_association": "CONTRIBUTOR", "body": "You can use an sjs file ( see https://developer.mozilla.org/en-US/docs/Mozilla/httpd.js/HTTP_server_for_unit_tests ) to generate dummy responses for use in a test. It's true that they could get out of date with the server, but presumably when you're updating the server you update the client, and if you update the client without updating the mock server, you'd break things.\r\n\r\nIt's true that you would only ever guarantee that the test works with the mock server you'd write and so you wouldn't catch subtle differences between the mock server and the 'real' one, but you'd be able to have a bit more confidence in:\r\n1) client changes that should continue to work with the same server\r\n2) server changes that update the mock server in the 'same way' - you get infra to guarantee things work with your mock server, and so now in review you check the mock server is a reasonable representation of the real server, which is easier to do as a human being than \"does my client code interact with this orthogonal server code in the right way\".\r\n\r\nI hope that reasoning makes some sense, though I also think it's something about which reasonable people can disagree. :-)", "updated_at": "2017-02-23T22:37:10Z", "html_url": "https://github.com/mozilla/normandy/pull/510#discussion_r101271559", "pull_request_review_id": 21993438, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/101271559"}, "html": {"href": "https://github.com/mozilla/normandy/pull/510#discussion_r101271559"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/510"}}, "commit_id": "e83c63174a7ed48da636f574c05d9cbeb11abe04", "user": {"following_url": "https://api.github.com/users/gijsk/following{/other_user}", "events_url": "https://api.github.com/users/gijsk/events{/privacy}", "organizations_url": "https://api.github.com/users/gijsk/orgs", "url": "https://api.github.com/users/gijsk", "gists_url": "https://api.github.com/users/gijsk/gists{/gist_id}", "html_url": "https://github.com/gijsk", "subscriptions_url": "https://api.github.com/users/gijsk/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/375983?v=4", "repos_url": "https://api.github.com/users/gijsk/repos", "received_events_url": "https://api.github.com/users/gijsk/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/gijsk/starred{/owner}{/repo}", "site_admin": false, "login": "gijsk", "type": "User", "id": 375983, "followers_url": "https://api.github.com/users/gijsk/followers"}, "position": null, "path": "recipe-client-addon/test/browser/browser_NormandyApi.js", "body_html": "<p>You can use an sjs file ( see <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/httpd.js/HTTP_server_for_unit_tests\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Mozilla/httpd.js/HTTP_server_for_unit_tests</a> ) to generate dummy responses for use in a test. It's true that they could get out of date with the server, but presumably when you're updating the server you update the client, and if you update the client without updating the mock server, you'd break things.</p>\n<p>It's true that you would only ever guarantee that the test works with the mock server you'd write and so you wouldn't catch subtle differences between the mock server and the 'real' one, but you'd be able to have a bit more confidence in:</p>\n<ol>\n<li>client changes that should continue to work with the same server</li>\n<li>server changes that update the mock server in the 'same way' - you get infra to guarantee things work with your mock server, and so now in review you check the mock server is a reasonable representation of the real server, which is easier to do as a human being than \"does my client code interact with this orthogonal server code in the right way\".</li>\n</ol>\n<p>I hope that reasoning makes some sense, though I also think it's something about which reasonable people can disagree. :-)</p>", "original_commit_id": "b3da82e51da205d0deea69eaa7024170eaba2e51", "id": 101271559}