{"original_position": 81, "diff_hunk": "@@ -0,0 +1,90 @@\n+\"use strict\";\n+// Cu is defined in xpc_head.js\n+/* globals Cu */\n+\n+Cu.import(\"resource://gre/modules/Services.jsm\");\n+Cu.import(\"resource://gre/modules/Task.jsm\");\n+Cu.import(\"resource://testing-common/httpd.js\"); /* globals HttpServer */\n+Cu.import(\"resource://gre/modules/osfile.jsm\", this); /* globals OS, TextDecoder */\n+Cu.import(\"resource://shield-recipe-client/lib/NormandyApi.jsm\", this);\n+\n+function withServer(task) {\n+  return function* inner() {\n+    const server = makeMockApiServer();\n+    const serverUrl = `http://localhost:${server.identity.primaryPort}`;\n+    Services.prefs.setCharPref(\"extensions.shield-recipe-client.api_url\", `${serverUrl}/api/v1`);\n+    Services.prefs.setCharPref(\n+      \"security.content.signature.root_hash\",\n+      // Hash of the key that signs the normandy dev certificates\n+      \"4C:35:B1:C3:E3:12:D9:55:E7:78:ED:D0:A7:E7:8A:38:83:04:EF:01:BF:FA:03:29:B2:46:9F:3C:C5:EC:36:04\"\n+    );\n+    yield task(serverUrl);\n+    yield new Promise(resolve => server.stop(resolve));\n+  };\n+}\n+\n+function makeMockApiServer() {\n+  const server = new HttpServer();\n+  server.registerDirectory(\"/\", do_get_file(\"mock_api\"));\n+\n+  server.setIndexHandler(Task.async(function* (request, response) {\n+    response.processAsync();\n+    const dir = request.getProperty(\"directory\");\n+    const index = dir.clone();\n+    index.append(\"index.json\");\n+\n+    if (!index.exists()) {\n+      response.setStatusLine(\"1.1\", 404, \"Not Found\");\n+      response.write(`Cannot find path ${index.path}`);\n+      response.finish();\n+      return;\n+    }\n+\n+    try {\n+      const contentsArray = yield OS.File.read(index.path);\n+      const contents = new TextDecoder().decode(contentsArray);\n+      response.write(contents);\n+    } catch(e) {\n+      response.setStatusLine(\"1.1\", 500, \"Server error\");\n+      response.write(e.toString());\n+    } finally {\n+      response.finish();\n+    }\n+  }));\n+\n+  server.start(-1);\n+  return server;\n+}\n+\n+add_task(withServer(function* test_get(serverUrl) {\n+  // Test that NormandyApi can fetch from the test server.\n+  const response = yield NormandyApi.get(`${serverUrl}/api/v1`);\n+  const data = yield response.json();\n+  equal(data[\"recipe-list\"], \"/api/v1/recipe/\", \"Expected data in response\");\n+}));\n+\n+add_task(withServer(function* test_getApiUrl(serverUrl) {\n+  const apiBase = `${serverUrl}/api/v1`;\n+  // Test that NormandyApi can use the self-describing API's index\n+  const recipeListUrl = yield NormandyApi.getApiUrl(\"action-list\");\n+  equal(recipeListUrl, `${apiBase}/action/`, \"Can retrieve action-list URL from API\");\n+}));\n+\n+add_task(withServer(function* test_fetchRecipes() {\n+  const recipes = yield NormandyApi.fetchRecipes();\n+  equal(recipes.length, 1);\n+  equal(recipes[0].name, \"system-addon-test\");\n+}));\n+\n+add_task(withServer(function* test_classifyClient() {\n+  const classification = yield NormandyApi.classifyClient();\n+  Assert.deepEqual(classification, {", "body_text": "I've always been on the fence about stuff like that, because the argument can be made that if you do that you're not testing that the code transforms the file into the data you expect, you're instead testing that you could write two versions of the transformation that have the same output.", "in_reply_to_id": 102705245, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/510", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/102799011", "created_at": "2017-02-23T19:37:59Z", "author_association": "MEMBER", "body": "I've always been on the fence about stuff like that, because the argument can be made that if you do that you're not testing that the code transforms the file into the data you expect, you're instead testing that you could write two versions of the transformation that have the same output.", "updated_at": "2017-02-23T22:37:10Z", "html_url": "https://github.com/mozilla/normandy/pull/510#discussion_r102799011", "pull_request_review_id": 23567117, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/102799011"}, "html": {"href": "https://github.com/mozilla/normandy/pull/510#discussion_r102799011"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/510"}}, "commit_id": "e83c63174a7ed48da636f574c05d9cbeb11abe04", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "position": 105, "path": "recipe-client-addon/test/unit/test_NormandyApi.js", "body_html": "<p>I've always been on the fence about stuff like that, because the argument can be made that if you do that you're not testing that the code transforms the file into the data you expect, you're instead testing that you could write two versions of the transformation that have the same output.</p>", "original_commit_id": "ea2c4ccc9c8d3e6c603edf5ece7bdb9608723090", "id": 102799011}