{"original_position": 23, "diff_hunk": "@@ -3,19 +3,13 @@\n const {utils: Cu} = Components;\n Cu.import(\"resource://shield-recipe-client/lib/NormandyApi.jsm\", this);\n \n-add_task(function* () {\n+add_task(function* test_get() {\n   // Point the add-on to the test server.\n-  yield SpecialPowers.pushPrefEnv({\n-    set: [\n-      [\n-        \"extensions.shield-recipe-client.api_url\",\n-        \"http://mochi.test:8888/browser/browser/extensions/shield-recipe-client/test\",\n-      ],\n-    ],\n-  });\n+  const url = \"http://mochi.test:8888/browser/browser/extensions/shield-recipe-client/test\";\n+  yield SpecialPowers.pushPrefEnv({set: [[\"extensions.shield-recipe-client.api_url\", url]]});\n \n   // Test that NormandyApi can fetch from the test server.\n-  const response = yield NormandyApi.get(\"browser/test_server.sjs\");\n+  const response = yield NormandyApi.get(`${url}/browser/test_server.sjs`);\n   const data = yield response.json();\n-  Assert.deepEqual(data, {test: \"data\"}, \"NormandyApi returned incorrect server data.\");\n+  Assert.deepEqual(data, {test: \"data\"}, \"NormandyApi returned correct server data.\");", "body_text": "They're aren't any better tests that cover the add-on's interactions with the API right now. I'm not sure how we could do that without risking those tests getting out of date with the real API.\nThere are unit tests on the server that assert the API has the shape I expected when writing this code. I'm not sure how best to test this in the add-on. Do you have any suggestions?", "in_reply_to_id": 101018089, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/510", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/101129639", "created_at": "2017-02-14T20:03:18Z", "author_association": "MEMBER", "body": "They're aren't any better tests that cover the add-on's interactions with the API right now. I'm not sure how we could do that without risking those tests getting out of date with the real API.\r\n\r\nThere are unit tests on the server that assert the API has the shape I expected when writing this code. I'm not sure how best to test this in the add-on. Do you have any suggestions?", "updated_at": "2017-02-23T22:37:10Z", "html_url": "https://github.com/mozilla/normandy/pull/510#discussion_r101129639", "pull_request_review_id": 21850299, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/101129639"}, "html": {"href": "https://github.com/mozilla/normandy/pull/510#discussion_r101129639"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/510"}}, "commit_id": "e83c63174a7ed48da636f574c05d9cbeb11abe04", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "position": null, "path": "recipe-client-addon/test/browser/browser_NormandyApi.js", "body_html": "<p>They're aren't any better tests that cover the add-on's interactions with the API right now. I'm not sure how we could do that without risking those tests getting out of date with the real API.</p>\n<p>There are unit tests on the server that assert the API has the shape I expected when writing this code. I'm not sure how best to test this in the add-on. Do you have any suggestions?</p>", "original_commit_id": "b3da82e51da205d0deea69eaa7024170eaba2e51", "id": 101129639}