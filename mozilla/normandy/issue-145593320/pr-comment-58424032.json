{"original_position": 98, "diff_hunk": "@@ -79,7 +129,22 @@ let Normandy = {\n                 options.learnMoreMessage,\n                 options.learnMoreUrl\n             );\n+\n+            resolve(emitter);", "body_text": "I'm imagining something like this:\n\n\nshowHeartbeat immediately fires an event (that is asynchronously dispatched)\n\n\n.then() handler that would recieve the event emitter is registered (but not executed)\n\nQueue is now 1. handle event, 2. execute .then()\n\n\n\nEvent is handled, and event emitter does nothing because there are no listeners\n\n\n.then() handler runs, binding a listener to the event emitter\n\n\nSo this is really only an issue if showHeartbeat is going to immediately, synchronously, fire an event (which is reasonable). I don't know how it is implemented.", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/96", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/58424032", "created_at": "2016-04-04T18:30:24Z", "author_association": "MEMBER", "body": "I'm imagining something like this:\n1. `showHeartbeat` immediately fires an event (that is asynchronously dispatched)\n2. `.then()` handler that would recieve the event emitter is registered (but not executed)\n   \n   > _Queue is now 1. handle event, 2. execute `.then()`_\n3. Event is handled, and event emitter does nothing because there are no listeners\n4. `.then()` handler runs, binding a listener to the event emitter\n\nSo this is really only an issue if `showHeartbeat` is going to immediately, synchronously, fire an event (which is reasonable). I don't know how it is implemented.\n", "updated_at": "2016-04-04T20:56:48Z", "html_url": "https://github.com/mozilla/normandy/pull/96#discussion_r58424032", "pull_request_review_id": null, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/58424032"}, "html": {"href": "https://github.com/mozilla/normandy/pull/96#discussion_r58424032"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/96"}}, "commit_id": "fbbf9981e77cb9d06947a06eac5389628362071f", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "position": 98, "path": "normandy/selfrepair/static/js/normandy_driver.js", "body_html": "<p>I'm imagining something like this:</p>\n<ol>\n<li>\n<p><code>showHeartbeat</code> immediately fires an event (that is asynchronously dispatched)</p>\n</li>\n<li>\n<p><code>.then()</code> handler that would recieve the event emitter is registered (but not executed)</p>\n<blockquote>\n<p><em>Queue is now 1. handle event, 2. execute <code>.then()</code></em></p>\n</blockquote>\n</li>\n<li>\n<p>Event is handled, and event emitter does nothing because there are no listeners</p>\n</li>\n<li>\n<p><code>.then()</code> handler runs, binding a listener to the event emitter</p>\n</li>\n</ol>\n<p>So this is really only an issue if <code>showHeartbeat</code> is going to immediately, synchronously, fire an event (which is reasonable). I don't know how it is implemented.</p>", "original_commit_id": "99b084c7c39708960813a97483bd08e66f533080", "id": 58424032}