{"body": "> Maybe Moving all the signature handling to a save and delete method, and keeping the semantics methods (but without that logic) would be better.\r\n\r\nI strongly think we should be consistent one way or the other, and less strongly believe that we should avoid putting this logic in overridden save/delete handlers, or signals. \r\n\r\nSave and delete signals only get called when the save/delete methods are called on models, so the only difference is whether they're defined on the model as overridden methods, or in standalone functions. Over time I've found that overriding save/delete has some downsides (for the projects I've worked on, at least):\r\n\r\n- They're not always called when the models are saved or deleted, like when updating via a queryset, which means you have to put the logic in multiple places anyway.\r\n- Predicting where save/delete are called isn't always easy (like during tests). You often end up running your custom code at times when you don't expect to.\r\n- It's not obvious external to the class that save/delete do anything more than save to the database, as the names don't convey what you're doing.\r\n\r\nI like the `close` method added in this PR over that.", "body_text": "Maybe Moving all the signature handling to a save and delete method, and keeping the semantics methods (but without that logic) would be better.\n\nI strongly think we should be consistent one way or the other, and less strongly believe that we should avoid putting this logic in overridden save/delete handlers, or signals.\nSave and delete signals only get called when the save/delete methods are called on models, so the only difference is whether they're defined on the model as overridden methods, or in standalone functions. Over time I've found that overriding save/delete has some downsides (for the projects I've worked on, at least):\n\nThey're not always called when the models are saved or deleted, like when updating via a queryset, which means you have to put the logic in multiple places anyway.\nPredicting where save/delete are called isn't always easy (like during tests). You often end up running your custom code at times when you don't expect to.\nIt's not obvious external to the class that save/delete do anything more than save to the database, as the names don't convey what you're doing.\n\nI like the close method added in this PR over that.", "url": "https://api.github.com/repos/mozilla/normandy/issues/comments/293768898", "created_at": "2017-04-13T03:25:59Z", "author_association": "MEMBER", "html_url": "https://github.com/mozilla/normandy/pull/686#issuecomment-293768898", "updated_at": "2017-04-13T03:25:59Z", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "body_html": "<blockquote>\n<p>Maybe Moving all the signature handling to a save and delete method, and keeping the semantics methods (but without that logic) would be better.</p>\n</blockquote>\n<p>I strongly think we should be consistent one way or the other, and less strongly believe that we should avoid putting this logic in overridden save/delete handlers, or signals.</p>\n<p>Save and delete signals only get called when the save/delete methods are called on models, so the only difference is whether they're defined on the model as overridden methods, or in standalone functions. Over time I've found that overriding save/delete has some downsides (for the projects I've worked on, at least):</p>\n<ul>\n<li>They're not always called when the models are saved or deleted, like when updating via a queryset, which means you have to put the logic in multiple places anyway.</li>\n<li>Predicting where save/delete are called isn't always easy (like during tests). You often end up running your custom code at times when you don't expect to.</li>\n<li>It's not obvious external to the class that save/delete do anything more than save to the database, as the names don't convey what you're doing.</li>\n</ul>\n<p>I like the <code>close</code> method added in this PR over that.</p>", "id": 293768898, "issue_url": "https://api.github.com/repos/mozilla/normandy/issues/686"}