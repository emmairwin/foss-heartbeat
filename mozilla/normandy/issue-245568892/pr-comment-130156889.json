{"original_position": 125, "diff_hunk": "@@ -0,0 +1,286 @@\n+\"use strict\";\n+\n+Cu.import(\"resource://gre/modules/IndexedDB.jsm\", this);\n+Cu.import(\"resource://testing-common/AddonTestUtils.jsm\", this);\n+Cu.import(\"resource://shield-recipe-client/lib/Addons.jsm\", this);\n+Cu.import(\"resource://shield-recipe-client/lib/AddonStudies.jsm\", this);\n+\n+const REQUIRED_FIELDS = [\"name\", \"addonId\", \"addonVersion\", \"description\", \"studyStartDate\"];\n+\n+// Initialize test utils\n+AddonTestUtils.initMochitest(this);\n+\n+compose_task(\n+  AddonStudies.withStudies(),\n+  async function testGetMissing() {\n+    is(\n+      await AddonStudies.get(\"does-not-exist\"),\n+      null,\n+      \"get returns null when the requested study does not exist\"\n+    );\n+  }\n+);\n+\n+compose_task(\n+  AddonStudies.withStudies([\n+    studyFactory({name: \"test-study\"}),\n+  ]),\n+  async function testGet([study]) {\n+    const storedStudy = await AddonStudies.get(study.recipeId);\n+    Assert.deepEqual(study, storedStudy, \"get retrieved a study from storage.\");\n+  }\n+);\n+\n+compose_task(\n+  AddonStudies.withStudies([\n+    studyFactory(),\n+    studyFactory(),\n+  ]),\n+  async function testGetAll(studies) {\n+    const storedStudies = await AddonStudies.getAll();\n+    Assert.deepEqual(\n+      new Set(storedStudies),\n+      new Set(studies),\n+      \"getAll returns every stored study.\",\n+    );\n+  }\n+);\n+\n+compose_task(\n+  AddonStudies.withStudies([\n+    studyFactory({name: \"test-study\"}),\n+  ]),\n+  async function testHas([study]) {\n+    let hasStudy = await AddonStudies.has(study.recipeId);\n+    ok(hasStudy, \"has returns true for a study that exists in storage.\");\n+\n+    hasStudy = await AddonStudies.has(\"does-not-exist\");\n+    ok(!hasStudy, \"has returns false for a study that doesn't exist in storage.\");\n+  }\n+);\n+\n+compose_task(\n+  AddonStudies.withStudies(),\n+  async function testCloseDatabase() {\n+    await AddonStudies.close();\n+    const openSpy = sinon.spy(IndexedDB, \"open\");\n+    sinon.assert.notCalled(openSpy);\n+\n+    // Using studies at all should open the database, but only once.\n+    await AddonStudies.has(\"foo\");\n+    await AddonStudies.get(\"foo\");\n+    sinon.assert.calledOnce(openSpy);\n+\n+    // close can be called multiple times\n+    await AddonStudies.close();\n+    await AddonStudies.close();\n+\n+    // After being closed, new operations cause the database to be opened again\n+    await AddonStudies.has(\"test-study\");\n+    sinon.assert.calledTwice(openSpy);\n+\n+    openSpy.restore();\n+  }\n+);\n+\n+compose_task(\n+  AddonStudies.withStudies([\n+    studyFactory({name: \"test-study1\"}),\n+    studyFactory({name: \"test-study2\"}),\n+  ]),\n+  async function testClear([study1, study2]) {\n+    const hasAll = (\n+      (await AddonStudies.has(study1.recipeId)) &&\n+      (await AddonStudies.has(study2.recipeId))\n+    );\n+    ok(hasAll, \"Before calling clear, both studies are in storage.\");\n+\n+    await AddonStudies.clear();\n+    const hasAny = (\n+      (await AddonStudies.has(study1.recipeId)) ||\n+      (await AddonStudies.has(study2.recipeId))\n+    );\n+    ok(!hasAny, \"After calling clear, all studies are removed from storage.\");\n+  }\n+);\n+\n+let _startArgsFactoryId = 0;\n+function startArgsFactory(args) {\n+  return Object.assign({\n+    recipeId: _startArgsFactoryId++,\n+    name: \"Test\",\n+    description: \"Test\",\n+    addonUrl: \"http://test/addon.xpi\",\n+  }, args);\n+}\n+\n+add_task(async function testStartRequiredArguments() {\n+  const requiredArguments = startArgsFactory();\n+  for (const key in requiredArguments) {\n+    const args = Object.assign({}, requiredArguments);\n+    delete args[key];\n+    Assert.rejects(\n+      AddonStudies.start(args),\n+      /Required arguments/,\n+      \"start rejects when missing required arguments.\"", "body_text": "I think this will look a bit odd in the test runs, with the message \"start rejects when missing required arguments.\" over and over. Maybe include the key that was under test at the time?\nAssert.rejects(\n  AddonStudies.start(args),\n  new Regexp(`Required arguments.*${key}`),\n  `start should reject when missing required argument ${key}.`\n);", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/919", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/130156889", "created_at": "2017-07-28T18:33:32Z", "author_association": "MEMBER", "body": "I think this will look a bit odd in the test runs, with the message \"start rejects when missing required arguments.\" over and over. Maybe include the key that was under test at the time?\r\n\r\n```\r\nAssert.rejects(\r\n  AddonStudies.start(args),\r\n  new Regexp(`Required arguments.*${key}`),\r\n  `start should reject when missing required argument ${key}.`\r\n);", "updated_at": "2017-07-29T08:05:04Z", "html_url": "https://github.com/mozilla/normandy/pull/919#discussion_r130156889", "pull_request_review_id": 53003267, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/130156889"}, "html": {"href": "https://github.com/mozilla/normandy/pull/919#discussion_r130156889"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/919"}}, "commit_id": "7351b095c1164513f096650ebc41a4298af9fc2c", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "position": null, "path": "recipe-client-addon/test/browser/browser_AddonStudies.js", "body_html": "<p>I think this will look a bit odd in the test runs, with the message \"start rejects when missing required arguments.\" over and over. Maybe include the key that was under test at the time?</p>\n<pre><code>Assert.rejects(\n  AddonStudies.start(args),\n  new Regexp(`Required arguments.*${key}`),\n  `start should reject when missing required argument ${key}.`\n);\n</code></pre>", "original_commit_id": "0b11e2ad630a07e3b9bf01f454b6ea48350b0510", "id": 130156889}