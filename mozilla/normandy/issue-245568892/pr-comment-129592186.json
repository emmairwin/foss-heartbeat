{"original_position": 203, "diff_hunk": "@@ -0,0 +1,260 @@\n+/* This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n+\"use strict\";\n+\n+/**\n+ * @typedef {Object} Study\n+ * @property {Number} recipeId\n+ *   ID of the recipe that created the study. Used as the primary key of the\n+ *   study.\n+ * @property {string} name\n+ *   Name of the study\n+ * @property {string} description\n+ *   Description of the study and its intent.\n+ * @property {boolean} active\n+ *   Is the study still running?\n+ * @property {string} addonId\n+ *   Add-on ID for this particular study.\n+ * @property {string} addonUrl\n+ *   URL that the study add-on was installed from.\n+ * @property {string} addonVersion\n+ *   Study add-on version number\n+ * @property {string} studyStartDate\n+ *   Date when the study was started.\n+ * @property {Date} studyEndDate\n+ *   Date when the study was ended.\n+ */\n+\n+const {utils: Cu, interfaces: Ci} = Components;\n+Cu.import(\"resource://gre/modules/osfile.jsm\");\n+Cu.import(\"resource://gre/modules/XPCOMUtils.jsm\");\n+\n+XPCOMUtils.defineLazyModuleGetter(this, \"FileUtils\", \"resource://gre/modules/FileUtils.jsm\");\n+XPCOMUtils.defineLazyModuleGetter(this, \"IndexedDB\", \"resource://gre/modules/IndexedDB.jsm\");\n+XPCOMUtils.defineLazyModuleGetter(this, \"AddonManager\", \"resource://gre/modules/AddonManager.jsm\");\n+XPCOMUtils.defineLazyModuleGetter(this, \"Addons\", \"resource://shield-recipe-client/lib/Addons.jsm\");\n+XPCOMUtils.defineLazyModuleGetter(this, \"LogManager\", \"resource://shield-recipe-client/lib/LogManager.jsm\");\n+\n+Cu.importGlobalProperties([\"fetch\"]); /* globals fetch */\n+\n+this.EXPORTED_SYMBOLS = [\"AddonStudies\"];\n+\n+const KEY_TEMPDIR = \"TmpD\";\n+const DB_NAME = \"shield\";\n+const STORE_NAME = \"addon-studies\";\n+const DB_OPTIONS = {\n+  version: 1,\n+  storage: \"persistent\",\n+};\n+const log = LogManager.getLogger(\"addon-studies\");\n+\n+/**\n+ * Cache the database connection so that it is shared among multiple operations.\n+ */\n+let databasePromise;\n+async function getDatabase() {\n+  if (!databasePromise) {\n+    databasePromise = IndexedDB.open(DB_NAME, DB_OPTIONS, db => {\n+      db.createObjectStore(STORE_NAME, {\n+        keyPath: \"recipeId\",\n+      });\n+    });\n+  }\n+  return databasePromise;\n+}\n+\n+/**\n+ * Get a transaction for interacting with the study store.\n+ *\n+ * NOTE: Methods on the store returned by this function MUST be called\n+ * synchronously, otherwise the transaction with the store will expire.\n+ * This is why the helper takes a database as an argument; if we fetched the\n+ * database in the helper directly, the helper would be async and the\n+ * transaction would expire before methods on the store were called.\n+ */\n+function getStore(db) {\n+  return db.objectStore(STORE_NAME, \"readwrite\");\n+}\n+\n+this.AddonStudies = {\n+  /**\n+   * Test wrapper that temporarily replaces the stored studies with the given\n+   * ones. The original stored studies are restored upon completion.\n+   * @param {Array} [studies=[]]\n+   */\n+  withStudies(studies = []) {\n+    return function wrapper(testFunction) {\n+      return async function wrappedTestFunction(...args) {\n+        const oldStudies = await AddonStudies.getAll();\n+        const db = await getDatabase();\n+        await AddonStudies.clear();\n+        for (const study of studies) {\n+          await getStore(db).add(study);\n+        }\n+\n+        try {\n+          await testFunction(...args, studies);\n+        } finally {\n+          await AddonStudies.clear();\n+          for (const study of oldStudies) {\n+            await getStore(db).add(study);\n+          }\n+\n+          await AddonStudies.close();\n+        }\n+      };\n+    };\n+  },\n+\n+  /**\n+   * Remove all stored studies.\n+   */\n+  async clear() {\n+    const db = await getDatabase();\n+    await getStore(db).clear();\n+  },\n+\n+  /**\n+   * Close the current database connection if it is open.\n+   */\n+  async close() {\n+    if (databasePromise) {\n+      const promise = databasePromise;\n+      databasePromise = null;\n+      const db = await promise;\n+      await db.close();\n+    }\n+  },\n+\n+  /**\n+   * Test whether there is a study in storage for the given recipe ID.\n+   * @param {Number} recipeId\n+   * @returns {Boolean}\n+   */\n+  async has(recipeId) {\n+    const db = await getDatabase();\n+    const study = await getStore(db).get(recipeId);\n+    return !!study;\n+  },\n+\n+  /**\n+   * Fetch a study from storage.\n+   * @param {Number} recipeId\n+   * @return {Study}\n+   */\n+  async get(recipeId) {\n+    const db = await getDatabase();\n+    return getStore(db).get(recipeId);\n+  },\n+\n+  /**\n+   * Fetch all studies in storage.\n+   * @return {Array<Study>}\n+   */\n+  async getAll() {\n+    const db = await getDatabase();\n+    return getStore(db).getAll();\n+  },\n+\n+  /**\n+   * Start a new study. Installs an add-on and stores the study info.\n+   * @param {Object} options\n+   * @param {Number} options.recipeId\n+   * @param {String} options.name\n+   * @param {String} options.description\n+   * @param {String} options.addonUrl\n+   * @throws\n+   *   If any of the required options aren't given.\n+   *   If a study for the given recipeID already exists in storage.\n+   *   If add-on installation fails.\n+   */\n+  async start({recipeId, name, description, addonUrl}) {\n+    if (!recipeId || !name || !description || !addonUrl) {\n+      throw new Error(\"Required arguments (recipeId, name, description, addonUrl) missing.\");\n+    }\n+\n+    const db = await getDatabase();\n+    if (await getStore(db).get(recipeId)) {\n+      throw new Error(`A study for recipe ${recipeId} already exists.`);\n+    }\n+\n+    const addonFile = await this.downloadAddonToTemporaryFile(addonUrl);\n+    const install = await AddonManager.getInstallForFile(addonFile);\n+    const study = {\n+      recipeId,\n+      name,\n+      description,\n+      addonId: install.addon.id,\n+      addonVersion: install.addon.version,\n+      addonUrl,\n+      active: true,\n+      studyStartDate: new Date(),\n+    };\n+\n+    try {\n+      await getStore(db).add(study);\n+      await Addons.applyInstall(install, false);\n+      return study;\n+    } catch (err) {\n+      await getStore(db).delete(recipeId);\n+      throw err;\n+    } finally {\n+      addonFile.remove(true);", "body_text": "Please use OS.File.remove instead.", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/919", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/129592186", "created_at": "2017-07-26T14:42:29Z", "author_association": "CONTRIBUTOR", "body": "Please use `OS.File.remove` instead.", "updated_at": "2017-07-29T08:05:04Z", "html_url": "https://github.com/mozilla/normandy/pull/919#discussion_r129592186", "pull_request_review_id": 52370766, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/129592186"}, "html": {"href": "https://github.com/mozilla/normandy/pull/919#discussion_r129592186"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/919"}}, "commit_id": "7351b095c1164513f096650ebc41a4298af9fc2c", "user": {"following_url": "https://api.github.com/users/gijsk/following{/other_user}", "events_url": "https://api.github.com/users/gijsk/events{/privacy}", "organizations_url": "https://api.github.com/users/gijsk/orgs", "url": "https://api.github.com/users/gijsk", "gists_url": "https://api.github.com/users/gijsk/gists{/gist_id}", "html_url": "https://github.com/gijsk", "subscriptions_url": "https://api.github.com/users/gijsk/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/375983?v=4", "repos_url": "https://api.github.com/users/gijsk/repos", "received_events_url": "https://api.github.com/users/gijsk/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/gijsk/starred{/owner}{/repo}", "site_admin": false, "login": "gijsk", "type": "User", "id": 375983, "followers_url": "https://api.github.com/users/gijsk/followers"}, "position": null, "path": "recipe-client-addon/lib/AddonStudies.jsm", "body_html": "<p>Please use <code>OS.File.remove</code> instead.</p>", "original_commit_id": "2bf859d0e75d413a3bf070eecc920d3418f1004c", "id": 129592186}