{"original_position": 244, "diff_hunk": "@@ -82,112 +56,300 @@ describe('ShowHeartbeatAction', () => {\n     }));\n   });\n \n-  it('should not bother to annotate an empty post-answer URL', async () => {\n-    const recipe = recipeFactory({\n-      arguments: {\n-        postAnswerUrl: '',\n-      },\n-    });\n-    const action = new ShowHeartbeatAction(normandy, recipe);\n+  describe('Repeat Options', () => {\n+    describe('`once`', () => {\n+      afterEach(() => {\n+        normandy.showHeartbeat.calls.reset();\n+        delete normandy.mock.storage.data.lastShown;\n+      });\n \n-    await action.execute();\n-    const postAnswerUrl = normandy.showHeartbeat.calls.argsFor(0)[0].postAnswerUrl;\n-    expect(postAnswerUrl).toEqual('');\n-  });\n+      it('should NOT show if another heartbeat has ran already', async() => {\n+        const firstAction = new ShowHeartbeatAction(normandy, recipeFactory());\n+        await firstAction.execute();\n \n-  it('should annotate the post-answer URL with extra query args', async () => {\n-    const url = 'https://example.com';\n-    const recipe = recipeFactory({\n-      arguments: {\n-        postAnswerUrl: url,\n-      },\n+        // first time should run fine\n+        expect(normandy.showHeartbeat).toHaveBeenCalled();\n+\n+        // clear the history of calls from the testing\n+        normandy.showHeartbeat.calls.reset();\n+\n+        const secondAction = new ShowHeartbeatAction(normandy, recipeFactory());\n+        await secondAction.execute();\n+        // second time should NOT run\n+        expect(normandy.showHeartbeat).not.toHaveBeenCalled();\n+      });\n+\n+      it('should set the last-shown date', async () => {\n+        const action = new ShowHeartbeatAction(normandy, recipeFactory());\n+\n+        spyOn(Date, 'now').and.returnValue(10);\n+\n+        expect(normandy.mock.storage.data.lastShown).toBeUndefined();\n+        await action.execute();\n+        expect(normandy.mock.storage.data.lastShown).toEqual('10');\n+      });\n+\n+      it('should show if it has not been shown already', async() => {\n+        const onceRecipe = recipeFactory();\n+\n+        const action = new ShowHeartbeatAction(normandy, onceRecipe);\n+        await action.execute();\n+\n+        expect(normandy.showHeartbeat).toHaveBeenCalled();\n+      });\n+\n+      it('should NOT show if it has been shown already', async() => {\n+        const onceRecipe = recipeFactory();\n+\n+        const action = new ShowHeartbeatAction(normandy, onceRecipe);\n+\n+        // set the lastShown value in storage,\n+        // so heartbeat thinks it's run already before\n+        normandy.mock.storage.data.lastShown = '1337';\n+\n+        // attempt to run it again\n+        await action.execute();\n+\n+        // it should NOT run since it's already 'run' once before\n+        expect(normandy.showHeartbeat).not.toHaveBeenCalled();\n+      });\n     });\n-    const action = new ShowHeartbeatAction(normandy, recipe);\n \n-    normandy.mock.client.version = '42.0.1';\n-    normandy.mock.client.channel = 'nightly';\n-    normandy.mock.client.isDefaultBrowser = true;\n-    normandy.mock.client.searchEngine = 'shady-tims';\n-    normandy.mock.client.syncSetup = true;\n \n-    await action.execute();\n-    const postAnswerUrl = normandy.showHeartbeat.calls.argsFor(0)[0].postAnswerUrl;\n-    const params = new URL(postAnswerUrl).searchParams;\n-    expect(params.get('source')).toEqual('heartbeat');\n-    expect(params.get('surveyversion')).toEqual('55');\n-    expect(params.get('updateChannel')).toEqual('nightly');\n-    expect(params.get('fxVersion')).toEqual('42.0.1');\n-    expect(params.get('isDefaultBrowser')).toEqual('1');\n-    expect(params.get('searchEngine')).toEqual('shady-tims');\n-    expect(params.get('syncSetup')).toEqual('1');\n-\n-    // telemetry data is turned off, so no userId should be passed into params\n-    expect(params.get('userId')).toBeNull();\n-  });\n+    describe('`nag`', () => {\n+      afterEach(() => {\n+        normandy.showHeartbeat.calls.reset();\n+        delete normandy.mock.storage.data.lastShown;\n+      });\n \n+      const nagConfig = {\n+        arguments: {\n+          repeatOption: 'nag',\n+        },\n+      };\n \n-  it('should annotate the post-answer URL with google analytics params', async () => {\n-    const url = 'https://example.com';\n-    const recipe = recipeFactory({\n-      action: 'show-heartbeat',\n-      arguments: {\n-        postAnswerUrl: url,\n-        message: 'This is a test message!!',\n-      },\n+      it('should NOT show if another heartbeat has ran already', async() => {\n+        const firstRecipe = recipeFactory({ ...nagConfig });\n+        const firstAction = new ShowHeartbeatAction(normandy, firstRecipe);\n+        await firstAction.execute();\n+\n+        // first time should run fine\n+        expect(normandy.showHeartbeat).toHaveBeenCalled();\n+\n+        // clear the history of calls from the testing\n+        normandy.showHeartbeat.calls.reset();\n+\n+        const secondRecipe = recipeFactory({ ...nagConfig });\n+        const secondAction = new ShowHeartbeatAction(normandy, secondRecipe);\n+        await secondAction.execute();\n+        // second time should NOT run\n+        expect(normandy.showHeartbeat).not.toHaveBeenCalled();\n+      });\n+\n+      it('should set the last-shown date', async () => {\n+        const action = new ShowHeartbeatAction(normandy, recipeFactory({ ...nagConfig }));\n+\n+        spyOn(Date, 'now').and.returnValue(10);\n+\n+        expect(normandy.mock.storage.data.lastShown).toBeUndefined();\n+        await action.execute();\n+        expect(normandy.mock.storage.data.lastShown).toEqual('10');\n+      });\n+\n+      it('should show if a user has not interacted with it', async () => {\n+        const testRecipe = recipeFactory({ ...nagConfig });\n+        const testAction = new ShowHeartbeatAction(normandy, testRecipe);\n+        await testAction.execute();\n+        expect(normandy.showHeartbeat).toHaveBeenCalled();\n+      });\n+\n+      it('should not show if the user has interacted with it', async() => {\n+        const testAction = new ShowHeartbeatAction(normandy, recipeFactory({ ...nagConfig }));\n+        expect(normandy.showHeartbeat).not.toHaveBeenCalled();\n+\n+        // fake the 'last interacted' value\n+        testAction.updateLastInteraction();\n+\n+        await testAction.execute();\n+\n+        expect(normandy.showHeartbeat).not.toHaveBeenCalled();\n+      });\n     });\n-    const action = new ShowHeartbeatAction(normandy, recipe);\n \n-    normandy.mock.client.version = '42.0.1';\n-    normandy.mock.client.channel = 'nightly';\n-    normandy.mock.client.isDefaultBrowser = true;\n-    normandy.mock.client.searchEngine = 'shady-tims';\n-    normandy.mock.client.syncSetup = true;\n \n-    await action.execute();\n-    const postAnswerUrl = normandy.showHeartbeat.calls.argsFor(0)[0].postAnswerUrl;\n-    const params = new URL(postAnswerUrl).searchParams;\n-    expect(params.get('utm_source')).toEqual('firefox');\n-    expect(params.get('utm_medium')).toEqual('show-heartbeat');\n-    expect(params.get('utm_campaign')).toEqual('Thisisatestmessage%21%21');\n+    describe('`xdays`', () => {\n+      afterEach(() => {\n+        normandy.showHeartbeat.calls.reset();\n+        delete normandy.mock.storage.data.lastShown;\n+      });\n+\n+      const ONE_DAY = (1000 * 3600 * 24); // in milliseconds\n+      const repeatEvery = 7; // days\n+      const xdaysConfig = {\n+        arguments: {\n+          repeatOption: 'xdays',\n+          repeatEvery,\n+        },\n+      };\n+\n+      it('should not show if less than `repeatEvery` days has elapsed', async () => {\n+        const action = new ShowHeartbeatAction(normandy, recipeFactory({ ...xdaysConfig }));\n+\n+        let idx = 0;", "body_text": "Old habit - using for (let i=0; ... creates a new variable on each loop, defining it beforehand will only use the one instance. I'll change it.", "in_reply_to_id": 96921236, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/429", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/97107506", "created_at": "2017-01-20T16:35:33Z", "author_association": "CONTRIBUTOR", "body": "Old habit - using `for (let i=0; ...` creates a new variable on each loop, defining it beforehand will only use the one instance. I'll change it.", "updated_at": "2017-01-25T17:16:54Z", "html_url": "https://github.com/mozilla/normandy/pull/429#discussion_r97107506", "pull_request_review_id": 17713983, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/97107506"}, "html": {"href": "https://github.com/mozilla/normandy/pull/429#discussion_r97107506"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/429"}}, "commit_id": "d5274b2a2f7acd69f4786a61d91518dd6c82ab41", "user": {"following_url": "https://api.github.com/users/andymikulski/following{/other_user}", "events_url": "https://api.github.com/users/andymikulski/events{/privacy}", "organizations_url": "https://api.github.com/users/andymikulski/orgs", "url": "https://api.github.com/users/andymikulski", "gists_url": "https://api.github.com/users/andymikulski/gists{/gist_id}", "html_url": "https://github.com/andymikulski", "subscriptions_url": "https://api.github.com/users/andymikulski/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/2767162?v=4", "repos_url": "https://api.github.com/users/andymikulski/repos", "received_events_url": "https://api.github.com/users/andymikulski/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/andymikulski/starred{/owner}{/repo}", "site_admin": false, "login": "andymikulski", "type": "User", "id": 2767162, "followers_url": "https://api.github.com/users/andymikulski/followers"}, "position": null, "path": "recipe-server/client/actions/tests/test_show-heartbeat.js", "body_html": "<p>Old habit - using <code>for (let i=0; ...</code> creates a new variable on each loop, defining it beforehand will only use the one instance. I'll change it.</p>", "original_commit_id": "fd8be9d878551e484d9a2439b725c9bb42c436ce", "id": 97107506}