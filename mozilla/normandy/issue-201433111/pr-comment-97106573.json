{"original_position": 181, "diff_hunk": "@@ -16,35 +19,218 @@ export default class ShowHeartbeatAction extends Action {\n     // 'global' storage\n     // (constant namespace - all heartbeats can access)\n     this.heartbeatStorage = normandy.createStorage('normandy-heartbeat');\n+\n+    // context bindings\n+    this.updateLastInteraction = ::this.updateLastInteraction;\n+    this.updateLastShown = ::this.updateLastShown;\n+  }\n+\n+  /**\n+   * Returns a surveyId value. If recipe calls\n+   * to include the Telemetry UUID value,\n+   * then the UUID is attached to the surveyId\n+   * in `<surveyId>::<userId>` format.\n+   *\n+   * @return {String} Survey ID, possibly with user UUID\n+   */\n+  generateSurveyId() {\n+    const {\n+      includeTelemetryUUID,\n+      surveyId,\n+    } = this.recipe.arguments;\n+    const { userId } = this.normandy;\n+\n+    let value = surveyId;\n+\n+    // should user ID stuff be sent to telemetry?\n+    if (includeTelemetryUUID && !!userId) {\n+      // alter the survey ID to include that UUID\n+      value = `${surveyId}::${userId}`;\n+    }\n+\n+    return value;\n   }\n \n   /**\n-   * Calculates the number of milliseconds since the last heartbeat from any recipe\n-   * was shown. Returns a boolean indicating if a heartbeat has been shown recently.\n+   * Returns a boolean indicating if a heartbeat has been shown recently.\n+   *\n+   * Checks the saved `lastShown` value against the current time\n+   * and returns if the time is under HEARTBEAT_THROTTLE milliseconds.\n+   *\n+   * @async\n+   * @return {Boolean}  Has any heartbeat been shown recently?\n    */\n   async heartbeatShownRecently() {\n     const lastShown = await this.heartbeatStorage.getItem('lastShown');\n-    const timeSince = lastShown ? new Date() - lastShown : Infinity;\n+    const timeSince = !!lastShown ? // eslint-disable-line no-extra-boolean-cast\n+      new Date() - parseFloat(lastShown) : Infinity;\n \n     // Return a boolean indicating if a heartbeat\n     // has shown within the last HEARTBEAT_THROTTLE ms\n     return timeSince < HEARTBEAT_THROTTLE;\n   }\n \n   /**\n+   * Looks up the time the prompt was last displayed to the user,\n+   * and converts it to a Number (if found).\n+   *\n+   * @async\n+   * @return {number}   Timestamp of last prompt showing\n+   */\n+  async getLastShown() {\n+    const lastShown = await this.storage.getItem('lastShown');\n+    return typeof lastShown !== 'undefined' ?\n+      parseFloat(lastShown) : null;\n+  }\n+\n+  /**\n    * Checks when this survey was last shown,\n    * and returns a boolean indicating if the\n-   * user has seen this survey already or not.\n+   * user has ever seen this survey or not.\n+   *\n+   * @async\n+   * @return {Boolean}  Has the survey ever been shown?\n    */\n-  async surveyHasShown() {\n-    const lastShown = await this.storage.getItem('lastShown');\n+  async hasShownBefore() {\n+    const lastShown = await this.getLastShown();\n     // If no survey has been shown, lastShown will be falsey.\n     return !!lastShown;\n   }\n \n+  /**\n+   * Determines if this heartbeat was shown\n+   * at least x days ago.\n+   *\n+   * @param  {Number}  days Days ago to check\n+   * @return {boolean}      Has prompt been shown by that date?\n+   */\n+  async shownAtleastDaysAgo(days) {\n+    const hasShown = await this.hasShownBefore();\n+\n+    if (!hasShown) {\n+      return false;\n+    }\n+\n+    // get timestamp of last shown\n+    const timeLastShown = await this.getLastShown();\n+\n+    // get the difference between now and then\n+    const timeElapsed = Date.now() - timeLastShown;\n+\n+    // time limit is the number of days passed in\n+    // converted into milliseconds\n+    const timeLimit = ONE_DAY * days;\n+\n+    // if the diff is smaller than the limit,\n+    // that means that the last time the user saw the prompt\n+    // was less than the `days` passed in\n+    return timeElapsed < timeLimit;\n+  }\n+\n+  /**\n+   * Simple function to read the lastInteraction\n+   * timestamp (if any) from local storage.\n+   * @return {number}   Timestamp of last prompt interaction (if any)\n+   */\n+  async getLastInteraction() {\n+    const lastInteraction = await this.storage.getItem('lastInteraction');\n+\n+    return typeof lastInteraction !== 'undefined' ?\n+      parseFloat(lastInteraction) : null;\n+  }\n+\n+  /**\n+   * Gets the timestamp of the last prompt interaction,\n+   * and returns the time (in ms) since then.\n+   *\n+   * @async\n+   * @return {number}\n+   */\n+  async sinceLastInteraction() {\n+    const lastInteraction = await this.getLastInteraction();\n+\n+    return typeof lastInteraction !== 'undefined' ?\n+      Date.now() - lastInteraction : null;\n+  }\n+\n+  /**\n+   * Checks when the survey prompt last had\n+   * interaction from the user (if ever),\n+   * and returns a boolean indicating if the\n+   * user has ever had interaction\n+   *\n+   * @async\n+   * @return {Boolean}  Has the survey ever had interaction?\n+   */\n+  async hasHadInteraction() {\n+    const lastInteraction = await this.getLastInteraction();\n+    return !!lastInteraction;\n+  }\n+\n+  /**\n+   * Checks the repeat argument for this recipe,\n+   * then determines if the recipe can be qualified as 'ran'.\n+   * This ultimately decides if the prompt is shown at all\n+   * to the end user.\n+   *\n+   * @return {boolean}        Has the heartbeat been shown?\n+   */\n+  async heartbeatHasRan() {", "body_text": "I'm confused. This function checks the recipe to see if it's fulfilled the requirements to be considered 'shown' (that once has been shown once, that nag has been interacted with, etc). It doesn't determine if anything should run - it just checks if the heartbeat has met its specific criteria for being 'ran'.\nThe function shouldNotExecute (Line 214) determines if anything should run (or specifically, shouldn't). It checks normandy's testing state, the global heartbeat timer, and then checks if this specific heartbeat has ran (via heartbeatHasRan).\nPerhaps the naming convention needs to be changed for some of these functions?", "in_reply_to_id": 96923325, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/429", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/97106573", "created_at": "2017-01-20T16:30:32Z", "author_association": "CONTRIBUTOR", "body": "I'm confused. This function checks the recipe to see if it's fulfilled the requirements to be considered 'shown' (that `once` has been shown once, that `nag` has been interacted with, etc). It doesn't determine if anything _should_ run - it just checks if the heartbeat has met its specific criteria for being 'ran'.\r\n\r\nThe function `shouldNotExecute` (Line 214) determines if anything should run (or specifically, shouldn't). It checks normandy's testing state, the global heartbeat timer, and then checks if this specific heartbeat has ran (via `heartbeatHasRan`).\r\n\r\nPerhaps the naming convention needs to be changed for some of these functions?", "updated_at": "2017-01-25T17:16:54Z", "html_url": "https://github.com/mozilla/normandy/pull/429#discussion_r97106573", "pull_request_review_id": 17712955, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/97106573"}, "html": {"href": "https://github.com/mozilla/normandy/pull/429#discussion_r97106573"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/429"}}, "commit_id": "d5274b2a2f7acd69f4786a61d91518dd6c82ab41", "user": {"following_url": "https://api.github.com/users/andymikulski/following{/other_user}", "events_url": "https://api.github.com/users/andymikulski/events{/privacy}", "organizations_url": "https://api.github.com/users/andymikulski/orgs", "url": "https://api.github.com/users/andymikulski", "gists_url": "https://api.github.com/users/andymikulski/gists{/gist_id}", "html_url": "https://github.com/andymikulski", "subscriptions_url": "https://api.github.com/users/andymikulski/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/2767162?v=4", "repos_url": "https://api.github.com/users/andymikulski/repos", "received_events_url": "https://api.github.com/users/andymikulski/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/andymikulski/starred{/owner}{/repo}", "site_admin": false, "login": "andymikulski", "type": "User", "id": 2767162, "followers_url": "https://api.github.com/users/andymikulski/followers"}, "position": null, "path": "recipe-server/client/actions/show-heartbeat/index.js", "body_html": "<p>I'm confused. This function checks the recipe to see if it's fulfilled the requirements to be considered 'shown' (that <code>once</code> has been shown once, that <code>nag</code> has been interacted with, etc). It doesn't determine if anything <em>should</em> run - it just checks if the heartbeat has met its specific criteria for being 'ran'.</p>\n<p>The function <code>shouldNotExecute</code> (Line 214) determines if anything should run (or specifically, shouldn't). It checks normandy's testing state, the global heartbeat timer, and then checks if this specific heartbeat has ran (via <code>heartbeatHasRan</code>).</p>\n<p>Perhaps the naming convention needs to be changed for some of these functions?</p>", "original_commit_id": "fd8be9d878551e484d9a2439b725c9bb42c436ce", "id": 97106573}