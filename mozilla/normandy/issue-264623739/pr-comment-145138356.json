{"original_position": 23, "diff_hunk": "@@ -57,6 +57,10 @@ export default class RecipeForm extends React.PureComponent {\n     'opt-out-study': OptOutStudyFields,\n   };\n \n+  componentDidMount() {\n+    this.defaultIdenticonSeed = this.defaultIdenticonSeed || IdenticonField.generateSeed();", "body_text": "The identicon_seed field has its value set up like so:value={recipe.get('identicon_seed')} - the issue here is that for new/cloned recipes, the identicon_seed will be undefined, but we need a random one to be chosen so it appears on the 'create' form.\nDoing something like recipe.get('identicon', generateRandomIcon()) solves this in that it falls back to a random identicon if one is not set. But, the issue there is that on each re-render, generateRandomIcon is fired, so the identicon changes with each render. To solve that, I used this.defaultSeed - it's set once, and then remains that value for the rest of the component's lifespan. Subsequent re-renders still fall back on the already defined default.\nThe issue with having IdenticonField generating a default is the case in which the field does not have a value but will have one loaded later. Since it's a simple form component, value changes need to be registered through onChange (that is, the value is tracked as a prop, not internally in the component). From there, it steps into a weird territory where it fires onChange when there's no value yet, but if another value is loaded, then another onChange needs to fire. This leads to weird flashes of different identicons appearing during page load. And, speaking semantically, since it really wasn't changing but being set to an initial value, an onChange event shouldn't technically need to fire.\nThe reason why I had originally put the defaultIdenticonSeed initialization inside didMount was the idea that on each mount, the default seed identicon would change, preventing the same default identicon from being offered (say, if the user was creating multiple recipes in one session). I reckon the code being in the constructor function the same, with the only difference being we need to add the super(props) boilerplate to the constructor. You are correct about not needing the thing = thing || otherThing business in the constructor, though.", "in_reply_to_id": 144089297, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/1103", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/145138356", "created_at": "2017-10-17T13:58:03Z", "author_association": "CONTRIBUTOR", "body": "The identicon_seed field has its value set up like so:`value={recipe.get('identicon_seed')}` - the issue here is that for new/cloned recipes, the `identicon_seed` will be undefined, but we need a random one to be chosen so it appears on the 'create' form.\r\n\r\nDoing something like `recipe.get('identicon', generateRandomIcon())` solves this in that it falls back to a random identicon if one is not set. But, the issue there is that on each re-render, `generateRandomIcon` is fired, so the identicon changes with each render. To solve that, I used `this.defaultSeed` - it's set once, and then remains that value for the rest of the component's lifespan. Subsequent re-renders still fall back on the already defined default.\r\n\r\nThe issue with having `IdenticonField` generating a default is the case in which the field does not have a value but will have one loaded later. Since it's a simple form component, value changes need to be registered through `onChange` (that is, the `value` is tracked as a prop, not internally in the component). From there, it steps into a weird territory where it fires `onChange` when there's no value yet, but if another value is loaded, then another `onChange` needs to fire. This leads to weird flashes of different identicons appearing during page load. And, speaking semantically, since it really wasn't changing but being set to an initial value, an `onChange` event shouldn't technically need to fire.\r\n\r\nThe reason why I had originally put the `defaultIdenticonSeed` initialization inside `didMount` was the idea that on each mount, the default seed identicon would change, preventing the same default identicon from being offered (say, if the user was creating multiple recipes in one session). I reckon the code being in the constructor function the same, with the only difference being we need to add the `super(props)` boilerplate to the constructor. You are correct about not needing the `thing = thing || otherThing` business in the constructor, though.", "updated_at": "2017-10-18T16:35:27Z", "html_url": "https://github.com/mozilla/normandy/pull/1103#discussion_r145138356", "pull_request_review_id": 69893312, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/145138356"}, "html": {"href": "https://github.com/mozilla/normandy/pull/1103#discussion_r145138356"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/1103"}}, "commit_id": "1a10f6dda6963db629ca356e154a50c70692bbf9", "user": {"following_url": "https://api.github.com/users/andymikulski/following{/other_user}", "events_url": "https://api.github.com/users/andymikulski/events{/privacy}", "organizations_url": "https://api.github.com/users/andymikulski/orgs", "url": "https://api.github.com/users/andymikulski", "gists_url": "https://api.github.com/users/andymikulski/gists{/gist_id}", "html_url": "https://github.com/andymikulski", "subscriptions_url": "https://api.github.com/users/andymikulski/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/2767162?v=4", "repos_url": "https://api.github.com/users/andymikulski/repos", "received_events_url": "https://api.github.com/users/andymikulski/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/andymikulski/starred{/owner}{/repo}", "site_admin": false, "login": "andymikulski", "type": "User", "id": 2767162, "followers_url": "https://api.github.com/users/andymikulski/followers"}, "position": null, "path": "recipe-server/client/control/components/recipes/RecipeForm.js", "body_html": "<p>The identicon_seed field has its value set up like so:<code>value={recipe.get('identicon_seed')}</code> - the issue here is that for new/cloned recipes, the <code>identicon_seed</code> will be undefined, but we need a random one to be chosen so it appears on the 'create' form.</p>\n<p>Doing something like <code>recipe.get('identicon', generateRandomIcon())</code> solves this in that it falls back to a random identicon if one is not set. But, the issue there is that on each re-render, <code>generateRandomIcon</code> is fired, so the identicon changes with each render. To solve that, I used <code>this.defaultSeed</code> - it's set once, and then remains that value for the rest of the component's lifespan. Subsequent re-renders still fall back on the already defined default.</p>\n<p>The issue with having <code>IdenticonField</code> generating a default is the case in which the field does not have a value but will have one loaded later. Since it's a simple form component, value changes need to be registered through <code>onChange</code> (that is, the <code>value</code> is tracked as a prop, not internally in the component). From there, it steps into a weird territory where it fires <code>onChange</code> when there's no value yet, but if another value is loaded, then another <code>onChange</code> needs to fire. This leads to weird flashes of different identicons appearing during page load. And, speaking semantically, since it really wasn't changing but being set to an initial value, an <code>onChange</code> event shouldn't technically need to fire.</p>\n<p>The reason why I had originally put the <code>defaultIdenticonSeed</code> initialization inside <code>didMount</code> was the idea that on each mount, the default seed identicon would change, preventing the same default identicon from being offered (say, if the user was creating multiple recipes in one session). I reckon the code being in the constructor function the same, with the only difference being we need to add the <code>super(props)</code> boilerplate to the constructor. You are correct about not needing the <code>thing = thing || otherThing</code> business in the constructor, though.</p>", "original_commit_id": "66246d7d7d6540357806b6bd9e6d180097dea86f", "id": 145138356}