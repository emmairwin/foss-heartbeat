{"original_position": 77, "diff_hunk": "@@ -0,0 +1,113 @@\n+import faker from 'faker';\n+\n+\n+let autoIncrementIndex = 0;\n+\n+\n+/* Class representing a generated field on a factory */\n+export class Field {\n+  /**\n+   * Creates a new generated field. These are lazy and will not be generated until the getter\n+   * for `value` is called.\n+   *\n+   * @param generator  A function that accepts will generate the value of the field.\n+   * @param options  The arguments to be passed through to the generator.\n+   */\n+  constructor(generator, ...options) {\n+    this.generator = generator;\n+    this.options = options;\n+  }\n+\n+  /**\n+   * A getter method `value` which replaces itself with a static value after the first time it\n+   * is called.\n+   */\n+  get value() {\n+    Object.defineProperty(this, 'value', { value: this.generator(...this.options) });\n+    return this.value;\n+  }\n+}\n+\n+\n+/* A special type of field that always generates a unique integer. */\n+export class AutoIncrementField extends Field {\n+  constructor() {\n+    const generator = () => {\n+      autoIncrementIndex += 1;\n+      return autoIncrementIndex;\n+    };\n+\n+    super(generator);\n+  }\n+}\n+\n+\n+/* A special type of field that returns an ISO 8601 formatted date string. */\n+export class DateField extends Field {\n+  constructor() {\n+    super(() => faker.date.past().toISOString());\n+  }\n+}\n+\n+\n+/* A special type of field that accepts a factory class instead of a generator function. */\n+export class SubFactory extends Field {\n+  constructor(factory, defaults = {}, options = {}) {\n+    const generator = (...args) => factory.build(...args);\n+    super(generator, defaults, options);\n+  }\n+}\n+\n+\n+/**\n+ * Class representing a data factory.\n+ *\n+ * Usage:\n+ * Typically you would use the build function to create a new instance of the class and return the\n+ * generated data.\n+ *\n+ * eg: const productData = Factory.build();\n+ *\n+ * New factories are created by extending this class (or it's subclasses) and defining a getFields\n+ * method which returns a keyed object where the keys represent the field names and the values are\n+ * an instance of the Field object or a static value to be used as is.\n+ *\n+ * Additionally a postGeneration function may be provided. This is always called after the data\n+ * has been generated and stored in this.data. This function can be used to manipulate generated\n+ * data or generate additional data based on the options provided at initialization.s", "body_text": "Typo \"at initialization.s\"", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/897", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/129176560", "created_at": "2017-07-24T23:01:45Z", "author_association": "MEMBER", "body": "Typo \"at initialization.s\"", "updated_at": "2017-07-25T02:57:39Z", "html_url": "https://github.com/mozilla/normandy/pull/897#discussion_r129176560", "pull_request_review_id": 51920826, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/129176560"}, "html": {"href": "https://github.com/mozilla/normandy/pull/897#discussion_r129176560"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/897"}}, "commit_id": "e92eabdb9de251edf2336400e37742d9c68ee522", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "position": null, "path": "recipe-server/client/control_new/tests/factory.js", "body_html": "<p>Typo \"at initialization.s\"</p>", "original_commit_id": "e88828c422316271236141eefe32a752ca8c153c", "id": 129176560}