{"original_position": 146, "diff_hunk": "@@ -2,79 +2,101 @@\n \n Cu.import(\"resource://shield-recipe-client/lib/ActionSandboxManager.jsm\");\n \n-async function withManager(testFunction) {\n-  const manager = new ActionSandboxManager();\n+async function withManager(script, testFunction) {\n+  const manager = new ActionSandboxManager(script);\n   manager.addHold(\"testing\");\n   await testFunction(manager);\n   manager.removeHold(\"testing\");\n }\n \n-add_task(withManager(async function testMissingCallbackName(manager) {\n-  equal(\n-    await manager.runAsyncCallbackFromScript(\"1 + 1\", \"missingCallback\"),\n-    undefined,\n-    \"runAsyncCallbackFromScript returns undefined when given a missing callback name\",\n-  );\n-}));\n-\n-add_task(withManager(async function testCallback(manager) {\n-  const result = await manager.runAsyncCallbackFromScript(`\n+add_task(async function testMissingCallbackName() {\n+  await withManager(\"1 + 1\", async manager => {\n+    equal(\n+      await manager.runAsyncCallback(\"missingCallback\"),\n+      undefined,\n+      \"runAsyncCallback returns undefined when given a missing callback name\",\n+    );\n+  });\n+});\n+\n+add_task(async function testCallback() {\n+  const script = `\n     registerAsyncCallback(\"testCallback\", async function(normandy) {\n       return 5;\n     });\n-  `, \"testCallback\");\n-  equal(result, 5, \"runAsyncCallbackFromScript executes the named callback inside the sandbox\");\n-}));\n+  `;\n \n-add_task(withManager(async function testArguments(manager) {\n-  const result = await manager.runAsyncCallbackFromScript(`\n+  await withManager(script, async manager => {\n+    const result = await manager.runAsyncCallback(\"testCallback\");\n+    equal(result, 5, \"runAsyncCallback executes the named callback inside the sandbox\");\n+  });\n+});\n+\n+add_task(async function testArguments() {\n+  const script = `\n     registerAsyncCallback(\"testCallback\", async function(normandy, a, b) {\n       return a + b;\n     });\n-  `, \"testCallback\", 4, 6);\n-  equal(result, 10, \"runAsyncCallbackFromScript passes arguments to the callback\");\n-}));\n+  `;\n \n-add_task(withManager(async function testCloning(manager) {\n-  const result = await manager.runAsyncCallbackFromScript(`\n+  await withManager(script, async manager => {\n+    const result = await manager.runAsyncCallback(\"testCallback\", 4, 6);\n+    equal(result, 10, \"runAsyncCallback passes arguments to the callback\");\n+  });\n+});\n+\n+add_task(async function testCloning() {\n+  const script = `\n     registerAsyncCallback(\"testCallback\", async function(normandy, obj) {\n       return {foo: \"bar\", baz: obj.baz};\n     });\n-  `, \"testCallback\", {baz: \"biff\"});\n-\n-  deepEqual(\n-    result,\n-    {foo: \"bar\", baz: \"biff\"},\n-    (\n-      \"runAsyncCallbackFromScript clones arguments into the sandbox and return values into the \" +\n-      \"context it was called from\"\n-    ),\n-  );\n-}));\n-\n-add_task(withManager(async function testError(manager) {\n-  try {\n-    await manager.runAsyncCallbackFromScript(`\n-      registerAsyncCallback(\"testCallback\", async function(normandy) {\n-        throw new Error(\"WHY\")\n-      });\n-    `, \"testCallback\");\n-    ok(false, \"runAsnycCallbackFromScript throws errors when raised by the sandbox\");\n-  } catch (err) {\n-    equal(err.message, \"WHY\", \"runAsnycCallbackFromScript clones error messages\");\n-  }\n-}));\n-\n-add_task(withManager(async function testDriver(manager) {\n-  const logInDriver = await manager.runAsyncCallbackFromScript(`\n+  `;\n+\n+  await withManager(script, async manager => {\n+    const result = await manager.runAsyncCallback(\"testCallback\", {baz: \"biff\"});\n+\n+    deepEqual(\n+      result,\n+      {foo: \"bar\", baz: \"biff\"},\n+      (\n+        \"runAsyncCallback clones arguments into the sandbox and return values into the \" +\n+        \"context it was called from\"\n+      ),\n+    );\n+  });\n+});\n+\n+add_task(async function testError() {\n+  const script = `\n+    registerAsyncCallback(\"testCallback\", async function(normandy) {\n+      throw new Error(\"WHY\")\n+    });\n+  `;\n+\n+  await withManager(script, async manager => {\n+    try {\n+      await manager.runAsyncCallback(\"testCallback\");\n+      ok(false, \"runAsnycCallbackFromScript throws errors when raised by the sandbox\");\n+    } catch (err) {\n+      equal(err.message, \"WHY\", \"runAsnycCallbackFromScript clones error messages\");\n+    }\n+  });\n+});\n+\n+add_task(async function testDriver() {\n+  const script = `\n     registerAsyncCallback(\"testCallback\", async function(normandy) {\n       return \"log\" in normandy;\n     });\n-  `, \"testCallback\");\n-  ok(logInDriver, \"runAsyncCallbackFromScript passes a driver as the first parameter\");\n-}));\n+  `;\n+\n+  await withManager(script, async manager => {\n+    const logInDriver = await manager.runAsyncCallback(\"testCallback\");\n+    ok(logInDriver, \"runAsyncCallback passes a driver as the first parameter\");", "body_text": "You can clone it back, right? Then you can check that it has driver-y methods, and/or potentially (depends on structured clone) whether its obj.constructor.name matches.", "in_reply_to_id": 110608821, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/659", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/110701399", "created_at": "2017-04-10T16:27:17Z", "author_association": "CONTRIBUTOR", "body": "You can clone it back, right? Then you can check that it has driver-y methods, and/or potentially (depends on structured clone) whether its `obj.constructor.name` matches.", "updated_at": "2017-04-13T20:52:41Z", "html_url": "https://github.com/mozilla/normandy/pull/659#discussion_r110701399", "pull_request_review_id": 31892271, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/110701399"}, "html": {"href": "https://github.com/mozilla/normandy/pull/659#discussion_r110701399"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/659"}}, "commit_id": "6d3d2f5c4585a8588829ddf4a62a9b490309bb8c", "user": {"following_url": "https://api.github.com/users/gijsk/following{/other_user}", "events_url": "https://api.github.com/users/gijsk/events{/privacy}", "organizations_url": "https://api.github.com/users/gijsk/orgs", "url": "https://api.github.com/users/gijsk", "gists_url": "https://api.github.com/users/gijsk/gists{/gist_id}", "html_url": "https://github.com/gijsk", "subscriptions_url": "https://api.github.com/users/gijsk/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/375983?v=4", "repos_url": "https://api.github.com/users/gijsk/repos", "received_events_url": "https://api.github.com/users/gijsk/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/gijsk/starred{/owner}{/repo}", "site_admin": false, "login": "gijsk", "type": "User", "id": 375983, "followers_url": "https://api.github.com/users/gijsk/followers"}, "position": null, "path": "recipe-client-addon/test/unit/test_ActionSandboxManager.js", "body_html": "<p>You can clone it back, right? Then you can check that it has driver-y methods, and/or potentially (depends on structured clone) whether its <code>obj.constructor.name</code> matches.</p>", "original_commit_id": "25fa964bb43757f044ee802c2a7a7b3cc35407c9", "id": 110701399}