{"original_position": 17, "diff_hunk": "@@ -41,3 +43,32 @@ this.FilterExpressions = {\n     return jexl.eval(onelineExpr, context);\n   },\n };\n+\n+/**\n+ * Return an array of the given object's own keys (specifically, its enumerable\n+ * properties), or undefined if the argument isn't an object.", "body_text": "No prob bob.\nJEXL uses undefined as a fallback value for property access that fails in lieu of throwing a key error (foo.bar.baz, if foo is undefined or a number or something, returns undefined), and the kind of comparisons we'd expect will fail against undefined, like (normandy.telemetry.main.iforgottherestofthepath.addons|keys).length > 0, so I figured it's a good stand-in for cases where, in JavaScript, we'd throw.", "in_reply_to_id": 123739288, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/816", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/123776562", "created_at": "2017-06-23T15:31:21Z", "author_association": "MEMBER", "body": "No prob bob.\r\n\r\nJEXL uses undefined as a fallback value for property access that fails in lieu of throwing a key error (`foo.bar.baz`, if `foo` is undefined or a number or something, returns undefined), and the kind of comparisons we'd expect will fail against undefined, like `(normandy.telemetry.main.iforgottherestofthepath.addons|keys).length > 0`, so I figured it's a good stand-in for cases where, in JavaScript, we'd throw.", "updated_at": "2017-06-23T15:31:21Z", "html_url": "https://github.com/mozilla/normandy/pull/816#discussion_r123776562", "pull_request_review_id": 46016043, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/123776562"}, "html": {"href": "https://github.com/mozilla/normandy/pull/816#discussion_r123776562"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/816"}}, "commit_id": "5d54fbc44c8e8297376646e528ea528e9fc8b3e3", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "position": 17, "path": "recipe-client-addon/lib/FilterExpressions.jsm", "body_html": "<p>No prob bob.</p>\n<p>JEXL uses undefined as a fallback value for property access that fails in lieu of throwing a key error (<code>foo.bar.baz</code>, if <code>foo</code> is undefined or a number or something, returns undefined), and the kind of comparisons we'd expect will fail against undefined, like <code>(normandy.telemetry.main.iforgottherestofthepath.addons|keys).length &gt; 0</code>, so I figured it's a good stand-in for cases where, in JavaScript, we'd throw.</p>", "original_commit_id": "5d54fbc44c8e8297376646e528ea528e9fc8b3e3", "id": 123776562}