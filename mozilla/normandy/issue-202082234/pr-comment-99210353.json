{"original_position": 317, "diff_hunk": "@@ -0,0 +1,375 @@\n+import json\n+import random\n+from urllib.parse import urlparse, urlunparse\n+\n+from normandy.base.utils import canonical_json_dumps\n+from normandy.recipes.api.serializers import ClientSerializer\n+from normandy.recipes.models import Action, Recipe\n+from normandy.recipes.tests import ClientFactory, RecipeFactory, SignatureFactory\n+\n+\n+def console_log(message, **kwargs):\n+    return RecipeFactory(\n+        action=Action.objects.get(name='console-log'),\n+        arguments={'message': message},\n+        **kwargs\n+    )\n+\n+\n+def show_heartbeat(**kwargs):\n+    return RecipeFactory(\n+        action=Action.objects.get(name='show-heartbeat'),\n+        **kwargs\n+    )\n+\n+\n+def generate_long_message():\n+    phrases = [\n+        'You all know the mission and what is at stake.',\n+        ('I have come to trust each of you with my life, but I have also heard murmurs of '\n+         'discontent.'),\n+        'I share your concerns.',\n+        'We are trained for espionage.',\n+        'We would be legends, but the records are sealed.',\n+        'Glory in battle is not our way.',\n+        'Think of our heroes: the Silent Step, who defeated a nation with a single shot.',\n+        'Or the Ever Alert, who kept armies at bay with hidden facts.',\n+        'These giants do not seem to give us solace here, but they are not all that we are.',\n+        'Before the network, there was the fleet.',\n+        'Before diplomacy, there were soldiers.',\n+        'Our influence stopped the rachni, but before that, we held the line.',\n+        'Our influence stopped the krogan, but before that, we held the line!',\n+        'Our influence will stop Saren! In the battle today, we will hold the line!',\n+    ]\n+    return ' '.join([random.choice(phrases) for _ in range(1000)])\n+\n+\n+def get_testcases():\n+    \"\"\"Return all defined testcases.\"\"\"\n+    return sorted(\n+        [TestCaseClass() for TestCaseClass in TestCase.__subclasses__()],\n+        key=lambda f: f.name\n+    )\n+\n+\n+class TestCase(object):\n+    \"\"\"\n+    Configuration for a specific manual test case. Subclasses can\n+    override methods on this class to customize the state of the server\n+    that will be serialized, or, if necessary, the serialization itself.\n+    \"\"\"\n+    @property\n+    def name(self):\n+        return self.__class__.__name__\n+\n+    @property\n+    def description(self):\n+        return '<p class=\"description\">{}</p>'.format(self.__doc__)\n+\n+    def load(self):\n+        \"\"\"\n+        Clear out all existing recipes and load this test's data in\n+        its place.\n+        \"\"\"\n+        Recipe.objects.all().delete()\n+        self.load_data()\n+\n+    def load_data(self):\n+        \"\"\"\n+        Create data specific to this test. Override to populate the\n+        database with recipes and other data the test case needs.\n+        \"\"\"\n+        pass\n+\n+    def client(self):\n+        \"\"\"\n+        Return a Client object that the client classification endpoint\n+        should render for this test.\n+        \"\"\"\n+        return ClientFactory()\n+\n+    def serialize_api(self, api_path, domain):\n+        \"\"\"\n+        Fetch API responses from the service and save them to the\n+        filesystem.\n+\n+        :param api_path:\n+            APIPath object for the root URL and path to fetch and save\n+            responses from and to.\n+        :param domain:\n+            Protocol and domain to use for absolute URLs in the serialized\n+            API.\n+        \"\"\"\n+        root_path = api_path.add('api', 'v1')\n+        self.serialize_recipe_api(root_path)\n+        self.serialize_client_api(root_path)\n+        self.serialize_action_api(root_path, domain)\n+\n+    def serialize_recipe_api(self, root_path):\n+        root_path.add('recipe').save()\n+        root_path.add('recipe', 'signed').save()\n+\n+    def serialize_client_api(self, root_path):\n+        client = self.client()\n+        client_data = ClientSerializer(client).data\n+        client_json = canonical_json_dumps(client_data)\n+        root_path.add('classify_client').save(client_json)\n+\n+    def serialize_action_api(self, root_path, domain):\n+        for action in Action.objects.all():\n+            # Action\n+            action_path = root_path.add('action', action.name)\n+            action_data = json.loads(action_path.fetch())\n+\n+            new_url = self.update_url(action_data['implementation_url'], domain)\n+            action_data['implementation_url'] = new_url\n+\n+            action_json = canonical_json_dumps(action_data)\n+            action_path.save(action_json)\n+\n+            # Action implementation\n+            action_path.add('implementation', action.implementation_hash).save()\n+\n+    def update_url(self, url, domain):\n+        \"\"\"\n+        Modify the URL to use the domain and to add the name of the\n+        test case as the first path segment.\n+        \"\"\"\n+        parsed_url = urlparse(url)\n+        parsed_domain = urlparse(domain)\n+        return urlunparse((\n+            parsed_domain.scheme,\n+            parsed_domain.netloc,\n+            '/' + self.name + parsed_url.path,\n+            parsed_url.params,\n+            parsed_url.query,\n+            parsed_url.fragment,\n+        ))\n+\n+\n+class FilterVersion(TestCase):\n+    \"\"\"\n+    Matches Firefox version 50.0.0. Logs to the console.\n+    \"\"\"\n+    def load_data(self):\n+        console_log('FilterVersion executed', filter_expression='normandy.version==\"50.0.0\"')\n+\n+\n+class FilterChannel(TestCase):\n+    \"\"\"\n+    Matches Firefox channel Aurora. Logs to the console.\n+    \"\"\"\n+    def load_data(self):\n+        console_log('FilterChannel executed', filter_expression='normandy.channel==\"aurora\"')\n+\n+\n+class FilterDefaultBrowser(TestCase):\n+    \"\"\"\n+    Matches if Firefox is the default browser. Logs to the console.\n+    \"\"\"\n+    def load_data(self):\n+        console_log(\n+            'FilterDefaultBrowser executed',\n+            filter_expression='normandy.isDefaultBrowser==true'\n+        )\n+\n+\n+class FilterGeolocationMatch(TestCase):\n+    \"\"\"\n+    Matches if the server geolocates the user to the US, which this test\n+    case does. Logs to the console.\n+    \"\"\"\n+    def client(self):\n+        return ClientFactory(country='US')\n+\n+    def load_data(self):\n+        console_log(\n+            'FilterGeolocationMatch executed',\n+            filter_expression='normandy.country==\"US\"'\n+        )\n+\n+\n+class FilterGeolocationNoMatch(TestCase):\n+    \"\"\"\n+    Matches if the server geolocates the user to the US; the server is\n+    set to geolocate the user to France. Logs to the console.\n+    \"\"\"\n+    def client(self):\n+        return ClientFactory(country='FR')\n+\n+    def load_data(self):\n+        console_log(\n+            'FilterGeolocationNoMatch executed',\n+            filter_expression='normandy.country==\"US\"'\n+        )\n+\n+\n+class FilterSample0(TestCase):\n+    \"\"\"\n+    Recipe set to a 0% sample of users (effectively should never be\n+    run). Logs to the console.\n+    \"\"\"\n+    def load_data(self):\n+        console_log('FilterSample0 executed', filter_expression='normandy.userId|stableSample(0)')\n+\n+\n+class FilterSample100(TestCase):\n+    \"\"\"\n+    Recipe set to a 100% sample of users (effectively should always be\n+    run). Logs to the console.\n+    \"\"\"\n+    def load_data(self):\n+        console_log(\n+            'FilterSample100 executed',\n+            filter_expression='normandy.userId|stableSample(1)'\n+        )\n+\n+\n+class FilterTelemetry(TestCase):\n+    @property\n+    def description(self):\n+        # We can't use a docstring due to the formatting for the code\n+        # sample.\n+        code = '\\n'.join([\n+            'Components.utils.import(\"resource://gre/modules/TelemetryController.jsm\");',\n+            'TelemetryController.submitExternalPing(\"testping\", {foo: \"bar\"});</pre>',\n+        ])\n+        return \"\"\"\n+            <p class=\"description\">Matches users with a telemetry ping named <code>testping</code>\n+            with the payload <code>{{foo: \"bar\"}}</code>. You can send a telemetry ping with the\n+            following code pasted into the Browser Console:</p>\n+            <pre>{code}</pre>\n+        \"\"\".format(code=code)\n+\n+    def load_data(self):\n+        console_log(\n+            'FilterTelemetry executed',\n+            filter_expression='''\n+                telemetry.testping.payload.foo==\"bar\"\n+            '''\n+        )\n+\n+\n+class ConsoleLogBasic(TestCase):\n+    \"\"\"Matches all clients. Logs a message to the console.\"\"\"\n+    def load_data(self):\n+        console_log('ConsoleLogBasic executed', filter_expression='true')\n+\n+\n+class ShowHeartbeatStars(TestCase):\n+    \"\"\"\n+    Matches all clients. Shows a Heartbeat prompt with a 5-star rating\n+    control.\n+    \"\"\"\n+    def load_data(self):\n+        show_heartbeat(\n+            filter_expression='true',\n+            arguments={\n+                'includeTelemetryUUID': False,\n+                'surveyId': 'test-survey',\n+                'message': 'ShowHeartbeatStars test prompt',\n+                'engagementButtonLabel': '',\n+                'thanksMessage': 'Thanks!',\n+                'postAnswerUrl': 'https://www.mozilla.org',\n+                'learnMoreMessage': 'Learn More',\n+                'learnMoreUrl': 'https://wiki.mozilla.org/Firefox/Shield',\n+            }\n+        )\n+\n+\n+class ShowHeartbeatButton(TestCase):\n+    \"\"\"\n+    Matches all clients. Shows a Heartbeat prompt with a clickable\n+    button.\n+    \"\"\"\n+    def load_data(self):\n+        show_heartbeat(\n+            filter_expression='true',\n+            arguments={\n+                'includeTelemetryUUID': False,\n+                'surveyId': 'test-survey',\n+                'message': 'ShowHeartbeatButton test prompt',\n+                'engagementButtonLabel': 'Click me!',\n+                'thanksMessage': 'Thanks!',\n+                'postAnswerUrl': 'https://www.mozilla.org',\n+                'learnMoreMessage': 'Learn More',\n+                'learnMoreUrl': 'https://wiki.mozilla.org/Firefox/Shield',\n+            }\n+        )\n+\n+\n+class FilterLongExpression(TestCase):\n+    \"\"\"\n+    Matches all clients using a <em>very long</em> filter expression. Logs to\n+    the console.\n+    \"\"\"\n+    def load_data(self):\n+        truthy_choices = [\n+            'true',\n+            '1 + 7 == 8',\n+            '5 > 4',\n+            '((4 * 8) - 12) > -5',\n+            '4 in [1, 2, 4]',\n+            '{foo: \"bar\"}.foo == \"bar\"',\n+            '\"bar\" in \"foobarbaz\"',\n+            'normandy.userId|stableSample(1)',\n+        ]\n+        truthy_expressions = [random.choice(truthy_choices) for _ in range(1000)]", "body_text": "Yep, it just takes a few seconds to evaluate.", "in_reply_to_id": 99200237, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/437", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/99210353", "created_at": "2017-02-02T20:17:41Z", "author_association": "MEMBER", "body": "Yep, it just takes a few seconds to evaluate.", "updated_at": "2017-02-02T20:17:41Z", "html_url": "https://github.com/mozilla/normandy/pull/437#discussion_r99210353", "pull_request_review_id": 19880542, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/99210353"}, "html": {"href": "https://github.com/mozilla/normandy/pull/437#discussion_r99210353"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/437"}}, "commit_id": "d00bbfd3fa37fe81049fbe331504ff8f3b07e1e6", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "position": 317, "path": "mock-recipe-server/testcases.py", "body_html": "<p>Yep, it just takes a few seconds to evaluate.</p>", "original_commit_id": "d00bbfd3fa37fe81049fbe331504ff8f3b07e1e6", "id": 99210353}