{"original_position": 109, "diff_hunk": "@@ -1,70 +1,123 @@\n import React from 'react'\n import { connect } from 'react-redux'\n import { push } from 'react-router-redux'\n+import { Table, Thead, Th, Tr, Td, applyFilter } from 'reactable'\n+import classNames from 'classnames'\n import moment from 'moment'\n import ControlActions from '../actions/ControlActions.js'\n \n-class BooleanIcon extends React.Component {\n-  render() {\n-    switch(this.props.value) {\n-      case true: return <i className=\"fa fa-lg fa-check green\">&nbsp;</i>;\n-      case false: return <i className=\"fa fa-lg fa-times red\">&nbsp;</i>;\n-    }\n+const BooleanIcon = (props) => {\n+  switch(props.value) {\n+    case true: return <i className=\"fa fa-lg fa-check green\">&nbsp;</i>;\n+    case false: return <i className=\"fa fa-lg fa-times red\">&nbsp;</i>;\n   }\n }\n \n-class RecipeDataRow extends React.Component {\n-  render() {\n-    const { recipe, dispatch } = this.props;\n-\n-    return (\n-      <tr key={recipe.id} onClick={(e) => {\n-        dispatch(ControlActions.setSelectedRecipe(recipe.id));\n-        dispatch(push(`/control/recipe/${recipe.id}/`))\n-      }}>\n-        <td>{recipe.name}</td>\n-        <td>{recipe.action}</td>\n-        <td><BooleanIcon value={recipe.enabled} /></td>\n-        <td><BooleanIcon value={recipe.is_approved} /></td>\n-        <td>{ moment(recipe.last_updated).fromNow() }</td>\n-      </tr>\n-    )\n-  }\n+const FilterBar = ({searchText, selectedFilter, updateSearch, updateFilter}) => {\n+  return (\n+    <div id=\"secondary-header\" className=\"fluid-8\">\n+      <div className=\"fluid-2\">\n+        <div className=\"search input-with-icon\">\n+          <input type=\"text\" placeholder=\"Search\" value={searchText} onChange={updateSearch} />\n+        </div>\n+      </div>\n+      <div id=\"filters-container\" className=\"fluid-6\">\n+        <h4>Filter By:</h4>\n+        <SwitchFilter options={['All', 'Enabled', 'Disabled']} selectedFilter={selectedFilter} updateFilter={updateFilter} />\n+      </div>\n+    </div>\n+  );\n }\n \n+const SwitchFilter = ({ options, selectedFilter, updateFilter }) => {\n+  return (\n+    <div className=\"switch\">\n+      <div className={`switch-selection position-${options.indexOf(selectedFilter)}`}>&nbsp;</div>\n+      { options.map(option =>\n+        <span key={option}\n+          className={classNames({ 'active': (option === selectedFilter) })}\n+          onClick={() => updateFilter(option)}>{option}\n+        </span>\n+      )}\n+    </div>\n+  )\n+}\n \n class RecipeList extends React.Component {\n   constructor(props) {\n     super(props);\n+    this.state = {\n+      searchText: '',\n+      filteredRecipes: null,\n+      selectedFilter: 'All'\n+    }\n   }\n \n   componentWillMount() {\n-    const { dispatch } = this.props\n+    const { dispatch, recipes } = this.props\n     dispatch(ControlActions.makeApiRequest('fetchAllRecipes', {}));\n     dispatch(ControlActions.setSelectedRecipe(null));\n   }\n \n+  viewRecipe(recipe) {\n+    const { dispatch } = this.props;\n+    dispatch(ControlActions.setSelectedRecipe(recipe.id));\n+    dispatch(push(`/control/recipe/${recipe.id}/`));\n+  }\n+\n+  updateSearch(event) {\n+    this.setState({\n+      searchText: event.target.value\n+    });\n+  }\n+\n+  updateFilter(filterStatus) {\n+    const { recipes } = this.props;\n+\n+    if (filterStatus === 'All') {\n+      this.setState({\n+        filteredRecipes: null,\n+        selectedFilter: filterStatus\n+      });\n+    } else {\n+      let enabledState = (filterStatus === 'Enabled') ? true : false;\n+      this.setState({\n+        filteredRecipes: recipes.filter(recipe => recipe.enabled === enabledState),", "body_text": "\ud83d\udc4d", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/161", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/68295539", "created_at": "2016-06-23T19:03:58Z", "author_association": "MEMBER", "body": "\ud83d\udc4d \n", "updated_at": "2016-06-23T19:03:58Z", "html_url": "https://github.com/mozilla/normandy/pull/161#discussion_r68295539", "pull_request_review_id": null, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/68295539"}, "html": {"href": "https://github.com/mozilla/normandy/pull/161#discussion_r68295539"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/161"}}, "commit_id": "d6c22f0bf632bd498439ba5ec372c3ae92ed92e9", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "position": 109, "path": "normandy/control/static/control/js/components/RecipeList.jsx", "body_html": "<p><g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji></p>", "original_commit_id": "d6c22f0bf632bd498439ba5ec372c3ae92ed92e9", "id": 68295539}