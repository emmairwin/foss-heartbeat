{"original_position": 108, "diff_hunk": "@@ -114,12 +119,16 @@ function runRecipe(recipe) {\n  * Generate a context object for JEXL filter expressions.\n  * @return {object}\n  */\n-function filterContext() {\n-    return {\n-        normandy: classifyClient(),\n-        telemetry: {},\n-        events: {},\n-    }\n+export function filterContext() {\n+    return new Promise(resolve => {\n+        classifyClient().then(classifiedClient => {\n+            resolve({\n+                normandy: classifiedClient,\n+                telemetry: {},\n+                events: {},\n+            })\n+        })\n+    })", "body_text": "To me, having a promise inside a new Promise block seems like an anti-pattern. What do you think about this?\nreturn classifyClient()\n.then(classifiedClient => {\n  return {\n    normandy: classifiedclient,\n    telemetry: {},\n    events: {},\n  }\n});\nBesides this, I don't think we actually need telemetry and events on this object: Jexl will just return undefined if actions try to access them. That's even true if someone tries to access something nested, like telemetry.general.user_id.", "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/143", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/62899498", "created_at": "2016-05-11T18:21:10Z", "author_association": "MEMBER", "body": "To me, having a promise inside a `new Promise` block seems like an anti-pattern. What do you think about this?\n\n``` js\nreturn classifyClient()\n.then(classifiedClient => {\n  return {\n    normandy: classifiedclient,\n    telemetry: {},\n    events: {},\n  }\n});\n```\n\nBesides this, I don't think we actually need `telemetry` and `events` on this object: Jexl will just return undefined if actions try to access them. That's even true if someone tries to access something nested, like `telemetry.general.user_id`.\n", "updated_at": "2016-05-18T20:45:45Z", "html_url": "https://github.com/mozilla/normandy/pull/143#discussion_r62899498", "pull_request_review_id": null, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/62899498"}, "html": {"href": "https://github.com/mozilla/normandy/pull/143#discussion_r62899498"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/143"}}, "commit_id": "24a2127747adfe1b79fb4313f652e2ba1b0df37a", "user": {"following_url": "https://api.github.com/users/mythmon/following{/other_user}", "events_url": "https://api.github.com/users/mythmon/events{/privacy}", "organizations_url": "https://api.github.com/users/mythmon/orgs", "url": "https://api.github.com/users/mythmon", "gists_url": "https://api.github.com/users/mythmon/gists{/gist_id}", "html_url": "https://github.com/mythmon", "subscriptions_url": "https://api.github.com/users/mythmon/subscriptions", "avatar_url": "https://avatars3.githubusercontent.com/u/305049?v=4", "repos_url": "https://api.github.com/users/mythmon/repos", "received_events_url": "https://api.github.com/users/mythmon/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/mythmon/starred{/owner}{/repo}", "site_admin": false, "login": "mythmon", "type": "User", "id": 305049, "followers_url": "https://api.github.com/users/mythmon/followers"}, "position": null, "path": "normandy/selfrepair/static/js/self_repair_runner.js", "body_html": "<p>To me, having a promise inside a <code>new Promise</code> block seems like an anti-pattern. What do you think about this?</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">return</span> <span class=\"pl-en\">classifyClient</span>()\n.<span class=\"pl-en\">then</span>(<span class=\"pl-smi\">classifiedClient</span> <span class=\"pl-k\">=&gt;</span> {\n  <span class=\"pl-k\">return</span> {\n    normandy<span class=\"pl-k\">:</span> classifiedclient,\n    telemetry<span class=\"pl-k\">:</span> {},\n    events<span class=\"pl-k\">:</span> {},\n  }\n});</pre></div>\n<p>Besides this, I don't think we actually need <code>telemetry</code> and <code>events</code> on this object: Jexl will just return undefined if actions try to access them. That's even true if someone tries to access something nested, like <code>telemetry.general.user_id</code>.</p>", "original_commit_id": "32ea25dd38636b15a0900115b42ef49cc70af6e0", "id": 62899498}