{"original_position": 28, "diff_hunk": "@@ -186,10 +187,39 @@ this.PreferenceExperiments = {\n       lastSeen: new Date().toJSON(),\n       preferenceName,\n       preferenceValue,\n+      preferenceType,\n       previousPreferenceValue: preferences.get(preferenceName, undefined),\n       preferenceBranchType,\n     };\n \n+    // If there's a previous preference value set, we need to ensure that the\n+    // incoming value is of the same type.\n+    if (preferences.has(preferenceName)) {", "body_text": "Isn't that backwards? In your proposed case, has would return true because preferences is the normal singleton from Preferences.jsm and returns true whether the user or default branch has a value. So it'd be caught.\nBut if an experiment used a default-branch pref, would it catch a user pref value? My browser console says:\n> var DefaultPreferences = new Preferences({defaultBranch: true})\nundefined\n> Preferences.has('defaultpreftest')\nfalse\n> Preferences.set('defaultpreftest', true)\nundefined\n> DefaultPreferences.has('defaultpreftest')\ntrue\n> DefaultPreferences.get('defaultpreftest')\n\"[Exception... \"Component returned failure code: 0x8000ffff (NS_ERROR_UNEXPECTED) [nsIPrefBranch.getBoolPref]\"  nsresult: \"0x8000ffff (NS_ERROR_UNEXPECTED)\"  location: \"JS frame :: resource://gre/modules/Preferences.jsm :: Preferences._get :: line 66\"  data: no]\"\nSo it looks like has will return true if a preference has a value on either the default or user branch, regardless of which preferences instance it is being called on. But if you try to use get on the default branch for a pref that only has a user value, you get an exception. Which makes sense if you look at the implementation, because all has does is farm out to getPrefType!\nSo then this code works fine, I think. An improvement would be to call Services.prefs.getPrefType instead of has, and make the condition check if the type is invalid or not. That'd save a call to getPrefType since currently it's getting called twice. A comment mentioning that getPrefType checks both user and default pref branches would be useful as well.", "in_reply_to_id": 112022373, "pull_request_url": "https://api.github.com/repos/mozilla/normandy/pulls/673", "url": "https://api.github.com/repos/mozilla/normandy/pulls/comments/112109733", "created_at": "2017-04-19T03:36:16Z", "author_association": "MEMBER", "body": "Isn't that backwards? In your proposed case, `has` would return true because `preferences` is the normal singleton from `Preferences.jsm` and returns true whether the user or default branch has a value. So it'd be caught.\r\n\r\nBut if an experiment used a default-branch pref, would it catch a user pref value? My browser console says:\r\n\r\n```js\r\n> var DefaultPreferences = new Preferences({defaultBranch: true})\r\nundefined\r\n> Preferences.has('defaultpreftest')\r\nfalse\r\n> Preferences.set('defaultpreftest', true)\r\nundefined\r\n> DefaultPreferences.has('defaultpreftest')\r\ntrue\r\n> DefaultPreferences.get('defaultpreftest')\r\n\"[Exception... \"Component returned failure code: 0x8000ffff (NS_ERROR_UNEXPECTED) [nsIPrefBranch.getBoolPref]\"  nsresult: \"0x8000ffff (NS_ERROR_UNEXPECTED)\"  location: \"JS frame :: resource://gre/modules/Preferences.jsm :: Preferences._get :: line 66\"  data: no]\"\r\n```\r\n\r\nSo it looks like `has` will return true if a preference has a value on _either_ the default or user branch, regardless of which preferences instance it is being called on. But if you try to use `get` on the default branch for a pref that only has a user value, you get an exception. Which makes sense if you look at the [implementation](https://dxr.mozilla.org/mozilla-central/source/toolkit/modules/Preferences.jsm#169), because all `has` does is farm out to `getPrefType`!\r\n\r\nSo then this code works fine, I think. An improvement would be to call `Services.prefs.getPrefType` instead of `has`, and make the condition check if the type is invalid or not. That'd save a call to `getPrefType` since currently it's getting called twice. A comment mentioning that `getPrefType` checks both user and default pref branches would be useful as well.", "updated_at": "2017-04-20T14:39:26Z", "html_url": "https://github.com/mozilla/normandy/pull/673#discussion_r112109733", "pull_request_review_id": 33399415, "_links": {"self": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/comments/112109733"}, "html": {"href": "https://github.com/mozilla/normandy/pull/673#discussion_r112109733"}, "pull_request": {"href": "https://api.github.com/repos/mozilla/normandy/pulls/673"}}, "commit_id": "0481af5b14c3a214840bcb56387fdf293f7386a8", "user": {"following_url": "https://api.github.com/users/Osmose/following{/other_user}", "events_url": "https://api.github.com/users/Osmose/events{/privacy}", "organizations_url": "https://api.github.com/users/Osmose/orgs", "url": "https://api.github.com/users/Osmose", "gists_url": "https://api.github.com/users/Osmose/gists{/gist_id}", "html_url": "https://github.com/Osmose", "subscriptions_url": "https://api.github.com/users/Osmose/subscriptions", "avatar_url": "https://avatars1.githubusercontent.com/u/193106?v=4", "repos_url": "https://api.github.com/users/Osmose/repos", "received_events_url": "https://api.github.com/users/Osmose/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/Osmose/starred{/owner}{/repo}", "site_admin": false, "login": "Osmose", "type": "User", "id": 193106, "followers_url": "https://api.github.com/users/Osmose/followers"}, "position": null, "path": "recipe-client-addon/lib/PreferenceExperiments.jsm", "body_html": "<p>Isn't that backwards? In your proposed case, <code>has</code> would return true because <code>preferences</code> is the normal singleton from <code>Preferences.jsm</code> and returns true whether the user or default branch has a value. So it'd be caught.</p>\n<p>But if an experiment used a default-branch pref, would it catch a user pref value? My browser console says:</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">var</span> DefaultPreferences <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Preferences</span>({defaultBranch<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>})\n<span class=\"pl-c1\">undefined</span>\n<span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">Preferences</span>.<span class=\"pl-c1\">has</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>defaultpreftest<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-c1\">false</span>\n<span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">Preferences</span>.<span class=\"pl-c1\">set</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>defaultpreftest<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">true</span>)\n<span class=\"pl-c1\">undefined</span>\n<span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">DefaultPreferences</span>.<span class=\"pl-c1\">has</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>defaultpreftest<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-c1\">true</span>\n<span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">DefaultPreferences</span>.<span class=\"pl-c1\">get</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>defaultpreftest<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[Exception... <span class=\"pl-pds\">\"</span></span>Component returned failure code<span class=\"pl-k\">:</span> <span class=\"pl-ii\">0x8000ffff</span> (<span class=\"pl-c1\">NS_ERROR_UNEXPECTED</span>) [<span class=\"pl-smi\">nsIPrefBranch</span>.<span class=\"pl-smi\">getBoolPref</span>]<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>  nsresult: <span class=\"pl-pds\">\"</span></span><span class=\"pl-ii\">0x8000ffff</span> (<span class=\"pl-c1\">NS_ERROR_UNEXPECTED</span>)<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>  location: <span class=\"pl-pds\">\"</span></span><span class=\"pl-c1\">JS</span> frame <span class=\"pl-k\">::</span> resource<span class=\"pl-k\">:</span><span class=\"pl-c\"><span class=\"pl-c\">//</span>gre/modules/Preferences.jsm :: Preferences._get :: line 66\"  data: no]\"</span></pre></div>\n<p>So it looks like <code>has</code> will return true if a preference has a value on <em>either</em> the default or user branch, regardless of which preferences instance it is being called on. But if you try to use <code>get</code> on the default branch for a pref that only has a user value, you get an exception. Which makes sense if you look at the <a href=\"https://dxr.mozilla.org/mozilla-central/source/toolkit/modules/Preferences.jsm#169\" rel=\"nofollow\">implementation</a>, because all <code>has</code> does is farm out to <code>getPrefType</code>!</p>\n<p>So then this code works fine, I think. An improvement would be to call <code>Services.prefs.getPrefType</code> instead of <code>has</code>, and make the condition check if the type is invalid or not. That'd save a call to <code>getPrefType</code> since currently it's getting called twice. A comment mentioning that <code>getPrefType</code> checks both user and default pref branches would be useful as well.</p>", "original_commit_id": "d74e71bc7c86d392e193d79a3cc819bb7d2427c6", "id": 112109733}